// Code generated by ent, DO NOT EDIT.

package norm

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Base applies equality check predicate on the "base" field. It's identical to BaseEQ.
func Base(v int) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBase), v))
	})
}

// Mean applies equality check predicate on the "mean" field. It's identical to MeanEQ.
func Mean(v float64) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMean), v))
	})
}

// Sigma applies equality check predicate on the "sigma" field. It's identical to SigmaEQ.
func Sigma(v float64) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSigma), v))
	})
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v int) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRank), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Norm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Norm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Norm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Norm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Norm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Norm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// BaseEQ applies the EQ predicate on the "base" field.
func BaseEQ(v int) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBase), v))
	})
}

// BaseNEQ applies the NEQ predicate on the "base" field.
func BaseNEQ(v int) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBase), v))
	})
}

// BaseIn applies the In predicate on the "base" field.
func BaseIn(vs ...int) predicate.Norm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBase), v...))
	})
}

// BaseNotIn applies the NotIn predicate on the "base" field.
func BaseNotIn(vs ...int) predicate.Norm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBase), v...))
	})
}

// BaseGT applies the GT predicate on the "base" field.
func BaseGT(v int) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBase), v))
	})
}

// BaseGTE applies the GTE predicate on the "base" field.
func BaseGTE(v int) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBase), v))
	})
}

// BaseLT applies the LT predicate on the "base" field.
func BaseLT(v int) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBase), v))
	})
}

// BaseLTE applies the LTE predicate on the "base" field.
func BaseLTE(v int) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBase), v))
	})
}

// MeanEQ applies the EQ predicate on the "mean" field.
func MeanEQ(v float64) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMean), v))
	})
}

// MeanNEQ applies the NEQ predicate on the "mean" field.
func MeanNEQ(v float64) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMean), v))
	})
}

// MeanIn applies the In predicate on the "mean" field.
func MeanIn(vs ...float64) predicate.Norm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMean), v...))
	})
}

// MeanNotIn applies the NotIn predicate on the "mean" field.
func MeanNotIn(vs ...float64) predicate.Norm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMean), v...))
	})
}

// MeanGT applies the GT predicate on the "mean" field.
func MeanGT(v float64) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMean), v))
	})
}

// MeanGTE applies the GTE predicate on the "mean" field.
func MeanGTE(v float64) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMean), v))
	})
}

// MeanLT applies the LT predicate on the "mean" field.
func MeanLT(v float64) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMean), v))
	})
}

// MeanLTE applies the LTE predicate on the "mean" field.
func MeanLTE(v float64) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMean), v))
	})
}

// SigmaEQ applies the EQ predicate on the "sigma" field.
func SigmaEQ(v float64) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSigma), v))
	})
}

// SigmaNEQ applies the NEQ predicate on the "sigma" field.
func SigmaNEQ(v float64) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSigma), v))
	})
}

// SigmaIn applies the In predicate on the "sigma" field.
func SigmaIn(vs ...float64) predicate.Norm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSigma), v...))
	})
}

// SigmaNotIn applies the NotIn predicate on the "sigma" field.
func SigmaNotIn(vs ...float64) predicate.Norm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSigma), v...))
	})
}

// SigmaGT applies the GT predicate on the "sigma" field.
func SigmaGT(v float64) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSigma), v))
	})
}

// SigmaGTE applies the GTE predicate on the "sigma" field.
func SigmaGTE(v float64) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSigma), v))
	})
}

// SigmaLT applies the LT predicate on the "sigma" field.
func SigmaLT(v float64) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSigma), v))
	})
}

// SigmaLTE applies the LTE predicate on the "sigma" field.
func SigmaLTE(v float64) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSigma), v))
	})
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v int) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRank), v))
	})
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v int) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRank), v))
	})
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...int) predicate.Norm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRank), v...))
	})
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...int) predicate.Norm {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Norm(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRank), v...))
	})
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v int) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRank), v))
	})
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v int) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRank), v))
	})
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v int) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRank), v))
	})
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v int) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRank), v))
	})
}

// MetaIsNil applies the IsNil predicate on the "meta" field.
func MetaIsNil() predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMeta)))
	})
}

// MetaNotNil applies the NotNil predicate on the "meta" field.
func MetaNotNil() predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMeta)))
	})
}

// HasSample applies the HasEdge predicate on the "sample" edge.
func HasSample() predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SampleTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SampleTable, SampleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSampleWith applies the HasEdge predicate on the "sample" edge with a given conditions (other predicates).
func HasSampleWith(preds ...predicate.Sample) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SampleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SampleTable, SampleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScale applies the HasEdge predicate on the "scale" edge.
func HasScale() predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScaleTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScaleTable, ScaleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScaleWith applies the HasEdge predicate on the "scale" edge with a given conditions (other predicates).
func HasScaleWith(preds ...predicate.Scale) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScaleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScaleTable, ScaleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Norm) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Norm) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Norm) predicate.Norm {
	return predicate.Norm(func(s *sql.Selector) {
		p(s.Not())
	})
}
