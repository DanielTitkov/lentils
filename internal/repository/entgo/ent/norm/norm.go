// Code generated by ent, DO NOT EDIT.

package norm

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the norm type in the database.
	Label = "norm"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldBase holds the string denoting the base field in the database.
	FieldBase = "base"
	// FieldMean holds the string denoting the mean field in the database.
	FieldMean = "mean"
	// FieldSigma holds the string denoting the sigma field in the database.
	FieldSigma = "sigma"
	// FieldMeta holds the string denoting the meta field in the database.
	FieldMeta = "meta"
	// EdgeSample holds the string denoting the sample edge name in mutations.
	EdgeSample = "sample"
	// EdgeScale holds the string denoting the scale edge name in mutations.
	EdgeScale = "scale"
	// Table holds the table name of the norm in the database.
	Table = "norms"
	// SampleTable is the table that holds the sample relation/edge.
	SampleTable = "norms"
	// SampleInverseTable is the table name for the Sample entity.
	// It exists in this package in order to avoid circular dependency with the "sample" package.
	SampleInverseTable = "samples"
	// SampleColumn is the table column denoting the sample relation/edge.
	SampleColumn = "sample_norms"
	// ScaleTable is the table that holds the scale relation/edge.
	ScaleTable = "norms"
	// ScaleInverseTable is the table name for the Scale entity.
	// It exists in this package in order to avoid circular dependency with the "scale" package.
	ScaleInverseTable = "scales"
	// ScaleColumn is the table column denoting the scale relation/edge.
	ScaleColumn = "scale_norms"
)

// Columns holds all SQL columns for norm fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldBase,
	FieldMean,
	FieldSigma,
	FieldMeta,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "norms"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"sample_norms",
	"scale_norms",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultBase holds the default value on creation for the "base" field.
	DefaultBase int
	// BaseValidator is a validator for the "base" field. It is called by the builders before save.
	BaseValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
