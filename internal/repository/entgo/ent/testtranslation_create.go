// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/test"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/testtranslation"
	"github.com/google/uuid"
)

// TestTranslationCreate is the builder for creating a TestTranslation entity.
type TestTranslationCreate struct {
	config
	mutation *TestTranslationMutation
	hooks    []Hook
}

// SetLocale sets the "locale" field.
func (ttc *TestTranslationCreate) SetLocale(t testtranslation.Locale) *TestTranslationCreate {
	ttc.mutation.SetLocale(t)
	return ttc
}

// SetTitle sets the "title" field.
func (ttc *TestTranslationCreate) SetTitle(s string) *TestTranslationCreate {
	ttc.mutation.SetTitle(s)
	return ttc
}

// SetDescription sets the "description" field.
func (ttc *TestTranslationCreate) SetDescription(s string) *TestTranslationCreate {
	ttc.mutation.SetDescription(s)
	return ttc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ttc *TestTranslationCreate) SetNillableDescription(s *string) *TestTranslationCreate {
	if s != nil {
		ttc.SetDescription(*s)
	}
	return ttc
}

// SetDetails sets the "details" field.
func (ttc *TestTranslationCreate) SetDetails(s string) *TestTranslationCreate {
	ttc.mutation.SetDetails(s)
	return ttc
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (ttc *TestTranslationCreate) SetNillableDetails(s *string) *TestTranslationCreate {
	if s != nil {
		ttc.SetDetails(*s)
	}
	return ttc
}

// SetInstruction sets the "instruction" field.
func (ttc *TestTranslationCreate) SetInstruction(s string) *TestTranslationCreate {
	ttc.mutation.SetInstruction(s)
	return ttc
}

// SetNillableInstruction sets the "instruction" field if the given value is not nil.
func (ttc *TestTranslationCreate) SetNillableInstruction(s *string) *TestTranslationCreate {
	if s != nil {
		ttc.SetInstruction(*s)
	}
	return ttc
}

// SetID sets the "id" field.
func (ttc *TestTranslationCreate) SetID(u uuid.UUID) *TestTranslationCreate {
	ttc.mutation.SetID(u)
	return ttc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ttc *TestTranslationCreate) SetNillableID(u *uuid.UUID) *TestTranslationCreate {
	if u != nil {
		ttc.SetID(*u)
	}
	return ttc
}

// SetTestID sets the "test" edge to the Test entity by ID.
func (ttc *TestTranslationCreate) SetTestID(id uuid.UUID) *TestTranslationCreate {
	ttc.mutation.SetTestID(id)
	return ttc
}

// SetNillableTestID sets the "test" edge to the Test entity by ID if the given value is not nil.
func (ttc *TestTranslationCreate) SetNillableTestID(id *uuid.UUID) *TestTranslationCreate {
	if id != nil {
		ttc = ttc.SetTestID(*id)
	}
	return ttc
}

// SetTest sets the "test" edge to the Test entity.
func (ttc *TestTranslationCreate) SetTest(t *Test) *TestTranslationCreate {
	return ttc.SetTestID(t.ID)
}

// Mutation returns the TestTranslationMutation object of the builder.
func (ttc *TestTranslationCreate) Mutation() *TestTranslationMutation {
	return ttc.mutation
}

// Save creates the TestTranslation in the database.
func (ttc *TestTranslationCreate) Save(ctx context.Context) (*TestTranslation, error) {
	var (
		err  error
		node *TestTranslation
	)
	ttc.defaults()
	if len(ttc.hooks) == 0 {
		if err = ttc.check(); err != nil {
			return nil, err
		}
		node, err = ttc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestTranslationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttc.check(); err != nil {
				return nil, err
			}
			ttc.mutation = mutation
			if node, err = ttc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ttc.hooks) - 1; i >= 0; i-- {
			if ttc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ttc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TestTranslation)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TestTranslationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TestTranslationCreate) SaveX(ctx context.Context) *TestTranslation {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TestTranslationCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TestTranslationCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttc *TestTranslationCreate) defaults() {
	if _, ok := ttc.mutation.ID(); !ok {
		v := testtranslation.DefaultID()
		ttc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TestTranslationCreate) check() error {
	if _, ok := ttc.mutation.Locale(); !ok {
		return &ValidationError{Name: "locale", err: errors.New(`ent: missing required field "TestTranslation.locale"`)}
	}
	if v, ok := ttc.mutation.Locale(); ok {
		if err := testtranslation.LocaleValidator(v); err != nil {
			return &ValidationError{Name: "locale", err: fmt.Errorf(`ent: validator failed for field "TestTranslation.locale": %w`, err)}
		}
	}
	if _, ok := ttc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "TestTranslation.title"`)}
	}
	if v, ok := ttc.mutation.Title(); ok {
		if err := testtranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TestTranslation.title": %w`, err)}
		}
	}
	return nil
}

func (ttc *TestTranslationCreate) sqlSave(ctx context.Context) (*TestTranslation, error) {
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ttc *TestTranslationCreate) createSpec() (*TestTranslation, *sqlgraph.CreateSpec) {
	var (
		_node = &TestTranslation{config: ttc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: testtranslation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testtranslation.FieldID,
			},
		}
	)
	if id, ok := ttc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ttc.mutation.Locale(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: testtranslation.FieldLocale,
		})
		_node.Locale = value
	}
	if value, ok := ttc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtranslation.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := ttc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtranslation.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := ttc.mutation.Details(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtranslation.FieldDetails,
		})
		_node.Details = value
	}
	if value, ok := ttc.mutation.Instruction(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtranslation.FieldInstruction,
		})
		_node.Instruction = value
	}
	if nodes := ttc.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testtranslation.TestTable,
			Columns: []string{testtranslation.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.test_translations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TestTranslationCreateBulk is the builder for creating many TestTranslation entities in bulk.
type TestTranslationCreateBulk struct {
	config
	builders []*TestTranslationCreate
}

// Save creates the TestTranslation entities in the database.
func (ttcb *TestTranslationCreateBulk) Save(ctx context.Context) ([]*TestTranslation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TestTranslation, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestTranslationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TestTranslationCreateBulk) SaveX(ctx context.Context) []*TestTranslation {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TestTranslationCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TestTranslationCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}
