// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/item"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/itemtranslation"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/question"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/response"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/scale"
	"github.com/google/uuid"
)

// ItemUpdate is the builder for updating Item entities.
type ItemUpdate struct {
	config
	hooks    []Hook
	mutation *ItemMutation
}

// Where appends a list predicates to the ItemUpdate builder.
func (iu *ItemUpdate) Where(ps ...predicate.Item) *ItemUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdateTime sets the "update_time" field.
func (iu *ItemUpdate) SetUpdateTime(t time.Time) *ItemUpdate {
	iu.mutation.SetUpdateTime(t)
	return iu
}

// SetCode sets the "code" field.
func (iu *ItemUpdate) SetCode(s string) *ItemUpdate {
	iu.mutation.SetCode(s)
	return iu
}

// SetType sets the "type" field.
func (iu *ItemUpdate) SetType(s string) *ItemUpdate {
	iu.mutation.SetType(s)
	return iu
}

// SetSteps sets the "steps" field.
func (iu *ItemUpdate) SetSteps(i int) *ItemUpdate {
	iu.mutation.ResetSteps()
	iu.mutation.SetSteps(i)
	return iu
}

// SetNillableSteps sets the "steps" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableSteps(i *int) *ItemUpdate {
	if i != nil {
		iu.SetSteps(*i)
	}
	return iu
}

// AddSteps adds i to the "steps" field.
func (iu *ItemUpdate) AddSteps(i int) *ItemUpdate {
	iu.mutation.AddSteps(i)
	return iu
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (iu *ItemUpdate) AddResponseIDs(ids ...uuid.UUID) *ItemUpdate {
	iu.mutation.AddResponseIDs(ids...)
	return iu
}

// AddResponses adds the "responses" edges to the Response entity.
func (iu *ItemUpdate) AddResponses(r ...*Response) *ItemUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iu.AddResponseIDs(ids...)
}

// AddTranslationIDs adds the "translations" edge to the ItemTranslation entity by IDs.
func (iu *ItemUpdate) AddTranslationIDs(ids ...uuid.UUID) *ItemUpdate {
	iu.mutation.AddTranslationIDs(ids...)
	return iu
}

// AddTranslations adds the "translations" edges to the ItemTranslation entity.
func (iu *ItemUpdate) AddTranslations(i ...*ItemTranslation) *ItemUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddTranslationIDs(ids...)
}

// AddScaleIDs adds the "scale" edge to the Scale entity by IDs.
func (iu *ItemUpdate) AddScaleIDs(ids ...uuid.UUID) *ItemUpdate {
	iu.mutation.AddScaleIDs(ids...)
	return iu
}

// AddScale adds the "scale" edges to the Scale entity.
func (iu *ItemUpdate) AddScale(s ...*Scale) *ItemUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iu.AddScaleIDs(ids...)
}

// AddQuestionIDs adds the "question" edge to the Question entity by IDs.
func (iu *ItemUpdate) AddQuestionIDs(ids ...uuid.UUID) *ItemUpdate {
	iu.mutation.AddQuestionIDs(ids...)
	return iu
}

// AddQuestion adds the "question" edges to the Question entity.
func (iu *ItemUpdate) AddQuestion(q ...*Question) *ItemUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return iu.AddQuestionIDs(ids...)
}

// Mutation returns the ItemMutation object of the builder.
func (iu *ItemUpdate) Mutation() *ItemMutation {
	return iu.mutation
}

// ClearResponses clears all "responses" edges to the Response entity.
func (iu *ItemUpdate) ClearResponses() *ItemUpdate {
	iu.mutation.ClearResponses()
	return iu
}

// RemoveResponseIDs removes the "responses" edge to Response entities by IDs.
func (iu *ItemUpdate) RemoveResponseIDs(ids ...uuid.UUID) *ItemUpdate {
	iu.mutation.RemoveResponseIDs(ids...)
	return iu
}

// RemoveResponses removes "responses" edges to Response entities.
func (iu *ItemUpdate) RemoveResponses(r ...*Response) *ItemUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iu.RemoveResponseIDs(ids...)
}

// ClearTranslations clears all "translations" edges to the ItemTranslation entity.
func (iu *ItemUpdate) ClearTranslations() *ItemUpdate {
	iu.mutation.ClearTranslations()
	return iu
}

// RemoveTranslationIDs removes the "translations" edge to ItemTranslation entities by IDs.
func (iu *ItemUpdate) RemoveTranslationIDs(ids ...uuid.UUID) *ItemUpdate {
	iu.mutation.RemoveTranslationIDs(ids...)
	return iu
}

// RemoveTranslations removes "translations" edges to ItemTranslation entities.
func (iu *ItemUpdate) RemoveTranslations(i ...*ItemTranslation) *ItemUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveTranslationIDs(ids...)
}

// ClearScale clears all "scale" edges to the Scale entity.
func (iu *ItemUpdate) ClearScale() *ItemUpdate {
	iu.mutation.ClearScale()
	return iu
}

// RemoveScaleIDs removes the "scale" edge to Scale entities by IDs.
func (iu *ItemUpdate) RemoveScaleIDs(ids ...uuid.UUID) *ItemUpdate {
	iu.mutation.RemoveScaleIDs(ids...)
	return iu
}

// RemoveScale removes "scale" edges to Scale entities.
func (iu *ItemUpdate) RemoveScale(s ...*Scale) *ItemUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iu.RemoveScaleIDs(ids...)
}

// ClearQuestion clears all "question" edges to the Question entity.
func (iu *ItemUpdate) ClearQuestion() *ItemUpdate {
	iu.mutation.ClearQuestion()
	return iu
}

// RemoveQuestionIDs removes the "question" edge to Question entities by IDs.
func (iu *ItemUpdate) RemoveQuestionIDs(ids ...uuid.UUID) *ItemUpdate {
	iu.mutation.RemoveQuestionIDs(ids...)
	return iu
}

// RemoveQuestion removes "question" edges to Question entities.
func (iu *ItemUpdate) RemoveQuestion(q ...*Question) *ItemUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return iu.RemoveQuestionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	iu.defaults()
	if len(iu.hooks) == 0 {
		if err = iu.check(); err != nil {
			return 0, err
		}
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iu.check(); err != nil {
				return 0, err
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ItemUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ItemUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *ItemUpdate) defaults() {
	if _, ok := iu.mutation.UpdateTime(); !ok {
		v := item.UpdateDefaultUpdateTime()
		iu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *ItemUpdate) check() error {
	if v, ok := iu.mutation.Code(); ok {
		if err := item.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Item.code": %w`, err)}
		}
	}
	if v, ok := iu.mutation.GetType(); ok {
		if err := item.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Item.type": %w`, err)}
		}
	}
	return nil
}

func (iu *ItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: item.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldUpdateTime,
		})
	}
	if value, ok := iu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldCode,
		})
	}
	if value, ok := iu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldType,
		})
	}
	if value, ok := iu.mutation.Steps(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldSteps,
		})
	}
	if value, ok := iu.mutation.AddedSteps(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldSteps,
		})
	}
	if iu.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ResponsesTable,
			Columns: []string{item.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: response.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !iu.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ResponsesTable,
			Columns: []string{item.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: response.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ResponsesTable,
			Columns: []string{item.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: response.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.TranslationsTable,
			Columns: []string{item.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itemtranslation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !iu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.TranslationsTable,
			Columns: []string{item.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itemtranslation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.TranslationsTable,
			Columns: []string{item.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itemtranslation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ScaleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   item.ScaleTable,
			Columns: item.ScalePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedScaleIDs(); len(nodes) > 0 && !iu.mutation.ScaleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   item.ScaleTable,
			Columns: item.ScalePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ScaleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   item.ScaleTable,
			Columns: item.ScalePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   item.QuestionTable,
			Columns: item.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedQuestionIDs(); len(nodes) > 0 && !iu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   item.QuestionTable,
			Columns: item.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   item.QuestionTable,
			Columns: item.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ItemUpdateOne is the builder for updating a single Item entity.
type ItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemMutation
}

// SetUpdateTime sets the "update_time" field.
func (iuo *ItemUpdateOne) SetUpdateTime(t time.Time) *ItemUpdateOne {
	iuo.mutation.SetUpdateTime(t)
	return iuo
}

// SetCode sets the "code" field.
func (iuo *ItemUpdateOne) SetCode(s string) *ItemUpdateOne {
	iuo.mutation.SetCode(s)
	return iuo
}

// SetType sets the "type" field.
func (iuo *ItemUpdateOne) SetType(s string) *ItemUpdateOne {
	iuo.mutation.SetType(s)
	return iuo
}

// SetSteps sets the "steps" field.
func (iuo *ItemUpdateOne) SetSteps(i int) *ItemUpdateOne {
	iuo.mutation.ResetSteps()
	iuo.mutation.SetSteps(i)
	return iuo
}

// SetNillableSteps sets the "steps" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableSteps(i *int) *ItemUpdateOne {
	if i != nil {
		iuo.SetSteps(*i)
	}
	return iuo
}

// AddSteps adds i to the "steps" field.
func (iuo *ItemUpdateOne) AddSteps(i int) *ItemUpdateOne {
	iuo.mutation.AddSteps(i)
	return iuo
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (iuo *ItemUpdateOne) AddResponseIDs(ids ...uuid.UUID) *ItemUpdateOne {
	iuo.mutation.AddResponseIDs(ids...)
	return iuo
}

// AddResponses adds the "responses" edges to the Response entity.
func (iuo *ItemUpdateOne) AddResponses(r ...*Response) *ItemUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iuo.AddResponseIDs(ids...)
}

// AddTranslationIDs adds the "translations" edge to the ItemTranslation entity by IDs.
func (iuo *ItemUpdateOne) AddTranslationIDs(ids ...uuid.UUID) *ItemUpdateOne {
	iuo.mutation.AddTranslationIDs(ids...)
	return iuo
}

// AddTranslations adds the "translations" edges to the ItemTranslation entity.
func (iuo *ItemUpdateOne) AddTranslations(i ...*ItemTranslation) *ItemUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddTranslationIDs(ids...)
}

// AddScaleIDs adds the "scale" edge to the Scale entity by IDs.
func (iuo *ItemUpdateOne) AddScaleIDs(ids ...uuid.UUID) *ItemUpdateOne {
	iuo.mutation.AddScaleIDs(ids...)
	return iuo
}

// AddScale adds the "scale" edges to the Scale entity.
func (iuo *ItemUpdateOne) AddScale(s ...*Scale) *ItemUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuo.AddScaleIDs(ids...)
}

// AddQuestionIDs adds the "question" edge to the Question entity by IDs.
func (iuo *ItemUpdateOne) AddQuestionIDs(ids ...uuid.UUID) *ItemUpdateOne {
	iuo.mutation.AddQuestionIDs(ids...)
	return iuo
}

// AddQuestion adds the "question" edges to the Question entity.
func (iuo *ItemUpdateOne) AddQuestion(q ...*Question) *ItemUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return iuo.AddQuestionIDs(ids...)
}

// Mutation returns the ItemMutation object of the builder.
func (iuo *ItemUpdateOne) Mutation() *ItemMutation {
	return iuo.mutation
}

// ClearResponses clears all "responses" edges to the Response entity.
func (iuo *ItemUpdateOne) ClearResponses() *ItemUpdateOne {
	iuo.mutation.ClearResponses()
	return iuo
}

// RemoveResponseIDs removes the "responses" edge to Response entities by IDs.
func (iuo *ItemUpdateOne) RemoveResponseIDs(ids ...uuid.UUID) *ItemUpdateOne {
	iuo.mutation.RemoveResponseIDs(ids...)
	return iuo
}

// RemoveResponses removes "responses" edges to Response entities.
func (iuo *ItemUpdateOne) RemoveResponses(r ...*Response) *ItemUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iuo.RemoveResponseIDs(ids...)
}

// ClearTranslations clears all "translations" edges to the ItemTranslation entity.
func (iuo *ItemUpdateOne) ClearTranslations() *ItemUpdateOne {
	iuo.mutation.ClearTranslations()
	return iuo
}

// RemoveTranslationIDs removes the "translations" edge to ItemTranslation entities by IDs.
func (iuo *ItemUpdateOne) RemoveTranslationIDs(ids ...uuid.UUID) *ItemUpdateOne {
	iuo.mutation.RemoveTranslationIDs(ids...)
	return iuo
}

// RemoveTranslations removes "translations" edges to ItemTranslation entities.
func (iuo *ItemUpdateOne) RemoveTranslations(i ...*ItemTranslation) *ItemUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveTranslationIDs(ids...)
}

// ClearScale clears all "scale" edges to the Scale entity.
func (iuo *ItemUpdateOne) ClearScale() *ItemUpdateOne {
	iuo.mutation.ClearScale()
	return iuo
}

// RemoveScaleIDs removes the "scale" edge to Scale entities by IDs.
func (iuo *ItemUpdateOne) RemoveScaleIDs(ids ...uuid.UUID) *ItemUpdateOne {
	iuo.mutation.RemoveScaleIDs(ids...)
	return iuo
}

// RemoveScale removes "scale" edges to Scale entities.
func (iuo *ItemUpdateOne) RemoveScale(s ...*Scale) *ItemUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuo.RemoveScaleIDs(ids...)
}

// ClearQuestion clears all "question" edges to the Question entity.
func (iuo *ItemUpdateOne) ClearQuestion() *ItemUpdateOne {
	iuo.mutation.ClearQuestion()
	return iuo
}

// RemoveQuestionIDs removes the "question" edge to Question entities by IDs.
func (iuo *ItemUpdateOne) RemoveQuestionIDs(ids ...uuid.UUID) *ItemUpdateOne {
	iuo.mutation.RemoveQuestionIDs(ids...)
	return iuo
}

// RemoveQuestion removes "question" edges to Question entities.
func (iuo *ItemUpdateOne) RemoveQuestion(q ...*Question) *ItemUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return iuo.RemoveQuestionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ItemUpdateOne) Select(field string, fields ...string) *ItemUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Item entity.
func (iuo *ItemUpdateOne) Save(ctx context.Context) (*Item, error) {
	var (
		err  error
		node *Item
	)
	iuo.defaults()
	if len(iuo.hooks) == 0 {
		if err = iuo.check(); err != nil {
			return nil, err
		}
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iuo.check(); err != nil {
				return nil, err
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ItemUpdateOne) SaveX(ctx context.Context) *Item {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ItemUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *ItemUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdateTime(); !ok {
		v := item.UpdateDefaultUpdateTime()
		iuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *ItemUpdateOne) check() error {
	if v, ok := iuo.mutation.Code(); ok {
		if err := item.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Item.code": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.GetType(); ok {
		if err := item.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Item.type": %w`, err)}
		}
	}
	return nil
}

func (iuo *ItemUpdateOne) sqlSave(ctx context.Context) (_node *Item, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: item.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Item.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, item.FieldID)
		for _, f := range fields {
			if !item.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != item.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldUpdateTime,
		})
	}
	if value, ok := iuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldCode,
		})
	}
	if value, ok := iuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldType,
		})
	}
	if value, ok := iuo.mutation.Steps(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldSteps,
		})
	}
	if value, ok := iuo.mutation.AddedSteps(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldSteps,
		})
	}
	if iuo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ResponsesTable,
			Columns: []string{item.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: response.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !iuo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ResponsesTable,
			Columns: []string{item.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: response.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ResponsesTable,
			Columns: []string{item.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: response.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.TranslationsTable,
			Columns: []string{item.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itemtranslation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !iuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.TranslationsTable,
			Columns: []string{item.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itemtranslation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.TranslationsTable,
			Columns: []string{item.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itemtranslation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ScaleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   item.ScaleTable,
			Columns: item.ScalePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedScaleIDs(); len(nodes) > 0 && !iuo.mutation.ScaleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   item.ScaleTable,
			Columns: item.ScalePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ScaleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   item.ScaleTable,
			Columns: item.ScalePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   item.QuestionTable,
			Columns: item.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedQuestionIDs(); len(nodes) > 0 && !iuo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   item.QuestionTable,
			Columns: item.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   item.QuestionTable,
			Columns: item.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Item{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
