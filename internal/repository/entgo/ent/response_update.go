// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/orrery/internal/repository/entgo/ent/item"
	"github.com/DanielTitkov/orrery/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/orrery/internal/repository/entgo/ent/response"
	"github.com/DanielTitkov/orrery/internal/repository/entgo/ent/take"
	"github.com/google/uuid"
)

// ResponseUpdate is the builder for updating Response entities.
type ResponseUpdate struct {
	config
	hooks    []Hook
	mutation *ResponseMutation
}

// Where appends a list predicates to the ResponseUpdate builder.
func (ru *ResponseUpdate) Where(ps ...predicate.Response) *ResponseUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdateTime sets the "update_time" field.
func (ru *ResponseUpdate) SetUpdateTime(t time.Time) *ResponseUpdate {
	ru.mutation.SetUpdateTime(t)
	return ru
}

// SetValue sets the "value" field.
func (ru *ResponseUpdate) SetValue(i int) *ResponseUpdate {
	ru.mutation.ResetValue()
	ru.mutation.SetValue(i)
	return ru
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ru *ResponseUpdate) SetNillableValue(i *int) *ResponseUpdate {
	if i != nil {
		ru.SetValue(*i)
	}
	return ru
}

// AddValue adds i to the "value" field.
func (ru *ResponseUpdate) AddValue(i int) *ResponseUpdate {
	ru.mutation.AddValue(i)
	return ru
}

// SetMeta sets the "meta" field.
func (ru *ResponseUpdate) SetMeta(m map[string]interface{}) *ResponseUpdate {
	ru.mutation.SetMeta(m)
	return ru
}

// ClearMeta clears the value of the "meta" field.
func (ru *ResponseUpdate) ClearMeta() *ResponseUpdate {
	ru.mutation.ClearMeta()
	return ru
}

// SetItemID sets the "item" edge to the Item entity by ID.
func (ru *ResponseUpdate) SetItemID(id uuid.UUID) *ResponseUpdate {
	ru.mutation.SetItemID(id)
	return ru
}

// SetItem sets the "item" edge to the Item entity.
func (ru *ResponseUpdate) SetItem(i *Item) *ResponseUpdate {
	return ru.SetItemID(i.ID)
}

// SetTakeID sets the "take" edge to the Take entity by ID.
func (ru *ResponseUpdate) SetTakeID(id uuid.UUID) *ResponseUpdate {
	ru.mutation.SetTakeID(id)
	return ru
}

// SetTake sets the "take" edge to the Take entity.
func (ru *ResponseUpdate) SetTake(t *Take) *ResponseUpdate {
	return ru.SetTakeID(t.ID)
}

// Mutation returns the ResponseMutation object of the builder.
func (ru *ResponseUpdate) Mutation() *ResponseMutation {
	return ru.mutation
}

// ClearItem clears the "item" edge to the Item entity.
func (ru *ResponseUpdate) ClearItem() *ResponseUpdate {
	ru.mutation.ClearItem()
	return ru
}

// ClearTake clears the "take" edge to the Take entity.
func (ru *ResponseUpdate) ClearTake() *ResponseUpdate {
	ru.mutation.ClearTake()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResponseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResponseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResponseUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResponseUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResponseUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ResponseUpdate) defaults() {
	if _, ok := ru.mutation.UpdateTime(); !ok {
		v := response.UpdateDefaultUpdateTime()
		ru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ResponseUpdate) check() error {
	if _, ok := ru.mutation.ItemID(); ru.mutation.ItemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Response.item"`)
	}
	if _, ok := ru.mutation.TakeID(); ru.mutation.TakeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Response.take"`)
	}
	return nil
}

func (ru *ResponseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   response.Table,
			Columns: response.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: response.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: response.FieldUpdateTime,
		})
	}
	if value, ok := ru.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: response.FieldValue,
		})
	}
	if value, ok := ru.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: response.FieldValue,
		})
	}
	if value, ok := ru.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: response.FieldMeta,
		})
	}
	if ru.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: response.FieldMeta,
		})
	}
	if ru.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.ItemTable,
			Columns: []string{response.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.ItemTable,
			Columns: []string{response.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.TakeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.TakeTable,
			Columns: []string{response.TakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: take.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.TakeTable,
			Columns: []string{response.TakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: take.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{response.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ResponseUpdateOne is the builder for updating a single Response entity.
type ResponseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResponseMutation
}

// SetUpdateTime sets the "update_time" field.
func (ruo *ResponseUpdateOne) SetUpdateTime(t time.Time) *ResponseUpdateOne {
	ruo.mutation.SetUpdateTime(t)
	return ruo
}

// SetValue sets the "value" field.
func (ruo *ResponseUpdateOne) SetValue(i int) *ResponseUpdateOne {
	ruo.mutation.ResetValue()
	ruo.mutation.SetValue(i)
	return ruo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ruo *ResponseUpdateOne) SetNillableValue(i *int) *ResponseUpdateOne {
	if i != nil {
		ruo.SetValue(*i)
	}
	return ruo
}

// AddValue adds i to the "value" field.
func (ruo *ResponseUpdateOne) AddValue(i int) *ResponseUpdateOne {
	ruo.mutation.AddValue(i)
	return ruo
}

// SetMeta sets the "meta" field.
func (ruo *ResponseUpdateOne) SetMeta(m map[string]interface{}) *ResponseUpdateOne {
	ruo.mutation.SetMeta(m)
	return ruo
}

// ClearMeta clears the value of the "meta" field.
func (ruo *ResponseUpdateOne) ClearMeta() *ResponseUpdateOne {
	ruo.mutation.ClearMeta()
	return ruo
}

// SetItemID sets the "item" edge to the Item entity by ID.
func (ruo *ResponseUpdateOne) SetItemID(id uuid.UUID) *ResponseUpdateOne {
	ruo.mutation.SetItemID(id)
	return ruo
}

// SetItem sets the "item" edge to the Item entity.
func (ruo *ResponseUpdateOne) SetItem(i *Item) *ResponseUpdateOne {
	return ruo.SetItemID(i.ID)
}

// SetTakeID sets the "take" edge to the Take entity by ID.
func (ruo *ResponseUpdateOne) SetTakeID(id uuid.UUID) *ResponseUpdateOne {
	ruo.mutation.SetTakeID(id)
	return ruo
}

// SetTake sets the "take" edge to the Take entity.
func (ruo *ResponseUpdateOne) SetTake(t *Take) *ResponseUpdateOne {
	return ruo.SetTakeID(t.ID)
}

// Mutation returns the ResponseMutation object of the builder.
func (ruo *ResponseUpdateOne) Mutation() *ResponseMutation {
	return ruo.mutation
}

// ClearItem clears the "item" edge to the Item entity.
func (ruo *ResponseUpdateOne) ClearItem() *ResponseUpdateOne {
	ruo.mutation.ClearItem()
	return ruo
}

// ClearTake clears the "take" edge to the Take entity.
func (ruo *ResponseUpdateOne) ClearTake() *ResponseUpdateOne {
	ruo.mutation.ClearTake()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResponseUpdateOne) Select(field string, fields ...string) *ResponseUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Response entity.
func (ruo *ResponseUpdateOne) Save(ctx context.Context) (*Response, error) {
	var (
		err  error
		node *Response
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResponseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Response)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ResponseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResponseUpdateOne) SaveX(ctx context.Context) *Response {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResponseUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResponseUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ResponseUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdateTime(); !ok {
		v := response.UpdateDefaultUpdateTime()
		ruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ResponseUpdateOne) check() error {
	if _, ok := ruo.mutation.ItemID(); ruo.mutation.ItemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Response.item"`)
	}
	if _, ok := ruo.mutation.TakeID(); ruo.mutation.TakeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Response.take"`)
	}
	return nil
}

func (ruo *ResponseUpdateOne) sqlSave(ctx context.Context) (_node *Response, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   response.Table,
			Columns: response.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: response.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Response.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, response.FieldID)
		for _, f := range fields {
			if !response.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != response.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: response.FieldUpdateTime,
		})
	}
	if value, ok := ruo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: response.FieldValue,
		})
	}
	if value, ok := ruo.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: response.FieldValue,
		})
	}
	if value, ok := ruo.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: response.FieldMeta,
		})
	}
	if ruo.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: response.FieldMeta,
		})
	}
	if ruo.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.ItemTable,
			Columns: []string{response.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.ItemTable,
			Columns: []string{response.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.TakeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.TakeTable,
			Columns: []string{response.TakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: take.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.TakeTable,
			Columns: []string{response.TakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: take.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Response{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{response.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
