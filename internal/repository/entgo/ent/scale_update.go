// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/interpretation"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/item"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/scale"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/scaletranslation"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/test"
	"github.com/google/uuid"
)

// ScaleUpdate is the builder for updating Scale entities.
type ScaleUpdate struct {
	config
	hooks    []Hook
	mutation *ScaleMutation
}

// Where appends a list predicates to the ScaleUpdate builder.
func (su *ScaleUpdate) Where(ps ...predicate.Scale) *ScaleUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *ScaleUpdate) SetUpdateTime(t time.Time) *ScaleUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetGlobal sets the "global" field.
func (su *ScaleUpdate) SetGlobal(b bool) *ScaleUpdate {
	su.mutation.SetGlobal(b)
	return su
}

// SetNillableGlobal sets the "global" field if the given value is not nil.
func (su *ScaleUpdate) SetNillableGlobal(b *bool) *ScaleUpdate {
	if b != nil {
		su.SetGlobal(*b)
	}
	return su
}

// SetType sets the "type" field.
func (su *ScaleUpdate) SetType(s scale.Type) *ScaleUpdate {
	su.mutation.SetType(s)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *ScaleUpdate) SetNillableType(s *scale.Type) *ScaleUpdate {
	if s != nil {
		su.SetType(*s)
	}
	return su
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (su *ScaleUpdate) AddItemIDs(ids ...uuid.UUID) *ScaleUpdate {
	su.mutation.AddItemIDs(ids...)
	return su
}

// AddItems adds the "items" edges to the Item entity.
func (su *ScaleUpdate) AddItems(i ...*Item) *ScaleUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.AddItemIDs(ids...)
}

// AddInterpretationIDs adds the "interpretations" edge to the Interpretation entity by IDs.
func (su *ScaleUpdate) AddInterpretationIDs(ids ...uuid.UUID) *ScaleUpdate {
	su.mutation.AddInterpretationIDs(ids...)
	return su
}

// AddInterpretations adds the "interpretations" edges to the Interpretation entity.
func (su *ScaleUpdate) AddInterpretations(i ...*Interpretation) *ScaleUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.AddInterpretationIDs(ids...)
}

// AddTranslationIDs adds the "translations" edge to the ScaleTranslation entity by IDs.
func (su *ScaleUpdate) AddTranslationIDs(ids ...uuid.UUID) *ScaleUpdate {
	su.mutation.AddTranslationIDs(ids...)
	return su
}

// AddTranslations adds the "translations" edges to the ScaleTranslation entity.
func (su *ScaleUpdate) AddTranslations(s ...*ScaleTranslation) *ScaleUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddTranslationIDs(ids...)
}

// AddTestIDs adds the "test" edge to the Test entity by IDs.
func (su *ScaleUpdate) AddTestIDs(ids ...uuid.UUID) *ScaleUpdate {
	su.mutation.AddTestIDs(ids...)
	return su
}

// AddTest adds the "test" edges to the Test entity.
func (su *ScaleUpdate) AddTest(t ...*Test) *ScaleUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTestIDs(ids...)
}

// Mutation returns the ScaleMutation object of the builder.
func (su *ScaleUpdate) Mutation() *ScaleMutation {
	return su.mutation
}

// ClearItems clears all "items" edges to the Item entity.
func (su *ScaleUpdate) ClearItems() *ScaleUpdate {
	su.mutation.ClearItems()
	return su
}

// RemoveItemIDs removes the "items" edge to Item entities by IDs.
func (su *ScaleUpdate) RemoveItemIDs(ids ...uuid.UUID) *ScaleUpdate {
	su.mutation.RemoveItemIDs(ids...)
	return su
}

// RemoveItems removes "items" edges to Item entities.
func (su *ScaleUpdate) RemoveItems(i ...*Item) *ScaleUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.RemoveItemIDs(ids...)
}

// ClearInterpretations clears all "interpretations" edges to the Interpretation entity.
func (su *ScaleUpdate) ClearInterpretations() *ScaleUpdate {
	su.mutation.ClearInterpretations()
	return su
}

// RemoveInterpretationIDs removes the "interpretations" edge to Interpretation entities by IDs.
func (su *ScaleUpdate) RemoveInterpretationIDs(ids ...uuid.UUID) *ScaleUpdate {
	su.mutation.RemoveInterpretationIDs(ids...)
	return su
}

// RemoveInterpretations removes "interpretations" edges to Interpretation entities.
func (su *ScaleUpdate) RemoveInterpretations(i ...*Interpretation) *ScaleUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.RemoveInterpretationIDs(ids...)
}

// ClearTranslations clears all "translations" edges to the ScaleTranslation entity.
func (su *ScaleUpdate) ClearTranslations() *ScaleUpdate {
	su.mutation.ClearTranslations()
	return su
}

// RemoveTranslationIDs removes the "translations" edge to ScaleTranslation entities by IDs.
func (su *ScaleUpdate) RemoveTranslationIDs(ids ...uuid.UUID) *ScaleUpdate {
	su.mutation.RemoveTranslationIDs(ids...)
	return su
}

// RemoveTranslations removes "translations" edges to ScaleTranslation entities.
func (su *ScaleUpdate) RemoveTranslations(s ...*ScaleTranslation) *ScaleUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveTranslationIDs(ids...)
}

// ClearTest clears all "test" edges to the Test entity.
func (su *ScaleUpdate) ClearTest() *ScaleUpdate {
	su.mutation.ClearTest()
	return su
}

// RemoveTestIDs removes the "test" edge to Test entities by IDs.
func (su *ScaleUpdate) RemoveTestIDs(ids ...uuid.UUID) *ScaleUpdate {
	su.mutation.RemoveTestIDs(ids...)
	return su
}

// RemoveTest removes "test" edges to Test entities.
func (su *ScaleUpdate) RemoveTest(t ...*Test) *ScaleUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTestIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScaleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScaleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScaleUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScaleUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScaleUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ScaleUpdate) defaults() {
	if _, ok := su.mutation.UpdateTime(); !ok {
		v := scale.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ScaleUpdate) check() error {
	if v, ok := su.mutation.GetType(); ok {
		if err := scale.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Scale.type": %w`, err)}
		}
	}
	return nil
}

func (su *ScaleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scale.Table,
			Columns: scale.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: scale.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scale.FieldUpdateTime,
		})
	}
	if value, ok := su.mutation.Global(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: scale.FieldGlobal,
		})
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: scale.FieldType,
		})
	}
	if su.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scale.ItemsTable,
			Columns: scale.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		createE := &ScaleItemCreate{config: su.config, mutation: newScaleItemMutation(su.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedItemsIDs(); len(nodes) > 0 && !su.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scale.ItemsTable,
			Columns: scale.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ScaleItemCreate{config: su.config, mutation: newScaleItemMutation(su.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scale.ItemsTable,
			Columns: scale.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ScaleItemCreate{config: su.config, mutation: newScaleItemMutation(su.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.InterpretationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.InterpretationsTable,
			Columns: []string{scale.InterpretationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: interpretation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedInterpretationsIDs(); len(nodes) > 0 && !su.mutation.InterpretationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.InterpretationsTable,
			Columns: []string{scale.InterpretationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: interpretation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.InterpretationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.InterpretationsTable,
			Columns: []string{scale.InterpretationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: interpretation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.TranslationsTable,
			Columns: []string{scale.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scaletranslation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !su.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.TranslationsTable,
			Columns: []string{scale.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scaletranslation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.TranslationsTable,
			Columns: []string{scale.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scaletranslation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scale.TestTable,
			Columns: scale.TestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTestIDs(); len(nodes) > 0 && !su.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scale.TestTable,
			Columns: scale.TestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scale.TestTable,
			Columns: scale.TestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scale.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ScaleUpdateOne is the builder for updating a single Scale entity.
type ScaleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScaleMutation
}

// SetUpdateTime sets the "update_time" field.
func (suo *ScaleUpdateOne) SetUpdateTime(t time.Time) *ScaleUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetGlobal sets the "global" field.
func (suo *ScaleUpdateOne) SetGlobal(b bool) *ScaleUpdateOne {
	suo.mutation.SetGlobal(b)
	return suo
}

// SetNillableGlobal sets the "global" field if the given value is not nil.
func (suo *ScaleUpdateOne) SetNillableGlobal(b *bool) *ScaleUpdateOne {
	if b != nil {
		suo.SetGlobal(*b)
	}
	return suo
}

// SetType sets the "type" field.
func (suo *ScaleUpdateOne) SetType(s scale.Type) *ScaleUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *ScaleUpdateOne) SetNillableType(s *scale.Type) *ScaleUpdateOne {
	if s != nil {
		suo.SetType(*s)
	}
	return suo
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (suo *ScaleUpdateOne) AddItemIDs(ids ...uuid.UUID) *ScaleUpdateOne {
	suo.mutation.AddItemIDs(ids...)
	return suo
}

// AddItems adds the "items" edges to the Item entity.
func (suo *ScaleUpdateOne) AddItems(i ...*Item) *ScaleUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.AddItemIDs(ids...)
}

// AddInterpretationIDs adds the "interpretations" edge to the Interpretation entity by IDs.
func (suo *ScaleUpdateOne) AddInterpretationIDs(ids ...uuid.UUID) *ScaleUpdateOne {
	suo.mutation.AddInterpretationIDs(ids...)
	return suo
}

// AddInterpretations adds the "interpretations" edges to the Interpretation entity.
func (suo *ScaleUpdateOne) AddInterpretations(i ...*Interpretation) *ScaleUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.AddInterpretationIDs(ids...)
}

// AddTranslationIDs adds the "translations" edge to the ScaleTranslation entity by IDs.
func (suo *ScaleUpdateOne) AddTranslationIDs(ids ...uuid.UUID) *ScaleUpdateOne {
	suo.mutation.AddTranslationIDs(ids...)
	return suo
}

// AddTranslations adds the "translations" edges to the ScaleTranslation entity.
func (suo *ScaleUpdateOne) AddTranslations(s ...*ScaleTranslation) *ScaleUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddTranslationIDs(ids...)
}

// AddTestIDs adds the "test" edge to the Test entity by IDs.
func (suo *ScaleUpdateOne) AddTestIDs(ids ...uuid.UUID) *ScaleUpdateOne {
	suo.mutation.AddTestIDs(ids...)
	return suo
}

// AddTest adds the "test" edges to the Test entity.
func (suo *ScaleUpdateOne) AddTest(t ...*Test) *ScaleUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTestIDs(ids...)
}

// Mutation returns the ScaleMutation object of the builder.
func (suo *ScaleUpdateOne) Mutation() *ScaleMutation {
	return suo.mutation
}

// ClearItems clears all "items" edges to the Item entity.
func (suo *ScaleUpdateOne) ClearItems() *ScaleUpdateOne {
	suo.mutation.ClearItems()
	return suo
}

// RemoveItemIDs removes the "items" edge to Item entities by IDs.
func (suo *ScaleUpdateOne) RemoveItemIDs(ids ...uuid.UUID) *ScaleUpdateOne {
	suo.mutation.RemoveItemIDs(ids...)
	return suo
}

// RemoveItems removes "items" edges to Item entities.
func (suo *ScaleUpdateOne) RemoveItems(i ...*Item) *ScaleUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.RemoveItemIDs(ids...)
}

// ClearInterpretations clears all "interpretations" edges to the Interpretation entity.
func (suo *ScaleUpdateOne) ClearInterpretations() *ScaleUpdateOne {
	suo.mutation.ClearInterpretations()
	return suo
}

// RemoveInterpretationIDs removes the "interpretations" edge to Interpretation entities by IDs.
func (suo *ScaleUpdateOne) RemoveInterpretationIDs(ids ...uuid.UUID) *ScaleUpdateOne {
	suo.mutation.RemoveInterpretationIDs(ids...)
	return suo
}

// RemoveInterpretations removes "interpretations" edges to Interpretation entities.
func (suo *ScaleUpdateOne) RemoveInterpretations(i ...*Interpretation) *ScaleUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.RemoveInterpretationIDs(ids...)
}

// ClearTranslations clears all "translations" edges to the ScaleTranslation entity.
func (suo *ScaleUpdateOne) ClearTranslations() *ScaleUpdateOne {
	suo.mutation.ClearTranslations()
	return suo
}

// RemoveTranslationIDs removes the "translations" edge to ScaleTranslation entities by IDs.
func (suo *ScaleUpdateOne) RemoveTranslationIDs(ids ...uuid.UUID) *ScaleUpdateOne {
	suo.mutation.RemoveTranslationIDs(ids...)
	return suo
}

// RemoveTranslations removes "translations" edges to ScaleTranslation entities.
func (suo *ScaleUpdateOne) RemoveTranslations(s ...*ScaleTranslation) *ScaleUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveTranslationIDs(ids...)
}

// ClearTest clears all "test" edges to the Test entity.
func (suo *ScaleUpdateOne) ClearTest() *ScaleUpdateOne {
	suo.mutation.ClearTest()
	return suo
}

// RemoveTestIDs removes the "test" edge to Test entities by IDs.
func (suo *ScaleUpdateOne) RemoveTestIDs(ids ...uuid.UUID) *ScaleUpdateOne {
	suo.mutation.RemoveTestIDs(ids...)
	return suo
}

// RemoveTest removes "test" edges to Test entities.
func (suo *ScaleUpdateOne) RemoveTest(t ...*Test) *ScaleUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTestIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScaleUpdateOne) Select(field string, fields ...string) *ScaleUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Scale entity.
func (suo *ScaleUpdateOne) Save(ctx context.Context) (*Scale, error) {
	var (
		err  error
		node *Scale
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScaleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Scale)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ScaleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScaleUpdateOne) SaveX(ctx context.Context) *Scale {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScaleUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScaleUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ScaleUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		v := scale.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ScaleUpdateOne) check() error {
	if v, ok := suo.mutation.GetType(); ok {
		if err := scale.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Scale.type": %w`, err)}
		}
	}
	return nil
}

func (suo *ScaleUpdateOne) sqlSave(ctx context.Context) (_node *Scale, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scale.Table,
			Columns: scale.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: scale.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Scale.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scale.FieldID)
		for _, f := range fields {
			if !scale.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scale.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scale.FieldUpdateTime,
		})
	}
	if value, ok := suo.mutation.Global(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: scale.FieldGlobal,
		})
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: scale.FieldType,
		})
	}
	if suo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scale.ItemsTable,
			Columns: scale.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		createE := &ScaleItemCreate{config: suo.config, mutation: newScaleItemMutation(suo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !suo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scale.ItemsTable,
			Columns: scale.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ScaleItemCreate{config: suo.config, mutation: newScaleItemMutation(suo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scale.ItemsTable,
			Columns: scale.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ScaleItemCreate{config: suo.config, mutation: newScaleItemMutation(suo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.InterpretationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.InterpretationsTable,
			Columns: []string{scale.InterpretationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: interpretation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedInterpretationsIDs(); len(nodes) > 0 && !suo.mutation.InterpretationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.InterpretationsTable,
			Columns: []string{scale.InterpretationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: interpretation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.InterpretationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.InterpretationsTable,
			Columns: []string{scale.InterpretationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: interpretation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.TranslationsTable,
			Columns: []string{scale.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scaletranslation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !suo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.TranslationsTable,
			Columns: []string{scale.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scaletranslation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.TranslationsTable,
			Columns: []string{scale.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scaletranslation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scale.TestTable,
			Columns: scale.TestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTestIDs(); len(nodes) > 0 && !suo.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scale.TestTable,
			Columns: scale.TestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scale.TestTable,
			Columns: scale.TestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Scale{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scale.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
