// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/test"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/testtranslation"
	"github.com/google/uuid"
)

// TestTranslation is the model entity for the TestTranslation schema.
type TestTranslation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Locale holds the value of the "locale" field.
	Locale testtranslation.Locale `json:"locale,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Instruction holds the value of the "instruction" field.
	Instruction string `json:"instruction,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestTranslationQuery when eager-loading is set.
	Edges             TestTranslationEdges `json:"edges"`
	test_translations *uuid.UUID
}

// TestTranslationEdges holds the relations/edges for other nodes in the graph.
type TestTranslationEdges struct {
	// Test holds the value of the test edge.
	Test *Test `json:"test,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TestOrErr returns the Test value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestTranslationEdges) TestOrErr() (*Test, error) {
	if e.loadedTypes[0] {
		if e.Test == nil {
			// The edge test was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: test.Label}
		}
		return e.Test, nil
	}
	return nil, &NotLoadedError{edge: "test"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestTranslation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case testtranslation.FieldLocale, testtranslation.FieldTitle, testtranslation.FieldDescription, testtranslation.FieldInstruction:
			values[i] = new(sql.NullString)
		case testtranslation.FieldID:
			values[i] = new(uuid.UUID)
		case testtranslation.ForeignKeys[0]: // test_translations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type TestTranslation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestTranslation fields.
func (tt *TestTranslation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testtranslation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tt.ID = *value
			}
		case testtranslation.FieldLocale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locale", values[i])
			} else if value.Valid {
				tt.Locale = testtranslation.Locale(value.String)
			}
		case testtranslation.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				tt.Title = value.String
			}
		case testtranslation.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				tt.Description = value.String
			}
		case testtranslation.FieldInstruction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instruction", values[i])
			} else if value.Valid {
				tt.Instruction = value.String
			}
		case testtranslation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field test_translations", values[i])
			} else if value.Valid {
				tt.test_translations = new(uuid.UUID)
				*tt.test_translations = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryTest queries the "test" edge of the TestTranslation entity.
func (tt *TestTranslation) QueryTest() *TestQuery {
	return (&TestTranslationClient{config: tt.config}).QueryTest(tt)
}

// Update returns a builder for updating this TestTranslation.
// Note that you need to call TestTranslation.Unwrap() before calling this method if this TestTranslation
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TestTranslation) Update() *TestTranslationUpdateOne {
	return (&TestTranslationClient{config: tt.config}).UpdateOne(tt)
}

// Unwrap unwraps the TestTranslation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TestTranslation) Unwrap() *TestTranslation {
	tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestTranslation is not a transactional entity")
	}
	tt.config.driver = tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TestTranslation) String() string {
	var builder strings.Builder
	builder.WriteString("TestTranslation(")
	builder.WriteString(fmt.Sprintf("id=%v", tt.ID))
	builder.WriteString(", locale=")
	builder.WriteString(fmt.Sprintf("%v", tt.Locale))
	builder.WriteString(", title=")
	builder.WriteString(tt.Title)
	builder.WriteString(", description=")
	builder.WriteString(tt.Description)
	builder.WriteString(", instruction=")
	builder.WriteString(tt.Instruction)
	builder.WriteByte(')')
	return builder.String()
}

// TestTranslations is a parsable slice of TestTranslation.
type TestTranslations []*TestTranslation

func (tt TestTranslations) config(cfg config) {
	for _i := range tt {
		tt[_i].config = cfg
	}
}
