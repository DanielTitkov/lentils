// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/question"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/questiontranslation"
	"github.com/google/uuid"
)

// QuestionTranslationQuery is the builder for querying QuestionTranslation entities.
type QuestionTranslationQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.QuestionTranslation
	// eager-loading edges.
	withQuestion *QuestionQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the QuestionTranslationQuery builder.
func (qtq *QuestionTranslationQuery) Where(ps ...predicate.QuestionTranslation) *QuestionTranslationQuery {
	qtq.predicates = append(qtq.predicates, ps...)
	return qtq
}

// Limit adds a limit step to the query.
func (qtq *QuestionTranslationQuery) Limit(limit int) *QuestionTranslationQuery {
	qtq.limit = &limit
	return qtq
}

// Offset adds an offset step to the query.
func (qtq *QuestionTranslationQuery) Offset(offset int) *QuestionTranslationQuery {
	qtq.offset = &offset
	return qtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (qtq *QuestionTranslationQuery) Unique(unique bool) *QuestionTranslationQuery {
	qtq.unique = &unique
	return qtq
}

// Order adds an order step to the query.
func (qtq *QuestionTranslationQuery) Order(o ...OrderFunc) *QuestionTranslationQuery {
	qtq.order = append(qtq.order, o...)
	return qtq
}

// QueryQuestion chains the current query on the "question" edge.
func (qtq *QuestionTranslationQuery) QueryQuestion() *QuestionQuery {
	query := &QuestionQuery{config: qtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(questiontranslation.Table, questiontranslation.FieldID, selector),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, questiontranslation.QuestionTable, questiontranslation.QuestionColumn),
		)
		fromU = sqlgraph.SetNeighbors(qtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first QuestionTranslation entity from the query.
// Returns a *NotFoundError when no QuestionTranslation was found.
func (qtq *QuestionTranslationQuery) First(ctx context.Context) (*QuestionTranslation, error) {
	nodes, err := qtq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{questiontranslation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (qtq *QuestionTranslationQuery) FirstX(ctx context.Context) *QuestionTranslation {
	node, err := qtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first QuestionTranslation ID from the query.
// Returns a *NotFoundError when no QuestionTranslation ID was found.
func (qtq *QuestionTranslationQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = qtq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{questiontranslation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (qtq *QuestionTranslationQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := qtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single QuestionTranslation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one QuestionTranslation entity is found.
// Returns a *NotFoundError when no QuestionTranslation entities are found.
func (qtq *QuestionTranslationQuery) Only(ctx context.Context) (*QuestionTranslation, error) {
	nodes, err := qtq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{questiontranslation.Label}
	default:
		return nil, &NotSingularError{questiontranslation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (qtq *QuestionTranslationQuery) OnlyX(ctx context.Context) *QuestionTranslation {
	node, err := qtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only QuestionTranslation ID in the query.
// Returns a *NotSingularError when more than one QuestionTranslation ID is found.
// Returns a *NotFoundError when no entities are found.
func (qtq *QuestionTranslationQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = qtq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{questiontranslation.Label}
	default:
		err = &NotSingularError{questiontranslation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (qtq *QuestionTranslationQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := qtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of QuestionTranslations.
func (qtq *QuestionTranslationQuery) All(ctx context.Context) ([]*QuestionTranslation, error) {
	if err := qtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return qtq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (qtq *QuestionTranslationQuery) AllX(ctx context.Context) []*QuestionTranslation {
	nodes, err := qtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of QuestionTranslation IDs.
func (qtq *QuestionTranslationQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := qtq.Select(questiontranslation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (qtq *QuestionTranslationQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := qtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (qtq *QuestionTranslationQuery) Count(ctx context.Context) (int, error) {
	if err := qtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return qtq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (qtq *QuestionTranslationQuery) CountX(ctx context.Context) int {
	count, err := qtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (qtq *QuestionTranslationQuery) Exist(ctx context.Context) (bool, error) {
	if err := qtq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return qtq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (qtq *QuestionTranslationQuery) ExistX(ctx context.Context) bool {
	exist, err := qtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the QuestionTranslationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (qtq *QuestionTranslationQuery) Clone() *QuestionTranslationQuery {
	if qtq == nil {
		return nil
	}
	return &QuestionTranslationQuery{
		config:       qtq.config,
		limit:        qtq.limit,
		offset:       qtq.offset,
		order:        append([]OrderFunc{}, qtq.order...),
		predicates:   append([]predicate.QuestionTranslation{}, qtq.predicates...),
		withQuestion: qtq.withQuestion.Clone(),
		// clone intermediate query.
		sql:    qtq.sql.Clone(),
		path:   qtq.path,
		unique: qtq.unique,
	}
}

// WithQuestion tells the query-builder to eager-load the nodes that are connected to
// the "question" edge. The optional arguments are used to configure the query builder of the edge.
func (qtq *QuestionTranslationQuery) WithQuestion(opts ...func(*QuestionQuery)) *QuestionTranslationQuery {
	query := &QuestionQuery{config: qtq.config}
	for _, opt := range opts {
		opt(query)
	}
	qtq.withQuestion = query
	return qtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Locale questiontranslation.Locale `json:"locale,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.QuestionTranslation.Query().
//		GroupBy(questiontranslation.FieldLocale).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (qtq *QuestionTranslationQuery) GroupBy(field string, fields ...string) *QuestionTranslationGroupBy {
	grbuild := &QuestionTranslationGroupBy{config: qtq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := qtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return qtq.sqlQuery(ctx), nil
	}
	grbuild.label = questiontranslation.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Locale questiontranslation.Locale `json:"locale,omitempty"`
//	}
//
//	client.QuestionTranslation.Query().
//		Select(questiontranslation.FieldLocale).
//		Scan(ctx, &v)
//
func (qtq *QuestionTranslationQuery) Select(fields ...string) *QuestionTranslationSelect {
	qtq.fields = append(qtq.fields, fields...)
	selbuild := &QuestionTranslationSelect{QuestionTranslationQuery: qtq}
	selbuild.label = questiontranslation.Label
	selbuild.flds, selbuild.scan = &qtq.fields, selbuild.Scan
	return selbuild
}

func (qtq *QuestionTranslationQuery) prepareQuery(ctx context.Context) error {
	for _, f := range qtq.fields {
		if !questiontranslation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if qtq.path != nil {
		prev, err := qtq.path(ctx)
		if err != nil {
			return err
		}
		qtq.sql = prev
	}
	return nil
}

func (qtq *QuestionTranslationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*QuestionTranslation, error) {
	var (
		nodes       = []*QuestionTranslation{}
		withFKs     = qtq.withFKs
		_spec       = qtq.querySpec()
		loadedTypes = [1]bool{
			qtq.withQuestion != nil,
		}
	)
	if qtq.withQuestion != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, questiontranslation.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*QuestionTranslation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &QuestionTranslation{config: qtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, qtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := qtq.withQuestion; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*QuestionTranslation)
		for i := range nodes {
			if nodes[i].question_translations == nil {
				continue
			}
			fk := *nodes[i].question_translations
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(question.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_translations" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Question = n
			}
		}
	}

	return nodes, nil
}

func (qtq *QuestionTranslationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := qtq.querySpec()
	_spec.Node.Columns = qtq.fields
	if len(qtq.fields) > 0 {
		_spec.Unique = qtq.unique != nil && *qtq.unique
	}
	return sqlgraph.CountNodes(ctx, qtq.driver, _spec)
}

func (qtq *QuestionTranslationQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := qtq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (qtq *QuestionTranslationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   questiontranslation.Table,
			Columns: questiontranslation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: questiontranslation.FieldID,
			},
		},
		From:   qtq.sql,
		Unique: true,
	}
	if unique := qtq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := qtq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, questiontranslation.FieldID)
		for i := range fields {
			if fields[i] != questiontranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := qtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := qtq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := qtq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := qtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (qtq *QuestionTranslationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(qtq.driver.Dialect())
	t1 := builder.Table(questiontranslation.Table)
	columns := qtq.fields
	if len(columns) == 0 {
		columns = questiontranslation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if qtq.sql != nil {
		selector = qtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if qtq.unique != nil && *qtq.unique {
		selector.Distinct()
	}
	for _, p := range qtq.predicates {
		p(selector)
	}
	for _, p := range qtq.order {
		p(selector)
	}
	if offset := qtq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := qtq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// QuestionTranslationGroupBy is the group-by builder for QuestionTranslation entities.
type QuestionTranslationGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (qtgb *QuestionTranslationGroupBy) Aggregate(fns ...AggregateFunc) *QuestionTranslationGroupBy {
	qtgb.fns = append(qtgb.fns, fns...)
	return qtgb
}

// Scan applies the group-by query and scans the result into the given value.
func (qtgb *QuestionTranslationGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := qtgb.path(ctx)
	if err != nil {
		return err
	}
	qtgb.sql = query
	return qtgb.sqlScan(ctx, v)
}

func (qtgb *QuestionTranslationGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range qtgb.fields {
		if !questiontranslation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := qtgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qtgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (qtgb *QuestionTranslationGroupBy) sqlQuery() *sql.Selector {
	selector := qtgb.sql.Select()
	aggregation := make([]string, 0, len(qtgb.fns))
	for _, fn := range qtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(qtgb.fields)+len(qtgb.fns))
		for _, f := range qtgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(qtgb.fields...)...)
}

// QuestionTranslationSelect is the builder for selecting fields of QuestionTranslation entities.
type QuestionTranslationSelect struct {
	*QuestionTranslationQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (qts *QuestionTranslationSelect) Scan(ctx context.Context, v interface{}) error {
	if err := qts.prepareQuery(ctx); err != nil {
		return err
	}
	qts.sql = qts.QuestionTranslationQuery.sqlQuery(ctx)
	return qts.sqlScan(ctx, v)
}

func (qts *QuestionTranslationSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := qts.sql.Query()
	if err := qts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
