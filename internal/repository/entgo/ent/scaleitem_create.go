// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinygodsdev/orrery/internal/repository/entgo/ent/item"
	"github.com/tinygodsdev/orrery/internal/repository/entgo/ent/scale"
	"github.com/tinygodsdev/orrery/internal/repository/entgo/ent/scaleitem"
)

// ScaleItemCreate is the builder for creating a ScaleItem entity.
type ScaleItemCreate struct {
	config
	mutation *ScaleItemMutation
	hooks    []Hook
}

// SetReverse sets the "reverse" field.
func (sic *ScaleItemCreate) SetReverse(b bool) *ScaleItemCreate {
	sic.mutation.SetReverse(b)
	return sic
}

// SetNillableReverse sets the "reverse" field if the given value is not nil.
func (sic *ScaleItemCreate) SetNillableReverse(b *bool) *ScaleItemCreate {
	if b != nil {
		sic.SetReverse(*b)
	}
	return sic
}

// SetScaleID sets the "scale_id" field.
func (sic *ScaleItemCreate) SetScaleID(u uuid.UUID) *ScaleItemCreate {
	sic.mutation.SetScaleID(u)
	return sic
}

// SetItemID sets the "item_id" field.
func (sic *ScaleItemCreate) SetItemID(u uuid.UUID) *ScaleItemCreate {
	sic.mutation.SetItemID(u)
	return sic
}

// SetItem sets the "item" edge to the Item entity.
func (sic *ScaleItemCreate) SetItem(i *Item) *ScaleItemCreate {
	return sic.SetItemID(i.ID)
}

// SetScale sets the "scale" edge to the Scale entity.
func (sic *ScaleItemCreate) SetScale(s *Scale) *ScaleItemCreate {
	return sic.SetScaleID(s.ID)
}

// Mutation returns the ScaleItemMutation object of the builder.
func (sic *ScaleItemCreate) Mutation() *ScaleItemMutation {
	return sic.mutation
}

// Save creates the ScaleItem in the database.
func (sic *ScaleItemCreate) Save(ctx context.Context) (*ScaleItem, error) {
	var (
		err  error
		node *ScaleItem
	)
	sic.defaults()
	if len(sic.hooks) == 0 {
		if err = sic.check(); err != nil {
			return nil, err
		}
		node, err = sic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScaleItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sic.check(); err != nil {
				return nil, err
			}
			sic.mutation = mutation
			if node, err = sic.sqlSave(ctx); err != nil {
				return nil, err
			}
			return node, err
		})
		for i := len(sic.hooks) - 1; i >= 0; i-- {
			if sic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ScaleItem)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ScaleItemMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sic *ScaleItemCreate) SaveX(ctx context.Context) *ScaleItem {
	v, err := sic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sic *ScaleItemCreate) Exec(ctx context.Context) error {
	_, err := sic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sic *ScaleItemCreate) ExecX(ctx context.Context) {
	if err := sic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sic *ScaleItemCreate) defaults() {
	if _, ok := sic.mutation.Reverse(); !ok {
		v := scaleitem.DefaultReverse
		sic.mutation.SetReverse(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sic *ScaleItemCreate) check() error {
	if _, ok := sic.mutation.Reverse(); !ok {
		return &ValidationError{Name: "reverse", err: errors.New(`ent: missing required field "ScaleItem.reverse"`)}
	}
	if _, ok := sic.mutation.ScaleID(); !ok {
		return &ValidationError{Name: "scale_id", err: errors.New(`ent: missing required field "ScaleItem.scale_id"`)}
	}
	if _, ok := sic.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item_id", err: errors.New(`ent: missing required field "ScaleItem.item_id"`)}
	}
	if _, ok := sic.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item", err: errors.New(`ent: missing required edge "ScaleItem.item"`)}
	}
	if _, ok := sic.mutation.ScaleID(); !ok {
		return &ValidationError{Name: "scale", err: errors.New(`ent: missing required edge "ScaleItem.scale"`)}
	}
	return nil
}

func (sic *ScaleItemCreate) sqlSave(ctx context.Context) (*ScaleItem, error) {
	_node, _spec := sic.createSpec()
	if err := sqlgraph.CreateNode(ctx, sic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

func (sic *ScaleItemCreate) createSpec() (*ScaleItem, *sqlgraph.CreateSpec) {
	var (
		_node = &ScaleItem{config: sic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: scaleitem.Table,
		}
	)
	if value, ok := sic.mutation.Reverse(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: scaleitem.FieldReverse,
		})
		_node.Reverse = value
	}
	if nodes := sic.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scaleitem.ItemTable,
			Columns: []string{scaleitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ItemID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.ScaleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scaleitem.ScaleTable,
			Columns: []string{scaleitem.ScaleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScaleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScaleItemCreateBulk is the builder for creating many ScaleItem entities in bulk.
type ScaleItemCreateBulk struct {
	config
	builders []*ScaleItemCreate
}

// Save creates the ScaleItem entities in the database.
func (sicb *ScaleItemCreateBulk) Save(ctx context.Context) ([]*ScaleItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sicb.builders))
	nodes := make([]*ScaleItem, len(sicb.builders))
	mutators := make([]Mutator, len(sicb.builders))
	for i := range sicb.builders {
		func(i int, root context.Context) {
			builder := sicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScaleItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sicb *ScaleItemCreateBulk) SaveX(ctx context.Context) []*ScaleItem {
	v, err := sicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sicb *ScaleItemCreateBulk) Exec(ctx context.Context) error {
	_, err := sicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sicb *ScaleItemCreateBulk) ExecX(ctx context.Context) {
	if err := sicb.Exec(ctx); err != nil {
		panic(err)
	}
}
