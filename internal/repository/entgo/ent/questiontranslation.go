// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/question"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/questiontranslation"
	"github.com/google/uuid"
)

// QuestionTranslation is the model entity for the QuestionTranslation schema.
type QuestionTranslation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Locale holds the value of the "locale" field.
	Locale questiontranslation.Locale `json:"locale,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// HeaderContent holds the value of the "header_content" field.
	HeaderContent string `json:"header_content,omitempty"`
	// FooterContent holds the value of the "footer_content" field.
	FooterContent string `json:"footer_content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionTranslationQuery when eager-loading is set.
	Edges                 QuestionTranslationEdges `json:"edges"`
	question_translations *uuid.UUID
}

// QuestionTranslationEdges holds the relations/edges for other nodes in the graph.
type QuestionTranslationEdges struct {
	// Question holds the value of the question edge.
	Question *Question `json:"question,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionTranslationEdges) QuestionOrErr() (*Question, error) {
	if e.loadedTypes[0] {
		if e.Question == nil {
			// The edge question was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: question.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QuestionTranslation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case questiontranslation.FieldLocale, questiontranslation.FieldContent, questiontranslation.FieldHeaderContent, questiontranslation.FieldFooterContent:
			values[i] = new(sql.NullString)
		case questiontranslation.FieldID:
			values[i] = new(uuid.UUID)
		case questiontranslation.ForeignKeys[0]: // question_translations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type QuestionTranslation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QuestionTranslation fields.
func (qt *QuestionTranslation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case questiontranslation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				qt.ID = *value
			}
		case questiontranslation.FieldLocale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locale", values[i])
			} else if value.Valid {
				qt.Locale = questiontranslation.Locale(value.String)
			}
		case questiontranslation.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				qt.Content = value.String
			}
		case questiontranslation.FieldHeaderContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field header_content", values[i])
			} else if value.Valid {
				qt.HeaderContent = value.String
			}
		case questiontranslation.FieldFooterContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field footer_content", values[i])
			} else if value.Valid {
				qt.FooterContent = value.String
			}
		case questiontranslation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field question_translations", values[i])
			} else if value.Valid {
				qt.question_translations = new(uuid.UUID)
				*qt.question_translations = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryQuestion queries the "question" edge of the QuestionTranslation entity.
func (qt *QuestionTranslation) QueryQuestion() *QuestionQuery {
	return (&QuestionTranslationClient{config: qt.config}).QueryQuestion(qt)
}

// Update returns a builder for updating this QuestionTranslation.
// Note that you need to call QuestionTranslation.Unwrap() before calling this method if this QuestionTranslation
// was returned from a transaction, and the transaction was committed or rolled back.
func (qt *QuestionTranslation) Update() *QuestionTranslationUpdateOne {
	return (&QuestionTranslationClient{config: qt.config}).UpdateOne(qt)
}

// Unwrap unwraps the QuestionTranslation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qt *QuestionTranslation) Unwrap() *QuestionTranslation {
	_tx, ok := qt.config.driver.(*txDriver)
	if !ok {
		panic("ent: QuestionTranslation is not a transactional entity")
	}
	qt.config.driver = _tx.drv
	return qt
}

// String implements the fmt.Stringer.
func (qt *QuestionTranslation) String() string {
	var builder strings.Builder
	builder.WriteString("QuestionTranslation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", qt.ID))
	builder.WriteString("locale=")
	builder.WriteString(fmt.Sprintf("%v", qt.Locale))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(qt.Content)
	builder.WriteString(", ")
	builder.WriteString("header_content=")
	builder.WriteString(qt.HeaderContent)
	builder.WriteString(", ")
	builder.WriteString("footer_content=")
	builder.WriteString(qt.FooterContent)
	builder.WriteByte(')')
	return builder.String()
}

// QuestionTranslations is a parsable slice of QuestionTranslation.
type QuestionTranslations []*QuestionTranslation

func (qt QuestionTranslations) config(cfg config) {
	for _i := range qt {
		qt[_i].config = cfg
	}
}
