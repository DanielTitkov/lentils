// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/interpretation"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/scale"
	"github.com/google/uuid"
)

// Interpretation is the model entity for the Interpretation schema.
type Interpretation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Range holds the value of the "range" field.
	Range [2]float64 `json:"range,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InterpretationQuery when eager-loading is set.
	Edges                 InterpretationEdges `json:"edges"`
	scale_interpretations *uuid.UUID
}

// InterpretationEdges holds the relations/edges for other nodes in the graph.
type InterpretationEdges struct {
	// Translations holds the value of the translations edge.
	Translations []*InterpretationTranslation `json:"translations,omitempty"`
	// Scale holds the value of the scale edge.
	Scale *Scale `json:"scale,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TranslationsOrErr returns the Translations value or an error if the edge
// was not loaded in eager-loading.
func (e InterpretationEdges) TranslationsOrErr() ([]*InterpretationTranslation, error) {
	if e.loadedTypes[0] {
		return e.Translations, nil
	}
	return nil, &NotLoadedError{edge: "translations"}
}

// ScaleOrErr returns the Scale value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InterpretationEdges) ScaleOrErr() (*Scale, error) {
	if e.loadedTypes[1] {
		if e.Scale == nil {
			// The edge scale was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: scale.Label}
		}
		return e.Scale, nil
	}
	return nil, &NotLoadedError{edge: "scale"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Interpretation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case interpretation.FieldRange:
			values[i] = new([]byte)
		case interpretation.FieldCreateTime, interpretation.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case interpretation.FieldID:
			values[i] = new(uuid.UUID)
		case interpretation.ForeignKeys[0]: // scale_interpretations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Interpretation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Interpretation fields.
func (i *Interpretation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case interpretation.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case interpretation.FieldCreateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[j])
			} else if value.Valid {
				i.CreateTime = value.Time
			}
		case interpretation.FieldUpdateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[j])
			} else if value.Valid {
				i.UpdateTime = value.Time
			}
		case interpretation.FieldRange:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field range", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.Range); err != nil {
					return fmt.Errorf("unmarshal field range: %w", err)
				}
			}
		case interpretation.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field scale_interpretations", values[j])
			} else if value.Valid {
				i.scale_interpretations = new(uuid.UUID)
				*i.scale_interpretations = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryTranslations queries the "translations" edge of the Interpretation entity.
func (i *Interpretation) QueryTranslations() *InterpretationTranslationQuery {
	return (&InterpretationClient{config: i.config}).QueryTranslations(i)
}

// QueryScale queries the "scale" edge of the Interpretation entity.
func (i *Interpretation) QueryScale() *ScaleQuery {
	return (&InterpretationClient{config: i.config}).QueryScale(i)
}

// Update returns a builder for updating this Interpretation.
// Note that you need to call Interpretation.Unwrap() before calling this method if this Interpretation
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Interpretation) Update() *InterpretationUpdateOne {
	return (&InterpretationClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Interpretation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Interpretation) Unwrap() *Interpretation {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Interpretation is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Interpretation) String() string {
	var builder strings.Builder
	builder.WriteString("Interpretation(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(i.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(i.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", range=")
	builder.WriteString(fmt.Sprintf("%v", i.Range))
	builder.WriteByte(')')
	return builder.String()
}

// Interpretations is a parsable slice of Interpretation.
type Interpretations []*Interpretation

func (i Interpretations) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
