// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/migrate"
	"github.com/google/uuid"

	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/badge"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/challenge"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/prediction"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/proof"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/test"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/testtranslation"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/user"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/usersession"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Badge is the client for interacting with the Badge builders.
	Badge *BadgeClient
	// Challenge is the client for interacting with the Challenge builders.
	Challenge *ChallengeClient
	// Prediction is the client for interacting with the Prediction builders.
	Prediction *PredictionClient
	// Proof is the client for interacting with the Proof builders.
	Proof *ProofClient
	// Test is the client for interacting with the Test builders.
	Test *TestClient
	// TestTranslation is the client for interacting with the TestTranslation builders.
	TestTranslation *TestTranslationClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserSession is the client for interacting with the UserSession builders.
	UserSession *UserSessionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Badge = NewBadgeClient(c.config)
	c.Challenge = NewChallengeClient(c.config)
	c.Prediction = NewPredictionClient(c.config)
	c.Proof = NewProofClient(c.config)
	c.Test = NewTestClient(c.config)
	c.TestTranslation = NewTestTranslationClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserSession = NewUserSessionClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Badge:           NewBadgeClient(cfg),
		Challenge:       NewChallengeClient(cfg),
		Prediction:      NewPredictionClient(cfg),
		Proof:           NewProofClient(cfg),
		Test:            NewTestClient(cfg),
		TestTranslation: NewTestTranslationClient(cfg),
		User:            NewUserClient(cfg),
		UserSession:     NewUserSessionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Badge:           NewBadgeClient(cfg),
		Challenge:       NewChallengeClient(cfg),
		Prediction:      NewPredictionClient(cfg),
		Proof:           NewProofClient(cfg),
		Test:            NewTestClient(cfg),
		TestTranslation: NewTestTranslationClient(cfg),
		User:            NewUserClient(cfg),
		UserSession:     NewUserSessionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Badge.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Badge.Use(hooks...)
	c.Challenge.Use(hooks...)
	c.Prediction.Use(hooks...)
	c.Proof.Use(hooks...)
	c.Test.Use(hooks...)
	c.TestTranslation.Use(hooks...)
	c.User.Use(hooks...)
	c.UserSession.Use(hooks...)
}

// BadgeClient is a client for the Badge schema.
type BadgeClient struct {
	config
}

// NewBadgeClient returns a client for the Badge from the given config.
func NewBadgeClient(c config) *BadgeClient {
	return &BadgeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `badge.Hooks(f(g(h())))`.
func (c *BadgeClient) Use(hooks ...Hook) {
	c.hooks.Badge = append(c.hooks.Badge, hooks...)
}

// Create returns a create builder for Badge.
func (c *BadgeClient) Create() *BadgeCreate {
	mutation := newBadgeMutation(c.config, OpCreate)
	return &BadgeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Badge entities.
func (c *BadgeClient) CreateBulk(builders ...*BadgeCreate) *BadgeCreateBulk {
	return &BadgeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Badge.
func (c *BadgeClient) Update() *BadgeUpdate {
	mutation := newBadgeMutation(c.config, OpUpdate)
	return &BadgeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BadgeClient) UpdateOne(b *Badge) *BadgeUpdateOne {
	mutation := newBadgeMutation(c.config, OpUpdateOne, withBadge(b))
	return &BadgeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BadgeClient) UpdateOneID(id int) *BadgeUpdateOne {
	mutation := newBadgeMutation(c.config, OpUpdateOne, withBadgeID(id))
	return &BadgeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Badge.
func (c *BadgeClient) Delete() *BadgeDelete {
	mutation := newBadgeMutation(c.config, OpDelete)
	return &BadgeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BadgeClient) DeleteOne(b *Badge) *BadgeDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BadgeClient) DeleteOneID(id int) *BadgeDeleteOne {
	builder := c.Delete().Where(badge.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BadgeDeleteOne{builder}
}

// Query returns a query builder for Badge.
func (c *BadgeClient) Query() *BadgeQuery {
	return &BadgeQuery{
		config: c.config,
	}
}

// Get returns a Badge entity by its id.
func (c *BadgeClient) Get(ctx context.Context, id int) (*Badge, error) {
	return c.Query().Where(badge.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BadgeClient) GetX(ctx context.Context, id int) *Badge {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Badge.
func (c *BadgeClient) QueryUsers(b *Badge) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(badge.Table, badge.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, badge.UsersTable, badge.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BadgeClient) Hooks() []Hook {
	return c.hooks.Badge
}

// ChallengeClient is a client for the Challenge schema.
type ChallengeClient struct {
	config
}

// NewChallengeClient returns a client for the Challenge from the given config.
func NewChallengeClient(c config) *ChallengeClient {
	return &ChallengeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `challenge.Hooks(f(g(h())))`.
func (c *ChallengeClient) Use(hooks ...Hook) {
	c.hooks.Challenge = append(c.hooks.Challenge, hooks...)
}

// Create returns a create builder for Challenge.
func (c *ChallengeClient) Create() *ChallengeCreate {
	mutation := newChallengeMutation(c.config, OpCreate)
	return &ChallengeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Challenge entities.
func (c *ChallengeClient) CreateBulk(builders ...*ChallengeCreate) *ChallengeCreateBulk {
	return &ChallengeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Challenge.
func (c *ChallengeClient) Update() *ChallengeUpdate {
	mutation := newChallengeMutation(c.config, OpUpdate)
	return &ChallengeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChallengeClient) UpdateOne(ch *Challenge) *ChallengeUpdateOne {
	mutation := newChallengeMutation(c.config, OpUpdateOne, withChallenge(ch))
	return &ChallengeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChallengeClient) UpdateOneID(id uuid.UUID) *ChallengeUpdateOne {
	mutation := newChallengeMutation(c.config, OpUpdateOne, withChallengeID(id))
	return &ChallengeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Challenge.
func (c *ChallengeClient) Delete() *ChallengeDelete {
	mutation := newChallengeMutation(c.config, OpDelete)
	return &ChallengeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ChallengeClient) DeleteOne(ch *Challenge) *ChallengeDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ChallengeClient) DeleteOneID(id uuid.UUID) *ChallengeDeleteOne {
	builder := c.Delete().Where(challenge.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChallengeDeleteOne{builder}
}

// Query returns a query builder for Challenge.
func (c *ChallengeClient) Query() *ChallengeQuery {
	return &ChallengeQuery{
		config: c.config,
	}
}

// Get returns a Challenge entity by its id.
func (c *ChallengeClient) Get(ctx context.Context, id uuid.UUID) (*Challenge, error) {
	return c.Query().Where(challenge.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChallengeClient) GetX(ctx context.Context, id uuid.UUID) *Challenge {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPredictions queries the predictions edge of a Challenge.
func (c *ChallengeClient) QueryPredictions(ch *Challenge) *PredictionQuery {
	query := &PredictionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(challenge.Table, challenge.FieldID, id),
			sqlgraph.To(prediction.Table, prediction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, challenge.PredictionsTable, challenge.PredictionsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProofs queries the proofs edge of a Challenge.
func (c *ChallengeClient) QueryProofs(ch *Challenge) *ProofQuery {
	query := &ProofQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(challenge.Table, challenge.FieldID, id),
			sqlgraph.To(proof.Table, proof.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, challenge.ProofsTable, challenge.ProofsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuthor queries the author edge of a Challenge.
func (c *ChallengeClient) QueryAuthor(ch *Challenge) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(challenge.Table, challenge.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, challenge.AuthorTable, challenge.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChallengeClient) Hooks() []Hook {
	return c.hooks.Challenge
}

// PredictionClient is a client for the Prediction schema.
type PredictionClient struct {
	config
}

// NewPredictionClient returns a client for the Prediction from the given config.
func NewPredictionClient(c config) *PredictionClient {
	return &PredictionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prediction.Hooks(f(g(h())))`.
func (c *PredictionClient) Use(hooks ...Hook) {
	c.hooks.Prediction = append(c.hooks.Prediction, hooks...)
}

// Create returns a create builder for Prediction.
func (c *PredictionClient) Create() *PredictionCreate {
	mutation := newPredictionMutation(c.config, OpCreate)
	return &PredictionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Prediction entities.
func (c *PredictionClient) CreateBulk(builders ...*PredictionCreate) *PredictionCreateBulk {
	return &PredictionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Prediction.
func (c *PredictionClient) Update() *PredictionUpdate {
	mutation := newPredictionMutation(c.config, OpUpdate)
	return &PredictionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PredictionClient) UpdateOne(pr *Prediction) *PredictionUpdateOne {
	mutation := newPredictionMutation(c.config, OpUpdateOne, withPrediction(pr))
	return &PredictionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PredictionClient) UpdateOneID(id uuid.UUID) *PredictionUpdateOne {
	mutation := newPredictionMutation(c.config, OpUpdateOne, withPredictionID(id))
	return &PredictionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Prediction.
func (c *PredictionClient) Delete() *PredictionDelete {
	mutation := newPredictionMutation(c.config, OpDelete)
	return &PredictionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PredictionClient) DeleteOne(pr *Prediction) *PredictionDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PredictionClient) DeleteOneID(id uuid.UUID) *PredictionDeleteOne {
	builder := c.Delete().Where(prediction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PredictionDeleteOne{builder}
}

// Query returns a query builder for Prediction.
func (c *PredictionClient) Query() *PredictionQuery {
	return &PredictionQuery{
		config: c.config,
	}
}

// Get returns a Prediction entity by its id.
func (c *PredictionClient) Get(ctx context.Context, id uuid.UUID) (*Prediction, error) {
	return c.Query().Where(prediction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PredictionClient) GetX(ctx context.Context, id uuid.UUID) *Prediction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChallenge queries the challenge edge of a Prediction.
func (c *PredictionClient) QueryChallenge(pr *Prediction) *ChallengeQuery {
	query := &ChallengeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prediction.Table, prediction.FieldID, id),
			sqlgraph.To(challenge.Table, challenge.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prediction.ChallengeTable, prediction.ChallengeColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Prediction.
func (c *PredictionClient) QueryUser(pr *Prediction) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prediction.Table, prediction.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prediction.UserTable, prediction.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PredictionClient) Hooks() []Hook {
	return c.hooks.Prediction
}

// ProofClient is a client for the Proof schema.
type ProofClient struct {
	config
}

// NewProofClient returns a client for the Proof from the given config.
func NewProofClient(c config) *ProofClient {
	return &ProofClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `proof.Hooks(f(g(h())))`.
func (c *ProofClient) Use(hooks ...Hook) {
	c.hooks.Proof = append(c.hooks.Proof, hooks...)
}

// Create returns a create builder for Proof.
func (c *ProofClient) Create() *ProofCreate {
	mutation := newProofMutation(c.config, OpCreate)
	return &ProofCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Proof entities.
func (c *ProofClient) CreateBulk(builders ...*ProofCreate) *ProofCreateBulk {
	return &ProofCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Proof.
func (c *ProofClient) Update() *ProofUpdate {
	mutation := newProofMutation(c.config, OpUpdate)
	return &ProofUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProofClient) UpdateOne(pr *Proof) *ProofUpdateOne {
	mutation := newProofMutation(c.config, OpUpdateOne, withProof(pr))
	return &ProofUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProofClient) UpdateOneID(id uuid.UUID) *ProofUpdateOne {
	mutation := newProofMutation(c.config, OpUpdateOne, withProofID(id))
	return &ProofUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Proof.
func (c *ProofClient) Delete() *ProofDelete {
	mutation := newProofMutation(c.config, OpDelete)
	return &ProofDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProofClient) DeleteOne(pr *Proof) *ProofDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProofClient) DeleteOneID(id uuid.UUID) *ProofDeleteOne {
	builder := c.Delete().Where(proof.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProofDeleteOne{builder}
}

// Query returns a query builder for Proof.
func (c *ProofClient) Query() *ProofQuery {
	return &ProofQuery{
		config: c.config,
	}
}

// Get returns a Proof entity by its id.
func (c *ProofClient) Get(ctx context.Context, id uuid.UUID) (*Proof, error) {
	return c.Query().Where(proof.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProofClient) GetX(ctx context.Context, id uuid.UUID) *Proof {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChallenge queries the challenge edge of a Proof.
func (c *ProofClient) QueryChallenge(pr *Proof) *ChallengeQuery {
	query := &ChallengeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proof.Table, proof.FieldID, id),
			sqlgraph.To(challenge.Table, challenge.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, proof.ChallengeTable, proof.ChallengeColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProofClient) Hooks() []Hook {
	return c.hooks.Proof
}

// TestClient is a client for the Test schema.
type TestClient struct {
	config
}

// NewTestClient returns a client for the Test from the given config.
func NewTestClient(c config) *TestClient {
	return &TestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `test.Hooks(f(g(h())))`.
func (c *TestClient) Use(hooks ...Hook) {
	c.hooks.Test = append(c.hooks.Test, hooks...)
}

// Create returns a create builder for Test.
func (c *TestClient) Create() *TestCreate {
	mutation := newTestMutation(c.config, OpCreate)
	return &TestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Test entities.
func (c *TestClient) CreateBulk(builders ...*TestCreate) *TestCreateBulk {
	return &TestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Test.
func (c *TestClient) Update() *TestUpdate {
	mutation := newTestMutation(c.config, OpUpdate)
	return &TestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestClient) UpdateOne(t *Test) *TestUpdateOne {
	mutation := newTestMutation(c.config, OpUpdateOne, withTest(t))
	return &TestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestClient) UpdateOneID(id uuid.UUID) *TestUpdateOne {
	mutation := newTestMutation(c.config, OpUpdateOne, withTestID(id))
	return &TestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Test.
func (c *TestClient) Delete() *TestDelete {
	mutation := newTestMutation(c.config, OpDelete)
	return &TestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TestClient) DeleteOne(t *Test) *TestDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TestClient) DeleteOneID(id uuid.UUID) *TestDeleteOne {
	builder := c.Delete().Where(test.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestDeleteOne{builder}
}

// Query returns a query builder for Test.
func (c *TestClient) Query() *TestQuery {
	return &TestQuery{
		config: c.config,
	}
}

// Get returns a Test entity by its id.
func (c *TestClient) Get(ctx context.Context, id uuid.UUID) (*Test, error) {
	return c.Query().Where(test.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestClient) GetX(ctx context.Context, id uuid.UUID) *Test {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTranslations queries the translations edge of a Test.
func (c *TestClient) QueryTranslations(t *Test) *TestTranslationQuery {
	query := &TestTranslationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(test.Table, test.FieldID, id),
			sqlgraph.To(testtranslation.Table, testtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, test.TranslationsTable, test.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuthor queries the author edge of a Test.
func (c *TestClient) QueryAuthor(t *Test) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(test.Table, test.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, test.AuthorTable, test.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TestClient) Hooks() []Hook {
	return c.hooks.Test
}

// TestTranslationClient is a client for the TestTranslation schema.
type TestTranslationClient struct {
	config
}

// NewTestTranslationClient returns a client for the TestTranslation from the given config.
func NewTestTranslationClient(c config) *TestTranslationClient {
	return &TestTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `testtranslation.Hooks(f(g(h())))`.
func (c *TestTranslationClient) Use(hooks ...Hook) {
	c.hooks.TestTranslation = append(c.hooks.TestTranslation, hooks...)
}

// Create returns a create builder for TestTranslation.
func (c *TestTranslationClient) Create() *TestTranslationCreate {
	mutation := newTestTranslationMutation(c.config, OpCreate)
	return &TestTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TestTranslation entities.
func (c *TestTranslationClient) CreateBulk(builders ...*TestTranslationCreate) *TestTranslationCreateBulk {
	return &TestTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TestTranslation.
func (c *TestTranslationClient) Update() *TestTranslationUpdate {
	mutation := newTestTranslationMutation(c.config, OpUpdate)
	return &TestTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestTranslationClient) UpdateOne(tt *TestTranslation) *TestTranslationUpdateOne {
	mutation := newTestTranslationMutation(c.config, OpUpdateOne, withTestTranslation(tt))
	return &TestTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestTranslationClient) UpdateOneID(id uuid.UUID) *TestTranslationUpdateOne {
	mutation := newTestTranslationMutation(c.config, OpUpdateOne, withTestTranslationID(id))
	return &TestTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TestTranslation.
func (c *TestTranslationClient) Delete() *TestTranslationDelete {
	mutation := newTestTranslationMutation(c.config, OpDelete)
	return &TestTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TestTranslationClient) DeleteOne(tt *TestTranslation) *TestTranslationDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TestTranslationClient) DeleteOneID(id uuid.UUID) *TestTranslationDeleteOne {
	builder := c.Delete().Where(testtranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestTranslationDeleteOne{builder}
}

// Query returns a query builder for TestTranslation.
func (c *TestTranslationClient) Query() *TestTranslationQuery {
	return &TestTranslationQuery{
		config: c.config,
	}
}

// Get returns a TestTranslation entity by its id.
func (c *TestTranslationClient) Get(ctx context.Context, id uuid.UUID) (*TestTranslation, error) {
	return c.Query().Where(testtranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestTranslationClient) GetX(ctx context.Context, id uuid.UUID) *TestTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTest queries the test edge of a TestTranslation.
func (c *TestTranslationClient) QueryTest(tt *TestTranslation) *TestQuery {
	query := &TestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(testtranslation.Table, testtranslation.FieldID, id),
			sqlgraph.To(test.Table, test.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, testtranslation.TestTable, testtranslation.TestColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TestTranslationClient) Hooks() []Hook {
	return c.hooks.TestTranslation
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPredictions queries the predictions edge of a User.
func (c *UserClient) QueryPredictions(u *User) *PredictionQuery {
	query := &PredictionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(prediction.Table, prediction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PredictionsTable, user.PredictionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a User.
func (c *UserClient) QuerySessions(u *User) *UserSessionQuery {
	query := &UserSessionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usersession.Table, usersession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SessionsTable, user.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBadges queries the badges edge of a User.
func (c *UserClient) QueryBadges(u *User) *BadgeQuery {
	query := &BadgeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(badge.Table, badge.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.BadgesTable, user.BadgesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChallenges queries the challenges edge of a User.
func (c *UserClient) QueryChallenges(u *User) *ChallengeQuery {
	query := &ChallengeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(challenge.Table, challenge.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ChallengesTable, user.ChallengesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTests queries the tests edge of a User.
func (c *UserClient) QueryTests(u *User) *TestQuery {
	query := &TestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(test.Table, test.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TestsTable, user.TestsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserSessionClient is a client for the UserSession schema.
type UserSessionClient struct {
	config
}

// NewUserSessionClient returns a client for the UserSession from the given config.
func NewUserSessionClient(c config) *UserSessionClient {
	return &UserSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usersession.Hooks(f(g(h())))`.
func (c *UserSessionClient) Use(hooks ...Hook) {
	c.hooks.UserSession = append(c.hooks.UserSession, hooks...)
}

// Create returns a create builder for UserSession.
func (c *UserSessionClient) Create() *UserSessionCreate {
	mutation := newUserSessionMutation(c.config, OpCreate)
	return &UserSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserSession entities.
func (c *UserSessionClient) CreateBulk(builders ...*UserSessionCreate) *UserSessionCreateBulk {
	return &UserSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserSession.
func (c *UserSessionClient) Update() *UserSessionUpdate {
	mutation := newUserSessionMutation(c.config, OpUpdate)
	return &UserSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserSessionClient) UpdateOne(us *UserSession) *UserSessionUpdateOne {
	mutation := newUserSessionMutation(c.config, OpUpdateOne, withUserSession(us))
	return &UserSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserSessionClient) UpdateOneID(id int) *UserSessionUpdateOne {
	mutation := newUserSessionMutation(c.config, OpUpdateOne, withUserSessionID(id))
	return &UserSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserSession.
func (c *UserSessionClient) Delete() *UserSessionDelete {
	mutation := newUserSessionMutation(c.config, OpDelete)
	return &UserSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserSessionClient) DeleteOne(us *UserSession) *UserSessionDeleteOne {
	return c.DeleteOneID(us.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserSessionClient) DeleteOneID(id int) *UserSessionDeleteOne {
	builder := c.Delete().Where(usersession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserSessionDeleteOne{builder}
}

// Query returns a query builder for UserSession.
func (c *UserSessionClient) Query() *UserSessionQuery {
	return &UserSessionQuery{
		config: c.config,
	}
}

// Get returns a UserSession entity by its id.
func (c *UserSessionClient) Get(ctx context.Context, id int) (*UserSession, error) {
	return c.Query().Where(usersession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserSessionClient) GetX(ctx context.Context, id int) *UserSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserSession.
func (c *UserSessionClient) QueryUser(us *UserSession) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usersession.Table, usersession.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usersession.UserTable, usersession.UserColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserSessionClient) Hooks() []Hook {
	return c.hooks.UserSession
}
