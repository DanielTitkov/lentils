// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/tag"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/tagtranslation"
	"github.com/google/uuid"
)

// TagTranslation is the model entity for the TagTranslation schema.
type TagTranslation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Locale holds the value of the "locale" field.
	Locale tagtranslation.Locale `json:"locale,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TagTranslationQuery when eager-loading is set.
	Edges            TagTranslationEdges `json:"edges"`
	tag_translations *uuid.UUID
}

// TagTranslationEdges holds the relations/edges for other nodes in the graph.
type TagTranslationEdges struct {
	// Tag holds the value of the tag edge.
	Tag *Tag `json:"tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TagTranslationEdges) TagOrErr() (*Tag, error) {
	if e.loadedTypes[0] {
		if e.Tag == nil {
			// The edge tag was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tag.Label}
		}
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TagTranslation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tagtranslation.FieldLocale, tagtranslation.FieldContent:
			values[i] = new(sql.NullString)
		case tagtranslation.FieldID:
			values[i] = new(uuid.UUID)
		case tagtranslation.ForeignKeys[0]: // tag_translations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type TagTranslation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TagTranslation fields.
func (tt *TagTranslation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tagtranslation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tt.ID = *value
			}
		case tagtranslation.FieldLocale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locale", values[i])
			} else if value.Valid {
				tt.Locale = tagtranslation.Locale(value.String)
			}
		case tagtranslation.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				tt.Content = value.String
			}
		case tagtranslation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field tag_translations", values[i])
			} else if value.Valid {
				tt.tag_translations = new(uuid.UUID)
				*tt.tag_translations = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryTag queries the "tag" edge of the TagTranslation entity.
func (tt *TagTranslation) QueryTag() *TagQuery {
	return (&TagTranslationClient{config: tt.config}).QueryTag(tt)
}

// Update returns a builder for updating this TagTranslation.
// Note that you need to call TagTranslation.Unwrap() before calling this method if this TagTranslation
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TagTranslation) Update() *TagTranslationUpdateOne {
	return (&TagTranslationClient{config: tt.config}).UpdateOne(tt)
}

// Unwrap unwraps the TagTranslation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TagTranslation) Unwrap() *TagTranslation {
	_tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TagTranslation is not a transactional entity")
	}
	tt.config.driver = _tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TagTranslation) String() string {
	var builder strings.Builder
	builder.WriteString("TagTranslation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tt.ID))
	builder.WriteString("locale=")
	builder.WriteString(fmt.Sprintf("%v", tt.Locale))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(tt.Content)
	builder.WriteByte(')')
	return builder.String()
}

// TagTranslations is a parsable slice of TagTranslation.
type TagTranslations []*TagTranslation

func (tt TagTranslations) config(cfg config) {
	for _i := range tt {
		tt[_i].config = cfg
	}
}
