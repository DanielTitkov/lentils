// Code generated by entc, DO NOT EDIT.

package test

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the test type in the database.
	Label = "test"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPublished holds the string denoting the published field in the database.
	FieldPublished = "published"
	// EdgeTranslations holds the string denoting the translations edge name in mutations.
	EdgeTranslations = "translations"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// Table holds the table name of the test in the database.
	Table = "tests"
	// TranslationsTable is the table that holds the translations relation/edge.
	TranslationsTable = "test_translations"
	// TranslationsInverseTable is the table name for the TestTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "testtranslation" package.
	TranslationsInverseTable = "test_translations"
	// TranslationsColumn is the table column denoting the translations relation/edge.
	TranslationsColumn = "test_translations"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "tests"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "user_tests"
)

// Columns holds all SQL columns for test fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldCode,
	FieldContent,
	FieldDescription,
	FieldPublished,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_tests",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultPublished holds the default value on creation for the "published" field.
	DefaultPublished bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
