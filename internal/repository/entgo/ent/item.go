// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/item"
	"github.com/google/uuid"
)

// Item is the model entity for the Item schema.
type Item struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Steps holds the value of the "steps" field.
	Steps int `json:"steps,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ItemQuery when eager-loading is set.
	Edges ItemEdges `json:"edges"`
}

// ItemEdges holds the relations/edges for other nodes in the graph.
type ItemEdges struct {
	// Responses holds the value of the responses edge.
	Responses []*Response `json:"responses,omitempty"`
	// Translations holds the value of the translations edge.
	Translations []*ItemTranslation `json:"translations,omitempty"`
	// Scale holds the value of the scale edge.
	Scale []*Scale `json:"scale,omitempty"`
	// Question holds the value of the question edge.
	Question []*Question `json:"question,omitempty"`
	// ScaleItem holds the value of the scale_item edge.
	ScaleItem []*ScaleItem `json:"scale_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ResponsesOrErr returns the Responses value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) ResponsesOrErr() ([]*Response, error) {
	if e.loadedTypes[0] {
		return e.Responses, nil
	}
	return nil, &NotLoadedError{edge: "responses"}
}

// TranslationsOrErr returns the Translations value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) TranslationsOrErr() ([]*ItemTranslation, error) {
	if e.loadedTypes[1] {
		return e.Translations, nil
	}
	return nil, &NotLoadedError{edge: "translations"}
}

// ScaleOrErr returns the Scale value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) ScaleOrErr() ([]*Scale, error) {
	if e.loadedTypes[2] {
		return e.Scale, nil
	}
	return nil, &NotLoadedError{edge: "scale"}
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) QuestionOrErr() ([]*Question, error) {
	if e.loadedTypes[3] {
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// ScaleItemOrErr returns the ScaleItem value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) ScaleItemOrErr() ([]*ScaleItem, error) {
	if e.loadedTypes[4] {
		return e.ScaleItem, nil
	}
	return nil, &NotLoadedError{edge: "scale_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Item) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case item.FieldSteps:
			values[i] = new(sql.NullInt64)
		case item.FieldCode:
			values[i] = new(sql.NullString)
		case item.FieldCreateTime, item.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case item.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Item", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Item fields.
func (i *Item) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case item.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case item.FieldCreateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[j])
			} else if value.Valid {
				i.CreateTime = value.Time
			}
		case item.FieldUpdateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[j])
			} else if value.Valid {
				i.UpdateTime = value.Time
			}
		case item.FieldCode:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[j])
			} else if value.Valid {
				i.Code = value.String
			}
		case item.FieldSteps:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field steps", values[j])
			} else if value.Valid {
				i.Steps = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryResponses queries the "responses" edge of the Item entity.
func (i *Item) QueryResponses() *ResponseQuery {
	return (&ItemClient{config: i.config}).QueryResponses(i)
}

// QueryTranslations queries the "translations" edge of the Item entity.
func (i *Item) QueryTranslations() *ItemTranslationQuery {
	return (&ItemClient{config: i.config}).QueryTranslations(i)
}

// QueryScale queries the "scale" edge of the Item entity.
func (i *Item) QueryScale() *ScaleQuery {
	return (&ItemClient{config: i.config}).QueryScale(i)
}

// QueryQuestion queries the "question" edge of the Item entity.
func (i *Item) QueryQuestion() *QuestionQuery {
	return (&ItemClient{config: i.config}).QueryQuestion(i)
}

// QueryScaleItem queries the "scale_item" edge of the Item entity.
func (i *Item) QueryScaleItem() *ScaleItemQuery {
	return (&ItemClient{config: i.config}).QueryScaleItem(i)
}

// Update returns a builder for updating this Item.
// Note that you need to call Item.Unwrap() before calling this method if this Item
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Item) Update() *ItemUpdateOne {
	return (&ItemClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Item entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Item) Unwrap() *Item {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Item is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Item) String() string {
	var builder strings.Builder
	builder.WriteString("Item(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("create_time=")
	builder.WriteString(i.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(i.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(i.Code)
	builder.WriteString(", ")
	builder.WriteString("steps=")
	builder.WriteString(fmt.Sprintf("%v", i.Steps))
	builder.WriteByte(')')
	return builder.String()
}

// Items is a parsable slice of Item.
type Items []*Item

func (i Items) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
