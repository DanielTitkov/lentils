// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/item"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/scale"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/scaleitem"
	"github.com/google/uuid"
)

// ScaleItemQuery is the builder for querying ScaleItem entities.
type ScaleItemQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ScaleItem
	// eager-loading edges.
	withItem  *ItemQuery
	withScale *ScaleQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ScaleItemQuery builder.
func (siq *ScaleItemQuery) Where(ps ...predicate.ScaleItem) *ScaleItemQuery {
	siq.predicates = append(siq.predicates, ps...)
	return siq
}

// Limit adds a limit step to the query.
func (siq *ScaleItemQuery) Limit(limit int) *ScaleItemQuery {
	siq.limit = &limit
	return siq
}

// Offset adds an offset step to the query.
func (siq *ScaleItemQuery) Offset(offset int) *ScaleItemQuery {
	siq.offset = &offset
	return siq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (siq *ScaleItemQuery) Unique(unique bool) *ScaleItemQuery {
	siq.unique = &unique
	return siq
}

// Order adds an order step to the query.
func (siq *ScaleItemQuery) Order(o ...OrderFunc) *ScaleItemQuery {
	siq.order = append(siq.order, o...)
	return siq
}

// QueryItem chains the current query on the "item" edge.
func (siq *ScaleItemQuery) QueryItem() *ItemQuery {
	query := &ItemQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scaleitem.Table, scaleitem.ItemColumn, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, scaleitem.ItemTable, scaleitem.ItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScale chains the current query on the "scale" edge.
func (siq *ScaleItemQuery) QueryScale() *ScaleQuery {
	query := &ScaleQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scaleitem.Table, scaleitem.ScaleColumn, selector),
			sqlgraph.To(scale.Table, scale.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, scaleitem.ScaleTable, scaleitem.ScaleColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ScaleItem entity from the query.
// Returns a *NotFoundError when no ScaleItem was found.
func (siq *ScaleItemQuery) First(ctx context.Context) (*ScaleItem, error) {
	nodes, err := siq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{scaleitem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (siq *ScaleItemQuery) FirstX(ctx context.Context) *ScaleItem {
	node, err := siq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single ScaleItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ScaleItem entity is found.
// Returns a *NotFoundError when no ScaleItem entities are found.
func (siq *ScaleItemQuery) Only(ctx context.Context) (*ScaleItem, error) {
	nodes, err := siq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{scaleitem.Label}
	default:
		return nil, &NotSingularError{scaleitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (siq *ScaleItemQuery) OnlyX(ctx context.Context) *ScaleItem {
	node, err := siq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of ScaleItems.
func (siq *ScaleItemQuery) All(ctx context.Context) ([]*ScaleItem, error) {
	if err := siq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return siq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (siq *ScaleItemQuery) AllX(ctx context.Context) []*ScaleItem {
	nodes, err := siq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (siq *ScaleItemQuery) Count(ctx context.Context) (int, error) {
	if err := siq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return siq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (siq *ScaleItemQuery) CountX(ctx context.Context) int {
	count, err := siq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (siq *ScaleItemQuery) Exist(ctx context.Context) (bool, error) {
	if err := siq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return siq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (siq *ScaleItemQuery) ExistX(ctx context.Context) bool {
	exist, err := siq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ScaleItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (siq *ScaleItemQuery) Clone() *ScaleItemQuery {
	if siq == nil {
		return nil
	}
	return &ScaleItemQuery{
		config:     siq.config,
		limit:      siq.limit,
		offset:     siq.offset,
		order:      append([]OrderFunc{}, siq.order...),
		predicates: append([]predicate.ScaleItem{}, siq.predicates...),
		withItem:   siq.withItem.Clone(),
		withScale:  siq.withScale.Clone(),
		// clone intermediate query.
		sql:    siq.sql.Clone(),
		path:   siq.path,
		unique: siq.unique,
	}
}

// WithItem tells the query-builder to eager-load the nodes that are connected to
// the "item" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *ScaleItemQuery) WithItem(opts ...func(*ItemQuery)) *ScaleItemQuery {
	query := &ItemQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withItem = query
	return siq
}

// WithScale tells the query-builder to eager-load the nodes that are connected to
// the "scale" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *ScaleItemQuery) WithScale(opts ...func(*ScaleQuery)) *ScaleItemQuery {
	query := &ScaleQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withScale = query
	return siq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Reverse bool `json:"reverse,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ScaleItem.Query().
//		GroupBy(scaleitem.FieldReverse).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (siq *ScaleItemQuery) GroupBy(field string, fields ...string) *ScaleItemGroupBy {
	grbuild := &ScaleItemGroupBy{config: siq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return siq.sqlQuery(ctx), nil
	}
	grbuild.label = scaleitem.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Reverse bool `json:"reverse,omitempty"`
//	}
//
//	client.ScaleItem.Query().
//		Select(scaleitem.FieldReverse).
//		Scan(ctx, &v)
//
func (siq *ScaleItemQuery) Select(fields ...string) *ScaleItemSelect {
	siq.fields = append(siq.fields, fields...)
	selbuild := &ScaleItemSelect{ScaleItemQuery: siq}
	selbuild.label = scaleitem.Label
	selbuild.flds, selbuild.scan = &siq.fields, selbuild.Scan
	return selbuild
}

func (siq *ScaleItemQuery) prepareQuery(ctx context.Context) error {
	for _, f := range siq.fields {
		if !scaleitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if siq.path != nil {
		prev, err := siq.path(ctx)
		if err != nil {
			return err
		}
		siq.sql = prev
	}
	return nil
}

func (siq *ScaleItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ScaleItem, error) {
	var (
		nodes       = []*ScaleItem{}
		_spec       = siq.querySpec()
		loadedTypes = [2]bool{
			siq.withItem != nil,
			siq.withScale != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*ScaleItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &ScaleItem{config: siq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, siq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := siq.withItem; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*ScaleItem)
		for i := range nodes {
			fk := nodes[i].ItemID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(item.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Item = n
			}
		}
	}

	if query := siq.withScale; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*ScaleItem)
		for i := range nodes {
			fk := nodes[i].ScaleID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(scale.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "scale_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Scale = n
			}
		}
	}

	return nodes, nil
}

func (siq *ScaleItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := siq.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, siq.driver, _spec)
}

func (siq *ScaleItemQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := siq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (siq *ScaleItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scaleitem.Table,
			Columns: scaleitem.Columns,
		},
		From:   siq.sql,
		Unique: true,
	}
	if unique := siq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := siq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
	}
	if ps := siq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := siq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := siq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := siq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (siq *ScaleItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(siq.driver.Dialect())
	t1 := builder.Table(scaleitem.Table)
	columns := siq.fields
	if len(columns) == 0 {
		columns = scaleitem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if siq.sql != nil {
		selector = siq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if siq.unique != nil && *siq.unique {
		selector.Distinct()
	}
	for _, p := range siq.predicates {
		p(selector)
	}
	for _, p := range siq.order {
		p(selector)
	}
	if offset := siq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := siq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ScaleItemGroupBy is the group-by builder for ScaleItem entities.
type ScaleItemGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sigb *ScaleItemGroupBy) Aggregate(fns ...AggregateFunc) *ScaleItemGroupBy {
	sigb.fns = append(sigb.fns, fns...)
	return sigb
}

// Scan applies the group-by query and scans the result into the given value.
func (sigb *ScaleItemGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sigb.path(ctx)
	if err != nil {
		return err
	}
	sigb.sql = query
	return sigb.sqlScan(ctx, v)
}

func (sigb *ScaleItemGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sigb.fields {
		if !scaleitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sigb *ScaleItemGroupBy) sqlQuery() *sql.Selector {
	selector := sigb.sql.Select()
	aggregation := make([]string, 0, len(sigb.fns))
	for _, fn := range sigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(sigb.fields)+len(sigb.fns))
		for _, f := range sigb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(sigb.fields...)...)
}

// ScaleItemSelect is the builder for selecting fields of ScaleItem entities.
type ScaleItemSelect struct {
	*ScaleItemQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sis *ScaleItemSelect) Scan(ctx context.Context, v interface{}) error {
	if err := sis.prepareQuery(ctx); err != nil {
		return err
	}
	sis.sql = sis.ScaleItemQuery.sqlQuery(ctx)
	return sis.sqlScan(ctx, v)
}

func (sis *ScaleItemSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sis.sql.Query()
	if err := sis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
