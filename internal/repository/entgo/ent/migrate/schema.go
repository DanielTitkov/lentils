// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BadgesColumns holds the columns for the "badges" table.
	BadgesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "type", Type: field.TypeString, Unique: true},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "meta", Type: field.TypeJSON, Nullable: true},
	}
	// BadgesTable holds the schema information for the "badges" table.
	BadgesTable = &schema.Table{
		Name:       "badges",
		Columns:    BadgesColumns,
		PrimaryKey: []*schema.Column{BadgesColumns[0]},
	}
	// ChallengesColumns holds the columns for the "challenges" table.
	ChallengesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "content", Type: field.TypeString, Unique: true, Size: 140},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 280},
		{Name: "outcome", Type: field.TypeBool, Nullable: true},
		{Name: "published", Type: field.TypeBool, Default: true},
		{Name: "start_time", Type: field.TypeTime},
		{Name: "end_time", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"bool"}, Default: "bool"},
		{Name: "user_challenges", Type: field.TypeUUID, Nullable: true},
	}
	// ChallengesTable holds the schema information for the "challenges" table.
	ChallengesTable = &schema.Table{
		Name:       "challenges",
		Columns:    ChallengesColumns,
		PrimaryKey: []*schema.Column{ChallengesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "challenges_users_challenges",
				Columns:    []*schema.Column{ChallengesColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PredictionsColumns holds the columns for the "predictions" table.
	PredictionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "prognosis", Type: field.TypeBool},
		{Name: "meta", Type: field.TypeJSON, Nullable: true},
		{Name: "challenge_predictions", Type: field.TypeUUID},
		{Name: "user_predictions", Type: field.TypeUUID},
	}
	// PredictionsTable holds the schema information for the "predictions" table.
	PredictionsTable = &schema.Table{
		Name:       "predictions",
		Columns:    PredictionsColumns,
		PrimaryKey: []*schema.Column{PredictionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "predictions_challenges_predictions",
				Columns:    []*schema.Column{PredictionsColumns[5]},
				RefColumns: []*schema.Column{ChallengesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "predictions_users_predictions",
				Columns:    []*schema.Column{PredictionsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "prediction_challenge_predictions_user_predictions",
				Unique:  true,
				Columns: []*schema.Column{PredictionsColumns[5], PredictionsColumns[6]},
			},
		},
	}
	// ProofsColumns holds the columns for the "proofs" table.
	ProofsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "content", Type: field.TypeString, Size: 280},
		{Name: "link", Type: field.TypeString},
		{Name: "meta", Type: field.TypeJSON, Nullable: true},
		{Name: "challenge_proofs", Type: field.TypeUUID},
	}
	// ProofsTable holds the schema information for the "proofs" table.
	ProofsTable = &schema.Table{
		Name:       "proofs",
		Columns:    ProofsColumns,
		PrimaryKey: []*schema.Column{ProofsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "proofs_challenges_proofs",
				Columns:    []*schema.Column{ProofsColumns[6]},
				RefColumns: []*schema.Column{ChallengesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TestsColumns holds the columns for the "tests" table.
	TestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "code", Type: field.TypeString, Unique: true, Size: 100},
		{Name: "content", Type: field.TypeString, Unique: true, Size: 140},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 280},
		{Name: "published", Type: field.TypeBool, Default: true},
		{Name: "user_tests", Type: field.TypeUUID, Nullable: true},
	}
	// TestsTable holds the schema information for the "tests" table.
	TestsTable = &schema.Table{
		Name:       "tests",
		Columns:    TestsColumns,
		PrimaryKey: []*schema.Column{TestsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tests_users_tests",
				Columns:    []*schema.Column{TestsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TestTranslationsColumns holds the columns for the "test_translations" table.
	TestTranslationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString, Size: 140},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "instruction", Type: field.TypeString, Nullable: true},
		{Name: "locale", Type: field.TypeEnum, Enums: []string{"en", "ru"}},
		{Name: "test_translations", Type: field.TypeUUID, Nullable: true},
	}
	// TestTranslationsTable holds the schema information for the "test_translations" table.
	TestTranslationsTable = &schema.Table{
		Name:       "test_translations",
		Columns:    TestTranslationsColumns,
		PrimaryKey: []*schema.Column{TestTranslationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "test_translations_tests_translations",
				Columns:    []*schema.Column{TestTranslationsColumns[7]},
				RefColumns: []*schema.Column{TestsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "testtranslation_locale_test_translations",
				Unique:  true,
				Columns: []*schema.Column{TestTranslationsColumns[6], TestTranslationsColumns[7]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "picture", Type: field.TypeString, Nullable: true, Default: "https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y"},
		{Name: "admin", Type: field.TypeBool, Default: false},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "locale", Type: field.TypeEnum, Enums: []string{"en", "ru"}, Default: "ru"},
		{Name: "meta", Type: field.TypeJSON, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserSessionsColumns holds the columns for the "user_sessions" table.
	UserSessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "sid", Type: field.TypeString, Unique: true},
		{Name: "ip", Type: field.TypeString},
		{Name: "user_agent", Type: field.TypeString},
		{Name: "last_activity", Type: field.TypeTime},
		{Name: "active", Type: field.TypeBool, Default: false},
		{Name: "meta", Type: field.TypeJSON, Nullable: true},
		{Name: "user_sessions", Type: field.TypeUUID},
	}
	// UserSessionsTable holds the schema information for the "user_sessions" table.
	UserSessionsTable = &schema.Table{
		Name:       "user_sessions",
		Columns:    UserSessionsColumns,
		PrimaryKey: []*schema.Column{UserSessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_sessions_users_sessions",
				Columns:    []*schema.Column{UserSessionsColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "usersession_active",
				Unique:  false,
				Columns: []*schema.Column{UserSessionsColumns[7]},
			},
		},
	}
	// UserBadgesColumns holds the columns for the "user_badges" table.
	UserBadgesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "badge_id", Type: field.TypeInt},
	}
	// UserBadgesTable holds the schema information for the "user_badges" table.
	UserBadgesTable = &schema.Table{
		Name:       "user_badges",
		Columns:    UserBadgesColumns,
		PrimaryKey: []*schema.Column{UserBadgesColumns[0], UserBadgesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_badges_user_id",
				Columns:    []*schema.Column{UserBadgesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_badges_badge_id",
				Columns:    []*schema.Column{UserBadgesColumns[1]},
				RefColumns: []*schema.Column{BadgesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BadgesTable,
		ChallengesTable,
		PredictionsTable,
		ProofsTable,
		TestsTable,
		TestTranslationsTable,
		UsersTable,
		UserSessionsTable,
		UserBadgesTable,
	}
)

func init() {
	ChallengesTable.ForeignKeys[0].RefTable = UsersTable
	PredictionsTable.ForeignKeys[0].RefTable = ChallengesTable
	PredictionsTable.ForeignKeys[1].RefTable = UsersTable
	ProofsTable.ForeignKeys[0].RefTable = ChallengesTable
	TestsTable.ForeignKeys[0].RefTable = UsersTable
	TestTranslationsTable.ForeignKeys[0].RefTable = TestsTable
	UserSessionsTable.ForeignKeys[0].RefTable = UsersTable
	UserBadgesTable.ForeignKeys[0].RefTable = UsersTable
	UserBadgesTable.ForeignKeys[1].RefTable = BadgesTable
}
