// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/interpretation"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/item"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/norm"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/result"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/scale"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/scaletranslation"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/test"
	"github.com/google/uuid"
)

// ScaleCreate is the builder for creating a Scale entity.
type ScaleCreate struct {
	config
	mutation *ScaleMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (sc *ScaleCreate) SetCreateTime(t time.Time) *ScaleCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *ScaleCreate) SetNillableCreateTime(t *time.Time) *ScaleCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *ScaleCreate) SetUpdateTime(t time.Time) *ScaleCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *ScaleCreate) SetNillableUpdateTime(t *time.Time) *ScaleCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetCode sets the "code" field.
func (sc *ScaleCreate) SetCode(s string) *ScaleCreate {
	sc.mutation.SetCode(s)
	return sc
}

// SetGlobal sets the "global" field.
func (sc *ScaleCreate) SetGlobal(b bool) *ScaleCreate {
	sc.mutation.SetGlobal(b)
	return sc
}

// SetNillableGlobal sets the "global" field if the given value is not nil.
func (sc *ScaleCreate) SetNillableGlobal(b *bool) *ScaleCreate {
	if b != nil {
		sc.SetGlobal(*b)
	}
	return sc
}

// SetType sets the "type" field.
func (sc *ScaleCreate) SetType(s scale.Type) *ScaleCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sc *ScaleCreate) SetNillableType(s *scale.Type) *ScaleCreate {
	if s != nil {
		sc.SetType(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ScaleCreate) SetID(u uuid.UUID) *ScaleCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ScaleCreate) SetNillableID(u *uuid.UUID) *ScaleCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (sc *ScaleCreate) AddItemIDs(ids ...uuid.UUID) *ScaleCreate {
	sc.mutation.AddItemIDs(ids...)
	return sc
}

// AddItems adds the "items" edges to the Item entity.
func (sc *ScaleCreate) AddItems(i ...*Item) *ScaleCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sc.AddItemIDs(ids...)
}

// AddInterpretationIDs adds the "interpretations" edge to the Interpretation entity by IDs.
func (sc *ScaleCreate) AddInterpretationIDs(ids ...uuid.UUID) *ScaleCreate {
	sc.mutation.AddInterpretationIDs(ids...)
	return sc
}

// AddInterpretations adds the "interpretations" edges to the Interpretation entity.
func (sc *ScaleCreate) AddInterpretations(i ...*Interpretation) *ScaleCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sc.AddInterpretationIDs(ids...)
}

// AddTranslationIDs adds the "translations" edge to the ScaleTranslation entity by IDs.
func (sc *ScaleCreate) AddTranslationIDs(ids ...uuid.UUID) *ScaleCreate {
	sc.mutation.AddTranslationIDs(ids...)
	return sc
}

// AddTranslations adds the "translations" edges to the ScaleTranslation entity.
func (sc *ScaleCreate) AddTranslations(s ...*ScaleTranslation) *ScaleCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddTranslationIDs(ids...)
}

// AddNormIDs adds the "norms" edge to the Norm entity by IDs.
func (sc *ScaleCreate) AddNormIDs(ids ...uuid.UUID) *ScaleCreate {
	sc.mutation.AddNormIDs(ids...)
	return sc
}

// AddNorms adds the "norms" edges to the Norm entity.
func (sc *ScaleCreate) AddNorms(n ...*Norm) *ScaleCreate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return sc.AddNormIDs(ids...)
}

// AddResultIDs adds the "results" edge to the Result entity by IDs.
func (sc *ScaleCreate) AddResultIDs(ids ...uuid.UUID) *ScaleCreate {
	sc.mutation.AddResultIDs(ids...)
	return sc
}

// AddResults adds the "results" edges to the Result entity.
func (sc *ScaleCreate) AddResults(r ...*Result) *ScaleCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sc.AddResultIDs(ids...)
}

// AddTestIDs adds the "test" edge to the Test entity by IDs.
func (sc *ScaleCreate) AddTestIDs(ids ...uuid.UUID) *ScaleCreate {
	sc.mutation.AddTestIDs(ids...)
	return sc
}

// AddTest adds the "test" edges to the Test entity.
func (sc *ScaleCreate) AddTest(t ...*Test) *ScaleCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddTestIDs(ids...)
}

// Mutation returns the ScaleMutation object of the builder.
func (sc *ScaleCreate) Mutation() *ScaleMutation {
	return sc.mutation
}

// Save creates the Scale in the database.
func (sc *ScaleCreate) Save(ctx context.Context) (*Scale, error) {
	var (
		err  error
		node *Scale
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScaleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Scale)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ScaleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScaleCreate) SaveX(ctx context.Context) *Scale {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScaleCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScaleCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScaleCreate) defaults() {
	if _, ok := sc.mutation.CreateTime(); !ok {
		v := scale.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		v := scale.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
	if _, ok := sc.mutation.Global(); !ok {
		v := scale.DefaultGlobal
		sc.mutation.SetGlobal(v)
	}
	if _, ok := sc.mutation.GetType(); !ok {
		v := scale.DefaultType
		sc.mutation.SetType(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := scale.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScaleCreate) check() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Scale.create_time"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Scale.update_time"`)}
	}
	if _, ok := sc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Scale.code"`)}
	}
	if v, ok := sc.mutation.Code(); ok {
		if err := scale.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Scale.code": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Global(); !ok {
		return &ValidationError{Name: "global", err: errors.New(`ent: missing required field "Scale.global"`)}
	}
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Scale.type"`)}
	}
	if v, ok := sc.mutation.GetType(); ok {
		if err := scale.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Scale.type": %w`, err)}
		}
	}
	return nil
}

func (sc *ScaleCreate) sqlSave(ctx context.Context) (*Scale, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (sc *ScaleCreate) createSpec() (*Scale, *sqlgraph.CreateSpec) {
	var (
		_node = &Scale{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: scale.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: scale.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scale.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scale.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := sc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scale.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := sc.mutation.Global(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: scale.FieldGlobal,
		})
		_node.Global = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: scale.FieldType,
		})
		_node.Type = value
	}
	if nodes := sc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scale.ItemsTable,
			Columns: scale.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ScaleItemCreate{config: sc.config, mutation: newScaleItemMutation(sc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.InterpretationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.InterpretationsTable,
			Columns: []string{scale.InterpretationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: interpretation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.TranslationsTable,
			Columns: []string{scale.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scaletranslation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.NormsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.NormsTable,
			Columns: []string{scale.NormsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: norm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scale.ResultsTable,
			Columns: []string{scale.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: result.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scale.TestTable,
			Columns: scale.TestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScaleCreateBulk is the builder for creating many Scale entities in bulk.
type ScaleCreateBulk struct {
	config
	builders []*ScaleCreate
}

// Save creates the Scale entities in the database.
func (scb *ScaleCreateBulk) Save(ctx context.Context) ([]*Scale, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Scale, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScaleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScaleCreateBulk) SaveX(ctx context.Context) []*Scale {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScaleCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScaleCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
