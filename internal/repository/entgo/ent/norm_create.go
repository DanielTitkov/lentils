// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/norm"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/sample"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/scale"
	"github.com/google/uuid"
)

// NormCreate is the builder for creating a Norm entity.
type NormCreate struct {
	config
	mutation *NormMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (nc *NormCreate) SetCreateTime(t time.Time) *NormCreate {
	nc.mutation.SetCreateTime(t)
	return nc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (nc *NormCreate) SetNillableCreateTime(t *time.Time) *NormCreate {
	if t != nil {
		nc.SetCreateTime(*t)
	}
	return nc
}

// SetUpdateTime sets the "update_time" field.
func (nc *NormCreate) SetUpdateTime(t time.Time) *NormCreate {
	nc.mutation.SetUpdateTime(t)
	return nc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (nc *NormCreate) SetNillableUpdateTime(t *time.Time) *NormCreate {
	if t != nil {
		nc.SetUpdateTime(*t)
	}
	return nc
}

// SetName sets the "name" field.
func (nc *NormCreate) SetName(s string) *NormCreate {
	nc.mutation.SetName(s)
	return nc
}

// SetBase sets the "base" field.
func (nc *NormCreate) SetBase(i int) *NormCreate {
	nc.mutation.SetBase(i)
	return nc
}

// SetNillableBase sets the "base" field if the given value is not nil.
func (nc *NormCreate) SetNillableBase(i *int) *NormCreate {
	if i != nil {
		nc.SetBase(*i)
	}
	return nc
}

// SetMean sets the "mean" field.
func (nc *NormCreate) SetMean(f float64) *NormCreate {
	nc.mutation.SetMean(f)
	return nc
}

// SetSigma sets the "sigma" field.
func (nc *NormCreate) SetSigma(f float64) *NormCreate {
	nc.mutation.SetSigma(f)
	return nc
}

// SetMeta sets the "meta" field.
func (nc *NormCreate) SetMeta(m map[string]interface{}) *NormCreate {
	nc.mutation.SetMeta(m)
	return nc
}

// SetID sets the "id" field.
func (nc *NormCreate) SetID(u uuid.UUID) *NormCreate {
	nc.mutation.SetID(u)
	return nc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (nc *NormCreate) SetNillableID(u *uuid.UUID) *NormCreate {
	if u != nil {
		nc.SetID(*u)
	}
	return nc
}

// SetSampleID sets the "sample" edge to the Sample entity by ID.
func (nc *NormCreate) SetSampleID(id uuid.UUID) *NormCreate {
	nc.mutation.SetSampleID(id)
	return nc
}

// SetSample sets the "sample" edge to the Sample entity.
func (nc *NormCreate) SetSample(s *Sample) *NormCreate {
	return nc.SetSampleID(s.ID)
}

// SetScaleID sets the "scale" edge to the Scale entity by ID.
func (nc *NormCreate) SetScaleID(id uuid.UUID) *NormCreate {
	nc.mutation.SetScaleID(id)
	return nc
}

// SetScale sets the "scale" edge to the Scale entity.
func (nc *NormCreate) SetScale(s *Scale) *NormCreate {
	return nc.SetScaleID(s.ID)
}

// Mutation returns the NormMutation object of the builder.
func (nc *NormCreate) Mutation() *NormMutation {
	return nc.mutation
}

// Save creates the Norm in the database.
func (nc *NormCreate) Save(ctx context.Context) (*Norm, error) {
	var (
		err  error
		node *Norm
	)
	nc.defaults()
	if len(nc.hooks) == 0 {
		if err = nc.check(); err != nil {
			return nil, err
		}
		node, err = nc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NormMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nc.check(); err != nil {
				return nil, err
			}
			nc.mutation = mutation
			if node, err = nc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(nc.hooks) - 1; i >= 0; i-- {
			if nc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Norm)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NormMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NormCreate) SaveX(ctx context.Context) *Norm {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NormCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NormCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NormCreate) defaults() {
	if _, ok := nc.mutation.CreateTime(); !ok {
		v := norm.DefaultCreateTime()
		nc.mutation.SetCreateTime(v)
	}
	if _, ok := nc.mutation.UpdateTime(); !ok {
		v := norm.DefaultUpdateTime()
		nc.mutation.SetUpdateTime(v)
	}
	if _, ok := nc.mutation.Base(); !ok {
		v := norm.DefaultBase
		nc.mutation.SetBase(v)
	}
	if _, ok := nc.mutation.ID(); !ok {
		v := norm.DefaultID()
		nc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NormCreate) check() error {
	if _, ok := nc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Norm.create_time"`)}
	}
	if _, ok := nc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Norm.update_time"`)}
	}
	if _, ok := nc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Norm.name"`)}
	}
	if v, ok := nc.mutation.Name(); ok {
		if err := norm.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Norm.name": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Base(); !ok {
		return &ValidationError{Name: "base", err: errors.New(`ent: missing required field "Norm.base"`)}
	}
	if v, ok := nc.mutation.Base(); ok {
		if err := norm.BaseValidator(v); err != nil {
			return &ValidationError{Name: "base", err: fmt.Errorf(`ent: validator failed for field "Norm.base": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Mean(); !ok {
		return &ValidationError{Name: "mean", err: errors.New(`ent: missing required field "Norm.mean"`)}
	}
	if _, ok := nc.mutation.Sigma(); !ok {
		return &ValidationError{Name: "sigma", err: errors.New(`ent: missing required field "Norm.sigma"`)}
	}
	if _, ok := nc.mutation.SampleID(); !ok {
		return &ValidationError{Name: "sample", err: errors.New(`ent: missing required edge "Norm.sample"`)}
	}
	if _, ok := nc.mutation.ScaleID(); !ok {
		return &ValidationError{Name: "scale", err: errors.New(`ent: missing required edge "Norm.scale"`)}
	}
	return nil
}

func (nc *NormCreate) sqlSave(ctx context.Context) (*Norm, error) {
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (nc *NormCreate) createSpec() (*Norm, *sqlgraph.CreateSpec) {
	var (
		_node = &Norm{config: nc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: norm.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: norm.FieldID,
			},
		}
	)
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := nc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: norm.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := nc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: norm.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := nc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: norm.FieldName,
		})
		_node.Name = value
	}
	if value, ok := nc.mutation.Base(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: norm.FieldBase,
		})
		_node.Base = value
	}
	if value, ok := nc.mutation.Mean(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: norm.FieldMean,
		})
		_node.Mean = value
	}
	if value, ok := nc.mutation.Sigma(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: norm.FieldSigma,
		})
		_node.Sigma = value
	}
	if value, ok := nc.mutation.Meta(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: norm.FieldMeta,
		})
		_node.Meta = value
	}
	if nodes := nc.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   norm.SampleTable,
			Columns: []string{norm.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: sample.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sample_norms = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.ScaleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   norm.ScaleTable,
			Columns: []string{norm.ScaleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.scale_norms = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NormCreateBulk is the builder for creating many Norm entities in bulk.
type NormCreateBulk struct {
	config
	builders []*NormCreate
}

// Save creates the Norm entities in the database.
func (ncb *NormCreateBulk) Save(ctx context.Context) ([]*Norm, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Norm, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NormMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NormCreateBulk) SaveX(ctx context.Context) []*Norm {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NormCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NormCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
