// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/item"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/itemtranslation"
	"github.com/google/uuid"
)

// ItemTranslation is the model entity for the ItemTranslation schema.
type ItemTranslation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Locale holds the value of the "locale" field.
	Locale itemtranslation.Locale `json:"locale,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ItemTranslationQuery when eager-loading is set.
	Edges             ItemTranslationEdges `json:"edges"`
	item_translations *uuid.UUID
}

// ItemTranslationEdges holds the relations/edges for other nodes in the graph.
type ItemTranslationEdges struct {
	// Item holds the value of the item edge.
	Item *Item `json:"item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ItemOrErr returns the Item value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemTranslationEdges) ItemOrErr() (*Item, error) {
	if e.loadedTypes[0] {
		if e.Item == nil {
			// The edge item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: item.Label}
		}
		return e.Item, nil
	}
	return nil, &NotLoadedError{edge: "item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ItemTranslation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case itemtranslation.FieldLocale, itemtranslation.FieldContent:
			values[i] = new(sql.NullString)
		case itemtranslation.FieldID:
			values[i] = new(uuid.UUID)
		case itemtranslation.ForeignKeys[0]: // item_translations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ItemTranslation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ItemTranslation fields.
func (it *ItemTranslation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case itemtranslation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				it.ID = *value
			}
		case itemtranslation.FieldLocale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locale", values[i])
			} else if value.Valid {
				it.Locale = itemtranslation.Locale(value.String)
			}
		case itemtranslation.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				it.Content = value.String
			}
		case itemtranslation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field item_translations", values[i])
			} else if value.Valid {
				it.item_translations = new(uuid.UUID)
				*it.item_translations = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryItem queries the "item" edge of the ItemTranslation entity.
func (it *ItemTranslation) QueryItem() *ItemQuery {
	return (&ItemTranslationClient{config: it.config}).QueryItem(it)
}

// Update returns a builder for updating this ItemTranslation.
// Note that you need to call ItemTranslation.Unwrap() before calling this method if this ItemTranslation
// was returned from a transaction, and the transaction was committed or rolled back.
func (it *ItemTranslation) Update() *ItemTranslationUpdateOne {
	return (&ItemTranslationClient{config: it.config}).UpdateOne(it)
}

// Unwrap unwraps the ItemTranslation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (it *ItemTranslation) Unwrap() *ItemTranslation {
	_tx, ok := it.config.driver.(*txDriver)
	if !ok {
		panic("ent: ItemTranslation is not a transactional entity")
	}
	it.config.driver = _tx.drv
	return it
}

// String implements the fmt.Stringer.
func (it *ItemTranslation) String() string {
	var builder strings.Builder
	builder.WriteString("ItemTranslation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", it.ID))
	builder.WriteString("locale=")
	builder.WriteString(fmt.Sprintf("%v", it.Locale))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(it.Content)
	builder.WriteByte(')')
	return builder.String()
}

// ItemTranslations is a parsable slice of ItemTranslation.
type ItemTranslations []*ItemTranslation

func (it ItemTranslations) config(cfg config) {
	for _i := range it {
		it[_i].config = cfg
	}
}
