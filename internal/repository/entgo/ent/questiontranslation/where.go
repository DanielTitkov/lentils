// Code generated by entc, DO NOT EDIT.

package questiontranslation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// HeaderContent applies equality check predicate on the "header_content" field. It's identical to HeaderContentEQ.
func HeaderContent(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeaderContent), v))
	})
}

// FooterContent applies equality check predicate on the "footer_content" field. It's identical to FooterContentEQ.
func FooterContent(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFooterContent), v))
	})
}

// LocaleEQ applies the EQ predicate on the "locale" field.
func LocaleEQ(v Locale) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocale), v))
	})
}

// LocaleNEQ applies the NEQ predicate on the "locale" field.
func LocaleNEQ(v Locale) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocale), v))
	})
}

// LocaleIn applies the In predicate on the "locale" field.
func LocaleIn(vs ...Locale) predicate.QuestionTranslation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLocale), v...))
	})
}

// LocaleNotIn applies the NotIn predicate on the "locale" field.
func LocaleNotIn(vs ...Locale) predicate.QuestionTranslation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLocale), v...))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.QuestionTranslation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.QuestionTranslation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldContent)))
	})
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldContent)))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// HeaderContentEQ applies the EQ predicate on the "header_content" field.
func HeaderContentEQ(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeaderContent), v))
	})
}

// HeaderContentNEQ applies the NEQ predicate on the "header_content" field.
func HeaderContentNEQ(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeaderContent), v))
	})
}

// HeaderContentIn applies the In predicate on the "header_content" field.
func HeaderContentIn(vs ...string) predicate.QuestionTranslation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHeaderContent), v...))
	})
}

// HeaderContentNotIn applies the NotIn predicate on the "header_content" field.
func HeaderContentNotIn(vs ...string) predicate.QuestionTranslation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHeaderContent), v...))
	})
}

// HeaderContentGT applies the GT predicate on the "header_content" field.
func HeaderContentGT(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeaderContent), v))
	})
}

// HeaderContentGTE applies the GTE predicate on the "header_content" field.
func HeaderContentGTE(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeaderContent), v))
	})
}

// HeaderContentLT applies the LT predicate on the "header_content" field.
func HeaderContentLT(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeaderContent), v))
	})
}

// HeaderContentLTE applies the LTE predicate on the "header_content" field.
func HeaderContentLTE(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeaderContent), v))
	})
}

// HeaderContentContains applies the Contains predicate on the "header_content" field.
func HeaderContentContains(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHeaderContent), v))
	})
}

// HeaderContentHasPrefix applies the HasPrefix predicate on the "header_content" field.
func HeaderContentHasPrefix(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHeaderContent), v))
	})
}

// HeaderContentHasSuffix applies the HasSuffix predicate on the "header_content" field.
func HeaderContentHasSuffix(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHeaderContent), v))
	})
}

// HeaderContentIsNil applies the IsNil predicate on the "header_content" field.
func HeaderContentIsNil() predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHeaderContent)))
	})
}

// HeaderContentNotNil applies the NotNil predicate on the "header_content" field.
func HeaderContentNotNil() predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHeaderContent)))
	})
}

// HeaderContentEqualFold applies the EqualFold predicate on the "header_content" field.
func HeaderContentEqualFold(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHeaderContent), v))
	})
}

// HeaderContentContainsFold applies the ContainsFold predicate on the "header_content" field.
func HeaderContentContainsFold(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHeaderContent), v))
	})
}

// FooterContentEQ applies the EQ predicate on the "footer_content" field.
func FooterContentEQ(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFooterContent), v))
	})
}

// FooterContentNEQ applies the NEQ predicate on the "footer_content" field.
func FooterContentNEQ(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFooterContent), v))
	})
}

// FooterContentIn applies the In predicate on the "footer_content" field.
func FooterContentIn(vs ...string) predicate.QuestionTranslation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFooterContent), v...))
	})
}

// FooterContentNotIn applies the NotIn predicate on the "footer_content" field.
func FooterContentNotIn(vs ...string) predicate.QuestionTranslation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFooterContent), v...))
	})
}

// FooterContentGT applies the GT predicate on the "footer_content" field.
func FooterContentGT(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFooterContent), v))
	})
}

// FooterContentGTE applies the GTE predicate on the "footer_content" field.
func FooterContentGTE(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFooterContent), v))
	})
}

// FooterContentLT applies the LT predicate on the "footer_content" field.
func FooterContentLT(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFooterContent), v))
	})
}

// FooterContentLTE applies the LTE predicate on the "footer_content" field.
func FooterContentLTE(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFooterContent), v))
	})
}

// FooterContentContains applies the Contains predicate on the "footer_content" field.
func FooterContentContains(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFooterContent), v))
	})
}

// FooterContentHasPrefix applies the HasPrefix predicate on the "footer_content" field.
func FooterContentHasPrefix(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFooterContent), v))
	})
}

// FooterContentHasSuffix applies the HasSuffix predicate on the "footer_content" field.
func FooterContentHasSuffix(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFooterContent), v))
	})
}

// FooterContentIsNil applies the IsNil predicate on the "footer_content" field.
func FooterContentIsNil() predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFooterContent)))
	})
}

// FooterContentNotNil applies the NotNil predicate on the "footer_content" field.
func FooterContentNotNil() predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFooterContent)))
	})
}

// FooterContentEqualFold applies the EqualFold predicate on the "footer_content" field.
func FooterContentEqualFold(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFooterContent), v))
	})
}

// FooterContentContainsFold applies the ContainsFold predicate on the "footer_content" field.
func FooterContentContainsFold(v string) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFooterContent), v))
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.Question) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.QuestionTranslation) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.QuestionTranslation) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QuestionTranslation) predicate.QuestionTranslation {
	return predicate.QuestionTranslation(func(s *sql.Selector) {
		p(s.Not())
	})
}
