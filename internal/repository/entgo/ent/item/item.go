// Code generated by ent, DO NOT EDIT.

package item

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the item type in the database.
	Label = "item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldSteps holds the string denoting the steps field in the database.
	FieldSteps = "steps"
	// EdgeResponses holds the string denoting the responses edge name in mutations.
	EdgeResponses = "responses"
	// EdgeTranslations holds the string denoting the translations edge name in mutations.
	EdgeTranslations = "translations"
	// EdgeScale holds the string denoting the scale edge name in mutations.
	EdgeScale = "scale"
	// EdgeQuestion holds the string denoting the question edge name in mutations.
	EdgeQuestion = "question"
	// EdgeScaleItem holds the string denoting the scale_item edge name in mutations.
	EdgeScaleItem = "scale_item"
	// Table holds the table name of the item in the database.
	Table = "items"
	// ResponsesTable is the table that holds the responses relation/edge.
	ResponsesTable = "responses"
	// ResponsesInverseTable is the table name for the Response entity.
	// It exists in this package in order to avoid circular dependency with the "response" package.
	ResponsesInverseTable = "responses"
	// ResponsesColumn is the table column denoting the responses relation/edge.
	ResponsesColumn = "item_responses"
	// TranslationsTable is the table that holds the translations relation/edge.
	TranslationsTable = "item_translations"
	// TranslationsInverseTable is the table name for the ItemTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "itemtranslation" package.
	TranslationsInverseTable = "item_translations"
	// TranslationsColumn is the table column denoting the translations relation/edge.
	TranslationsColumn = "item_translations"
	// ScaleTable is the table that holds the scale relation/edge. The primary key declared below.
	ScaleTable = "scale_items"
	// ScaleInverseTable is the table name for the Scale entity.
	// It exists in this package in order to avoid circular dependency with the "scale" package.
	ScaleInverseTable = "scales"
	// QuestionTable is the table that holds the question relation/edge. The primary key declared below.
	QuestionTable = "question_items"
	// QuestionInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionInverseTable = "questions"
	// ScaleItemTable is the table that holds the scale_item relation/edge.
	ScaleItemTable = "scale_items"
	// ScaleItemInverseTable is the table name for the ScaleItem entity.
	// It exists in this package in order to avoid circular dependency with the "scaleitem" package.
	ScaleItemInverseTable = "scale_items"
	// ScaleItemColumn is the table column denoting the scale_item relation/edge.
	ScaleItemColumn = "item_id"
)

// Columns holds all SQL columns for item fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldCode,
	FieldSteps,
}

var (
	// ScalePrimaryKey and ScaleColumn2 are the table columns denoting the
	// primary key for the scale relation (M2M).
	ScalePrimaryKey = []string{"scale_id", "item_id"}
	// QuestionPrimaryKey and QuestionColumn2 are the table columns denoting the
	// primary key for the question relation (M2M).
	QuestionPrimaryKey = []string{"question_id", "item_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DefaultSteps holds the default value on creation for the "steps" field.
	DefaultSteps int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
