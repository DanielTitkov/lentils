// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinygodsdev/orrery/internal/repository/entgo/ent/interpretation"
	"github.com/tinygodsdev/orrery/internal/repository/entgo/ent/interpretationtranslation"
	"github.com/tinygodsdev/orrery/internal/repository/entgo/ent/predicate"
)

// InterpretationTranslationUpdate is the builder for updating InterpretationTranslation entities.
type InterpretationTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *InterpretationTranslationMutation
}

// Where appends a list predicates to the InterpretationTranslationUpdate builder.
func (itu *InterpretationTranslationUpdate) Where(ps ...predicate.InterpretationTranslation) *InterpretationTranslationUpdate {
	itu.mutation.Where(ps...)
	return itu
}

// SetContent sets the "content" field.
func (itu *InterpretationTranslationUpdate) SetContent(s string) *InterpretationTranslationUpdate {
	itu.mutation.SetContent(s)
	return itu
}

// SetInterpretationID sets the "interpretation" edge to the Interpretation entity by ID.
func (itu *InterpretationTranslationUpdate) SetInterpretationID(id uuid.UUID) *InterpretationTranslationUpdate {
	itu.mutation.SetInterpretationID(id)
	return itu
}

// SetNillableInterpretationID sets the "interpretation" edge to the Interpretation entity by ID if the given value is not nil.
func (itu *InterpretationTranslationUpdate) SetNillableInterpretationID(id *uuid.UUID) *InterpretationTranslationUpdate {
	if id != nil {
		itu = itu.SetInterpretationID(*id)
	}
	return itu
}

// SetInterpretation sets the "interpretation" edge to the Interpretation entity.
func (itu *InterpretationTranslationUpdate) SetInterpretation(i *Interpretation) *InterpretationTranslationUpdate {
	return itu.SetInterpretationID(i.ID)
}

// Mutation returns the InterpretationTranslationMutation object of the builder.
func (itu *InterpretationTranslationUpdate) Mutation() *InterpretationTranslationMutation {
	return itu.mutation
}

// ClearInterpretation clears the "interpretation" edge to the Interpretation entity.
func (itu *InterpretationTranslationUpdate) ClearInterpretation() *InterpretationTranslationUpdate {
	itu.mutation.ClearInterpretation()
	return itu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (itu *InterpretationTranslationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(itu.hooks) == 0 {
		if err = itu.check(); err != nil {
			return 0, err
		}
		affected, err = itu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InterpretationTranslationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = itu.check(); err != nil {
				return 0, err
			}
			itu.mutation = mutation
			affected, err = itu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(itu.hooks) - 1; i >= 0; i-- {
			if itu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = itu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, itu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (itu *InterpretationTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := itu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (itu *InterpretationTranslationUpdate) Exec(ctx context.Context) error {
	_, err := itu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itu *InterpretationTranslationUpdate) ExecX(ctx context.Context) {
	if err := itu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itu *InterpretationTranslationUpdate) check() error {
	if v, ok := itu.mutation.Content(); ok {
		if err := interpretationtranslation.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "InterpretationTranslation.content": %w`, err)}
		}
	}
	return nil
}

func (itu *InterpretationTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   interpretationtranslation.Table,
			Columns: interpretationtranslation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: interpretationtranslation.FieldID,
			},
		},
	}
	if ps := itu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := itu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: interpretationtranslation.FieldContent,
		})
	}
	if itu.mutation.InterpretationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interpretationtranslation.InterpretationTable,
			Columns: []string{interpretationtranslation.InterpretationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: interpretation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.InterpretationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interpretationtranslation.InterpretationTable,
			Columns: []string{interpretationtranslation.InterpretationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: interpretation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, itu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{interpretationtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// InterpretationTranslationUpdateOne is the builder for updating a single InterpretationTranslation entity.
type InterpretationTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InterpretationTranslationMutation
}

// SetContent sets the "content" field.
func (ituo *InterpretationTranslationUpdateOne) SetContent(s string) *InterpretationTranslationUpdateOne {
	ituo.mutation.SetContent(s)
	return ituo
}

// SetInterpretationID sets the "interpretation" edge to the Interpretation entity by ID.
func (ituo *InterpretationTranslationUpdateOne) SetInterpretationID(id uuid.UUID) *InterpretationTranslationUpdateOne {
	ituo.mutation.SetInterpretationID(id)
	return ituo
}

// SetNillableInterpretationID sets the "interpretation" edge to the Interpretation entity by ID if the given value is not nil.
func (ituo *InterpretationTranslationUpdateOne) SetNillableInterpretationID(id *uuid.UUID) *InterpretationTranslationUpdateOne {
	if id != nil {
		ituo = ituo.SetInterpretationID(*id)
	}
	return ituo
}

// SetInterpretation sets the "interpretation" edge to the Interpretation entity.
func (ituo *InterpretationTranslationUpdateOne) SetInterpretation(i *Interpretation) *InterpretationTranslationUpdateOne {
	return ituo.SetInterpretationID(i.ID)
}

// Mutation returns the InterpretationTranslationMutation object of the builder.
func (ituo *InterpretationTranslationUpdateOne) Mutation() *InterpretationTranslationMutation {
	return ituo.mutation
}

// ClearInterpretation clears the "interpretation" edge to the Interpretation entity.
func (ituo *InterpretationTranslationUpdateOne) ClearInterpretation() *InterpretationTranslationUpdateOne {
	ituo.mutation.ClearInterpretation()
	return ituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ituo *InterpretationTranslationUpdateOne) Select(field string, fields ...string) *InterpretationTranslationUpdateOne {
	ituo.fields = append([]string{field}, fields...)
	return ituo
}

// Save executes the query and returns the updated InterpretationTranslation entity.
func (ituo *InterpretationTranslationUpdateOne) Save(ctx context.Context) (*InterpretationTranslation, error) {
	var (
		err  error
		node *InterpretationTranslation
	)
	if len(ituo.hooks) == 0 {
		if err = ituo.check(); err != nil {
			return nil, err
		}
		node, err = ituo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InterpretationTranslationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ituo.check(); err != nil {
				return nil, err
			}
			ituo.mutation = mutation
			node, err = ituo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ituo.hooks) - 1; i >= 0; i-- {
			if ituo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ituo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ituo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*InterpretationTranslation)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InterpretationTranslationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ituo *InterpretationTranslationUpdateOne) SaveX(ctx context.Context) *InterpretationTranslation {
	node, err := ituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ituo *InterpretationTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := ituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ituo *InterpretationTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := ituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ituo *InterpretationTranslationUpdateOne) check() error {
	if v, ok := ituo.mutation.Content(); ok {
		if err := interpretationtranslation.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "InterpretationTranslation.content": %w`, err)}
		}
	}
	return nil
}

func (ituo *InterpretationTranslationUpdateOne) sqlSave(ctx context.Context) (_node *InterpretationTranslation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   interpretationtranslation.Table,
			Columns: interpretationtranslation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: interpretationtranslation.FieldID,
			},
		},
	}
	id, ok := ituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InterpretationTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, interpretationtranslation.FieldID)
		for _, f := range fields {
			if !interpretationtranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != interpretationtranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ituo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: interpretationtranslation.FieldContent,
		})
	}
	if ituo.mutation.InterpretationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interpretationtranslation.InterpretationTable,
			Columns: []string{interpretationtranslation.InterpretationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: interpretation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.InterpretationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interpretationtranslation.InterpretationTable,
			Columns: []string{interpretationtranslation.InterpretationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: interpretation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InterpretationTranslation{config: ituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{interpretationtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
