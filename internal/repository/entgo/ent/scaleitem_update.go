// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/orrery/internal/repository/entgo/ent/item"
	"github.com/DanielTitkov/orrery/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/orrery/internal/repository/entgo/ent/scale"
	"github.com/DanielTitkov/orrery/internal/repository/entgo/ent/scaleitem"
	"github.com/google/uuid"
)

// ScaleItemUpdate is the builder for updating ScaleItem entities.
type ScaleItemUpdate struct {
	config
	hooks    []Hook
	mutation *ScaleItemMutation
}

// Where appends a list predicates to the ScaleItemUpdate builder.
func (siu *ScaleItemUpdate) Where(ps ...predicate.ScaleItem) *ScaleItemUpdate {
	siu.mutation.Where(ps...)
	return siu
}

// SetReverse sets the "reverse" field.
func (siu *ScaleItemUpdate) SetReverse(b bool) *ScaleItemUpdate {
	siu.mutation.SetReverse(b)
	return siu
}

// SetNillableReverse sets the "reverse" field if the given value is not nil.
func (siu *ScaleItemUpdate) SetNillableReverse(b *bool) *ScaleItemUpdate {
	if b != nil {
		siu.SetReverse(*b)
	}
	return siu
}

// SetScaleID sets the "scale_id" field.
func (siu *ScaleItemUpdate) SetScaleID(u uuid.UUID) *ScaleItemUpdate {
	siu.mutation.SetScaleID(u)
	return siu
}

// SetItemID sets the "item_id" field.
func (siu *ScaleItemUpdate) SetItemID(u uuid.UUID) *ScaleItemUpdate {
	siu.mutation.SetItemID(u)
	return siu
}

// SetItem sets the "item" edge to the Item entity.
func (siu *ScaleItemUpdate) SetItem(i *Item) *ScaleItemUpdate {
	return siu.SetItemID(i.ID)
}

// SetScale sets the "scale" edge to the Scale entity.
func (siu *ScaleItemUpdate) SetScale(s *Scale) *ScaleItemUpdate {
	return siu.SetScaleID(s.ID)
}

// Mutation returns the ScaleItemMutation object of the builder.
func (siu *ScaleItemUpdate) Mutation() *ScaleItemMutation {
	return siu.mutation
}

// ClearItem clears the "item" edge to the Item entity.
func (siu *ScaleItemUpdate) ClearItem() *ScaleItemUpdate {
	siu.mutation.ClearItem()
	return siu
}

// ClearScale clears the "scale" edge to the Scale entity.
func (siu *ScaleItemUpdate) ClearScale() *ScaleItemUpdate {
	siu.mutation.ClearScale()
	return siu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siu *ScaleItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(siu.hooks) == 0 {
		if err = siu.check(); err != nil {
			return 0, err
		}
		affected, err = siu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScaleItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = siu.check(); err != nil {
				return 0, err
			}
			siu.mutation = mutation
			affected, err = siu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(siu.hooks) - 1; i >= 0; i-- {
			if siu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = siu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, siu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (siu *ScaleItemUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *ScaleItemUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *ScaleItemUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siu *ScaleItemUpdate) check() error {
	if _, ok := siu.mutation.ItemID(); siu.mutation.ItemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ScaleItem.item"`)
	}
	if _, ok := siu.mutation.ScaleID(); siu.mutation.ScaleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ScaleItem.scale"`)
	}
	return nil
}

func (siu *ScaleItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scaleitem.Table,
			Columns: scaleitem.Columns,
		},
	}
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.Reverse(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: scaleitem.FieldReverse,
		})
	}
	if siu.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scaleitem.ItemTable,
			Columns: []string{scaleitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scaleitem.ItemTable,
			Columns: []string{scaleitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.ScaleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scaleitem.ScaleTable,
			Columns: []string{scaleitem.ScaleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.ScaleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scaleitem.ScaleTable,
			Columns: []string{scaleitem.ScaleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scaleitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ScaleItemUpdateOne is the builder for updating a single ScaleItem entity.
type ScaleItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScaleItemMutation
}

// SetReverse sets the "reverse" field.
func (siuo *ScaleItemUpdateOne) SetReverse(b bool) *ScaleItemUpdateOne {
	siuo.mutation.SetReverse(b)
	return siuo
}

// SetNillableReverse sets the "reverse" field if the given value is not nil.
func (siuo *ScaleItemUpdateOne) SetNillableReverse(b *bool) *ScaleItemUpdateOne {
	if b != nil {
		siuo.SetReverse(*b)
	}
	return siuo
}

// SetScaleID sets the "scale_id" field.
func (siuo *ScaleItemUpdateOne) SetScaleID(u uuid.UUID) *ScaleItemUpdateOne {
	siuo.mutation.SetScaleID(u)
	return siuo
}

// SetItemID sets the "item_id" field.
func (siuo *ScaleItemUpdateOne) SetItemID(u uuid.UUID) *ScaleItemUpdateOne {
	siuo.mutation.SetItemID(u)
	return siuo
}

// SetItem sets the "item" edge to the Item entity.
func (siuo *ScaleItemUpdateOne) SetItem(i *Item) *ScaleItemUpdateOne {
	return siuo.SetItemID(i.ID)
}

// SetScale sets the "scale" edge to the Scale entity.
func (siuo *ScaleItemUpdateOne) SetScale(s *Scale) *ScaleItemUpdateOne {
	return siuo.SetScaleID(s.ID)
}

// Mutation returns the ScaleItemMutation object of the builder.
func (siuo *ScaleItemUpdateOne) Mutation() *ScaleItemMutation {
	return siuo.mutation
}

// ClearItem clears the "item" edge to the Item entity.
func (siuo *ScaleItemUpdateOne) ClearItem() *ScaleItemUpdateOne {
	siuo.mutation.ClearItem()
	return siuo
}

// ClearScale clears the "scale" edge to the Scale entity.
func (siuo *ScaleItemUpdateOne) ClearScale() *ScaleItemUpdateOne {
	siuo.mutation.ClearScale()
	return siuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (siuo *ScaleItemUpdateOne) Select(field string, fields ...string) *ScaleItemUpdateOne {
	siuo.fields = append([]string{field}, fields...)
	return siuo
}

// Save executes the query and returns the updated ScaleItem entity.
func (siuo *ScaleItemUpdateOne) Save(ctx context.Context) (*ScaleItem, error) {
	var (
		err  error
		node *ScaleItem
	)
	if len(siuo.hooks) == 0 {
		if err = siuo.check(); err != nil {
			return nil, err
		}
		node, err = siuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScaleItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = siuo.check(); err != nil {
				return nil, err
			}
			siuo.mutation = mutation
			node, err = siuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(siuo.hooks) - 1; i >= 0; i-- {
			if siuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = siuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, siuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ScaleItem)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ScaleItemMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *ScaleItemUpdateOne) SaveX(ctx context.Context) *ScaleItem {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *ScaleItemUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *ScaleItemUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siuo *ScaleItemUpdateOne) check() error {
	if _, ok := siuo.mutation.ItemID(); siuo.mutation.ItemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ScaleItem.item"`)
	}
	if _, ok := siuo.mutation.ScaleID(); siuo.mutation.ScaleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ScaleItem.scale"`)
	}
	return nil
}

func (siuo *ScaleItemUpdateOne) sqlSave(ctx context.Context) (_node *ScaleItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scaleitem.Table,
			Columns: scaleitem.Columns,
		},
	}
	if fields := siuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !scaleitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := siuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siuo.mutation.Reverse(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: scaleitem.FieldReverse,
		})
	}
	if siuo.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scaleitem.ItemTable,
			Columns: []string{scaleitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scaleitem.ItemTable,
			Columns: []string{scaleitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.ScaleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scaleitem.ScaleTable,
			Columns: []string{scaleitem.ScaleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.ScaleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scaleitem.ScaleTable,
			Columns: []string{scaleitem.ScaleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScaleItem{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scaleitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
