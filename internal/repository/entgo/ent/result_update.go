// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/result"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/scale"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/take"
	"github.com/google/uuid"
)

// ResultUpdate is the builder for updating Result entities.
type ResultUpdate struct {
	config
	hooks    []Hook
	mutation *ResultMutation
}

// Where appends a list predicates to the ResultUpdate builder.
func (ru *ResultUpdate) Where(ps ...predicate.Result) *ResultUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdateTime sets the "update_time" field.
func (ru *ResultUpdate) SetUpdateTime(t time.Time) *ResultUpdate {
	ru.mutation.SetUpdateTime(t)
	return ru
}

// SetRawScore sets the "raw_score" field.
func (ru *ResultUpdate) SetRawScore(f float64) *ResultUpdate {
	ru.mutation.ResetRawScore()
	ru.mutation.SetRawScore(f)
	return ru
}

// AddRawScore adds f to the "raw_score" field.
func (ru *ResultUpdate) AddRawScore(f float64) *ResultUpdate {
	ru.mutation.AddRawScore(f)
	return ru
}

// SetFinalScore sets the "final_score" field.
func (ru *ResultUpdate) SetFinalScore(f float64) *ResultUpdate {
	ru.mutation.ResetFinalScore()
	ru.mutation.SetFinalScore(f)
	return ru
}

// AddFinalScore adds f to the "final_score" field.
func (ru *ResultUpdate) AddFinalScore(f float64) *ResultUpdate {
	ru.mutation.AddFinalScore(f)
	return ru
}

// SetMeta sets the "meta" field.
func (ru *ResultUpdate) SetMeta(m map[string]interface{}) *ResultUpdate {
	ru.mutation.SetMeta(m)
	return ru
}

// ClearMeta clears the value of the "meta" field.
func (ru *ResultUpdate) ClearMeta() *ResultUpdate {
	ru.mutation.ClearMeta()
	return ru
}

// SetScaleID sets the "scale" edge to the Scale entity by ID.
func (ru *ResultUpdate) SetScaleID(id uuid.UUID) *ResultUpdate {
	ru.mutation.SetScaleID(id)
	return ru
}

// SetScale sets the "scale" edge to the Scale entity.
func (ru *ResultUpdate) SetScale(s *Scale) *ResultUpdate {
	return ru.SetScaleID(s.ID)
}

// SetTakeID sets the "take" edge to the Take entity by ID.
func (ru *ResultUpdate) SetTakeID(id uuid.UUID) *ResultUpdate {
	ru.mutation.SetTakeID(id)
	return ru
}

// SetTake sets the "take" edge to the Take entity.
func (ru *ResultUpdate) SetTake(t *Take) *ResultUpdate {
	return ru.SetTakeID(t.ID)
}

// Mutation returns the ResultMutation object of the builder.
func (ru *ResultUpdate) Mutation() *ResultMutation {
	return ru.mutation
}

// ClearScale clears the "scale" edge to the Scale entity.
func (ru *ResultUpdate) ClearScale() *ResultUpdate {
	ru.mutation.ClearScale()
	return ru
}

// ClearTake clears the "take" edge to the Take entity.
func (ru *ResultUpdate) ClearTake() *ResultUpdate {
	ru.mutation.ClearTake()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResultUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResultMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResultUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResultUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResultUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ResultUpdate) defaults() {
	if _, ok := ru.mutation.UpdateTime(); !ok {
		v := result.UpdateDefaultUpdateTime()
		ru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ResultUpdate) check() error {
	if _, ok := ru.mutation.ScaleID(); ru.mutation.ScaleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Result.scale"`)
	}
	if _, ok := ru.mutation.TakeID(); ru.mutation.TakeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Result.take"`)
	}
	return nil
}

func (ru *ResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   result.Table,
			Columns: result.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: result.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: result.FieldUpdateTime,
		})
	}
	if value, ok := ru.mutation.RawScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: result.FieldRawScore,
		})
	}
	if value, ok := ru.mutation.AddedRawScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: result.FieldRawScore,
		})
	}
	if value, ok := ru.mutation.FinalScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: result.FieldFinalScore,
		})
	}
	if value, ok := ru.mutation.AddedFinalScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: result.FieldFinalScore,
		})
	}
	if value, ok := ru.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: result.FieldMeta,
		})
	}
	if ru.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: result.FieldMeta,
		})
	}
	if ru.mutation.ScaleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   result.ScaleTable,
			Columns: []string{result.ScaleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ScaleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   result.ScaleTable,
			Columns: []string{result.ScaleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.TakeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   result.TakeTable,
			Columns: []string{result.TakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: take.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   result.TakeTable,
			Columns: []string{result.TakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: take.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{result.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ResultUpdateOne is the builder for updating a single Result entity.
type ResultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResultMutation
}

// SetUpdateTime sets the "update_time" field.
func (ruo *ResultUpdateOne) SetUpdateTime(t time.Time) *ResultUpdateOne {
	ruo.mutation.SetUpdateTime(t)
	return ruo
}

// SetRawScore sets the "raw_score" field.
func (ruo *ResultUpdateOne) SetRawScore(f float64) *ResultUpdateOne {
	ruo.mutation.ResetRawScore()
	ruo.mutation.SetRawScore(f)
	return ruo
}

// AddRawScore adds f to the "raw_score" field.
func (ruo *ResultUpdateOne) AddRawScore(f float64) *ResultUpdateOne {
	ruo.mutation.AddRawScore(f)
	return ruo
}

// SetFinalScore sets the "final_score" field.
func (ruo *ResultUpdateOne) SetFinalScore(f float64) *ResultUpdateOne {
	ruo.mutation.ResetFinalScore()
	ruo.mutation.SetFinalScore(f)
	return ruo
}

// AddFinalScore adds f to the "final_score" field.
func (ruo *ResultUpdateOne) AddFinalScore(f float64) *ResultUpdateOne {
	ruo.mutation.AddFinalScore(f)
	return ruo
}

// SetMeta sets the "meta" field.
func (ruo *ResultUpdateOne) SetMeta(m map[string]interface{}) *ResultUpdateOne {
	ruo.mutation.SetMeta(m)
	return ruo
}

// ClearMeta clears the value of the "meta" field.
func (ruo *ResultUpdateOne) ClearMeta() *ResultUpdateOne {
	ruo.mutation.ClearMeta()
	return ruo
}

// SetScaleID sets the "scale" edge to the Scale entity by ID.
func (ruo *ResultUpdateOne) SetScaleID(id uuid.UUID) *ResultUpdateOne {
	ruo.mutation.SetScaleID(id)
	return ruo
}

// SetScale sets the "scale" edge to the Scale entity.
func (ruo *ResultUpdateOne) SetScale(s *Scale) *ResultUpdateOne {
	return ruo.SetScaleID(s.ID)
}

// SetTakeID sets the "take" edge to the Take entity by ID.
func (ruo *ResultUpdateOne) SetTakeID(id uuid.UUID) *ResultUpdateOne {
	ruo.mutation.SetTakeID(id)
	return ruo
}

// SetTake sets the "take" edge to the Take entity.
func (ruo *ResultUpdateOne) SetTake(t *Take) *ResultUpdateOne {
	return ruo.SetTakeID(t.ID)
}

// Mutation returns the ResultMutation object of the builder.
func (ruo *ResultUpdateOne) Mutation() *ResultMutation {
	return ruo.mutation
}

// ClearScale clears the "scale" edge to the Scale entity.
func (ruo *ResultUpdateOne) ClearScale() *ResultUpdateOne {
	ruo.mutation.ClearScale()
	return ruo
}

// ClearTake clears the "take" edge to the Take entity.
func (ruo *ResultUpdateOne) ClearTake() *ResultUpdateOne {
	ruo.mutation.ClearTake()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResultUpdateOne) Select(field string, fields ...string) *ResultUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Result entity.
func (ruo *ResultUpdateOne) Save(ctx context.Context) (*Result, error) {
	var (
		err  error
		node *Result
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResultMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Result)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ResultMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResultUpdateOne) SaveX(ctx context.Context) *Result {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResultUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResultUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ResultUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdateTime(); !ok {
		v := result.UpdateDefaultUpdateTime()
		ruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ResultUpdateOne) check() error {
	if _, ok := ruo.mutation.ScaleID(); ruo.mutation.ScaleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Result.scale"`)
	}
	if _, ok := ruo.mutation.TakeID(); ruo.mutation.TakeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Result.take"`)
	}
	return nil
}

func (ruo *ResultUpdateOne) sqlSave(ctx context.Context) (_node *Result, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   result.Table,
			Columns: result.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: result.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Result.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, result.FieldID)
		for _, f := range fields {
			if !result.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != result.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: result.FieldUpdateTime,
		})
	}
	if value, ok := ruo.mutation.RawScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: result.FieldRawScore,
		})
	}
	if value, ok := ruo.mutation.AddedRawScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: result.FieldRawScore,
		})
	}
	if value, ok := ruo.mutation.FinalScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: result.FieldFinalScore,
		})
	}
	if value, ok := ruo.mutation.AddedFinalScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: result.FieldFinalScore,
		})
	}
	if value, ok := ruo.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: result.FieldMeta,
		})
	}
	if ruo.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: result.FieldMeta,
		})
	}
	if ruo.mutation.ScaleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   result.ScaleTable,
			Columns: []string{result.ScaleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ScaleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   result.ScaleTable,
			Columns: []string{result.ScaleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.TakeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   result.TakeTable,
			Columns: []string{result.TakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: take.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   result.TakeTable,
			Columns: []string{result.TakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: take.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Result{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{result.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
