// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/badge"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/challenge"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/prediction"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/proof"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/test"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/testtranslation"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/user"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/usersession"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBadge           = "Badge"
	TypeChallenge       = "Challenge"
	TypePrediction      = "Prediction"
	TypeProof           = "Proof"
	TypeTest            = "Test"
	TypeTestTranslation = "TestTranslation"
	TypeUser            = "User"
	TypeUserSession     = "UserSession"
)

// BadgeMutation represents an operation that mutates the Badge nodes in the graph.
type BadgeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	_type         *string
	active        *bool
	meta          *map[string]interface{}
	clearedFields map[string]struct{}
	users         map[uuid.UUID]struct{}
	removedusers  map[uuid.UUID]struct{}
	clearedusers  bool
	done          bool
	oldValue      func(context.Context) (*Badge, error)
	predicates    []predicate.Badge
}

var _ ent.Mutation = (*BadgeMutation)(nil)

// badgeOption allows management of the mutation configuration using functional options.
type badgeOption func(*BadgeMutation)

// newBadgeMutation creates new mutation for the Badge entity.
func newBadgeMutation(c config, op Op, opts ...badgeOption) *BadgeMutation {
	m := &BadgeMutation{
		config:        c,
		op:            op,
		typ:           TypeBadge,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBadgeID sets the ID field of the mutation.
func withBadgeID(id int) badgeOption {
	return func(m *BadgeMutation) {
		var (
			err   error
			once  sync.Once
			value *Badge
		)
		m.oldValue = func(ctx context.Context) (*Badge, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Badge.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBadge sets the old Badge of the mutation.
func withBadge(node *Badge) badgeOption {
	return func(m *BadgeMutation) {
		m.oldValue = func(context.Context) (*Badge, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BadgeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BadgeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BadgeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BadgeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Badge.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *BadgeMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *BadgeMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Badge entity.
// If the Badge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BadgeMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *BadgeMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *BadgeMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *BadgeMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Badge entity.
// If the Badge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BadgeMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *BadgeMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetType sets the "type" field.
func (m *BadgeMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *BadgeMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Badge entity.
// If the Badge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BadgeMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *BadgeMutation) ResetType() {
	m._type = nil
}

// SetActive sets the "active" field.
func (m *BadgeMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *BadgeMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Badge entity.
// If the Badge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BadgeMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *BadgeMutation) ResetActive() {
	m.active = nil
}

// SetMeta sets the "meta" field.
func (m *BadgeMutation) SetMeta(value map[string]interface{}) {
	m.meta = &value
}

// Meta returns the value of the "meta" field in the mutation.
func (m *BadgeMutation) Meta() (r map[string]interface{}, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the Badge entity.
// If the Badge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BadgeMutation) OldMeta(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ClearMeta clears the value of the "meta" field.
func (m *BadgeMutation) ClearMeta() {
	m.meta = nil
	m.clearedFields[badge.FieldMeta] = struct{}{}
}

// MetaCleared returns if the "meta" field was cleared in this mutation.
func (m *BadgeMutation) MetaCleared() bool {
	_, ok := m.clearedFields[badge.FieldMeta]
	return ok
}

// ResetMeta resets all changes to the "meta" field.
func (m *BadgeMutation) ResetMeta() {
	m.meta = nil
	delete(m.clearedFields, badge.FieldMeta)
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *BadgeMutation) AddUserIDs(ids ...uuid.UUID) {
	if m.users == nil {
		m.users = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *BadgeMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *BadgeMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *BadgeMutation) RemoveUserIDs(ids ...uuid.UUID) {
	if m.removedusers == nil {
		m.removedusers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *BadgeMutation) RemovedUsersIDs() (ids []uuid.UUID) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *BadgeMutation) UsersIDs() (ids []uuid.UUID) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *BadgeMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Where appends a list predicates to the BadgeMutation builder.
func (m *BadgeMutation) Where(ps ...predicate.Badge) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BadgeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Badge).
func (m *BadgeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BadgeMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, badge.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, badge.FieldUpdateTime)
	}
	if m._type != nil {
		fields = append(fields, badge.FieldType)
	}
	if m.active != nil {
		fields = append(fields, badge.FieldActive)
	}
	if m.meta != nil {
		fields = append(fields, badge.FieldMeta)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BadgeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case badge.FieldCreateTime:
		return m.CreateTime()
	case badge.FieldUpdateTime:
		return m.UpdateTime()
	case badge.FieldType:
		return m.GetType()
	case badge.FieldActive:
		return m.Active()
	case badge.FieldMeta:
		return m.Meta()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BadgeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case badge.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case badge.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case badge.FieldType:
		return m.OldType(ctx)
	case badge.FieldActive:
		return m.OldActive(ctx)
	case badge.FieldMeta:
		return m.OldMeta(ctx)
	}
	return nil, fmt.Errorf("unknown Badge field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BadgeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case badge.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case badge.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case badge.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case badge.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case badge.FieldMeta:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	}
	return fmt.Errorf("unknown Badge field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BadgeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BadgeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BadgeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Badge numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BadgeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(badge.FieldMeta) {
		fields = append(fields, badge.FieldMeta)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BadgeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BadgeMutation) ClearField(name string) error {
	switch name {
	case badge.FieldMeta:
		m.ClearMeta()
		return nil
	}
	return fmt.Errorf("unknown Badge nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BadgeMutation) ResetField(name string) error {
	switch name {
	case badge.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case badge.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case badge.FieldType:
		m.ResetType()
		return nil
	case badge.FieldActive:
		m.ResetActive()
		return nil
	case badge.FieldMeta:
		m.ResetMeta()
		return nil
	}
	return fmt.Errorf("unknown Badge field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BadgeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.users != nil {
		edges = append(edges, badge.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BadgeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case badge.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BadgeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedusers != nil {
		edges = append(edges, badge.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BadgeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case badge.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BadgeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedusers {
		edges = append(edges, badge.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BadgeMutation) EdgeCleared(name string) bool {
	switch name {
	case badge.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BadgeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Badge unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BadgeMutation) ResetEdge(name string) error {
	switch name {
	case badge.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown Badge edge %s", name)
}

// ChallengeMutation represents an operation that mutates the Challenge nodes in the graph.
type ChallengeMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	create_time        *time.Time
	update_time        *time.Time
	content            *string
	description        *string
	outcome            *bool
	published          *bool
	start_time         *time.Time
	end_time           *time.Time
	_type              *challenge.Type
	clearedFields      map[string]struct{}
	predictions        map[uuid.UUID]struct{}
	removedpredictions map[uuid.UUID]struct{}
	clearedpredictions bool
	proofs             map[uuid.UUID]struct{}
	removedproofs      map[uuid.UUID]struct{}
	clearedproofs      bool
	author             *uuid.UUID
	clearedauthor      bool
	done               bool
	oldValue           func(context.Context) (*Challenge, error)
	predicates         []predicate.Challenge
}

var _ ent.Mutation = (*ChallengeMutation)(nil)

// challengeOption allows management of the mutation configuration using functional options.
type challengeOption func(*ChallengeMutation)

// newChallengeMutation creates new mutation for the Challenge entity.
func newChallengeMutation(c config, op Op, opts ...challengeOption) *ChallengeMutation {
	m := &ChallengeMutation{
		config:        c,
		op:            op,
		typ:           TypeChallenge,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChallengeID sets the ID field of the mutation.
func withChallengeID(id uuid.UUID) challengeOption {
	return func(m *ChallengeMutation) {
		var (
			err   error
			once  sync.Once
			value *Challenge
		)
		m.oldValue = func(ctx context.Context) (*Challenge, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Challenge.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChallenge sets the old Challenge of the mutation.
func withChallenge(node *Challenge) challengeOption {
	return func(m *ChallengeMutation) {
		m.oldValue = func(context.Context) (*Challenge, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChallengeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChallengeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Challenge entities.
func (m *ChallengeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChallengeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChallengeMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Challenge.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ChallengeMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ChallengeMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Challenge entity.
// If the Challenge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChallengeMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ChallengeMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ChallengeMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ChallengeMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Challenge entity.
// If the Challenge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChallengeMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ChallengeMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetContent sets the "content" field.
func (m *ChallengeMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *ChallengeMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Challenge entity.
// If the Challenge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChallengeMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *ChallengeMutation) ResetContent() {
	m.content = nil
}

// SetDescription sets the "description" field.
func (m *ChallengeMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ChallengeMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Challenge entity.
// If the Challenge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChallengeMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ChallengeMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[challenge.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ChallengeMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[challenge.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ChallengeMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, challenge.FieldDescription)
}

// SetOutcome sets the "outcome" field.
func (m *ChallengeMutation) SetOutcome(b bool) {
	m.outcome = &b
}

// Outcome returns the value of the "outcome" field in the mutation.
func (m *ChallengeMutation) Outcome() (r bool, exists bool) {
	v := m.outcome
	if v == nil {
		return
	}
	return *v, true
}

// OldOutcome returns the old "outcome" field's value of the Challenge entity.
// If the Challenge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChallengeMutation) OldOutcome(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutcome is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutcome requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutcome: %w", err)
	}
	return oldValue.Outcome, nil
}

// ClearOutcome clears the value of the "outcome" field.
func (m *ChallengeMutation) ClearOutcome() {
	m.outcome = nil
	m.clearedFields[challenge.FieldOutcome] = struct{}{}
}

// OutcomeCleared returns if the "outcome" field was cleared in this mutation.
func (m *ChallengeMutation) OutcomeCleared() bool {
	_, ok := m.clearedFields[challenge.FieldOutcome]
	return ok
}

// ResetOutcome resets all changes to the "outcome" field.
func (m *ChallengeMutation) ResetOutcome() {
	m.outcome = nil
	delete(m.clearedFields, challenge.FieldOutcome)
}

// SetPublished sets the "published" field.
func (m *ChallengeMutation) SetPublished(b bool) {
	m.published = &b
}

// Published returns the value of the "published" field in the mutation.
func (m *ChallengeMutation) Published() (r bool, exists bool) {
	v := m.published
	if v == nil {
		return
	}
	return *v, true
}

// OldPublished returns the old "published" field's value of the Challenge entity.
// If the Challenge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChallengeMutation) OldPublished(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublished is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublished requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublished: %w", err)
	}
	return oldValue.Published, nil
}

// ResetPublished resets all changes to the "published" field.
func (m *ChallengeMutation) ResetPublished() {
	m.published = nil
}

// SetStartTime sets the "start_time" field.
func (m *ChallengeMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *ChallengeMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the Challenge entity.
// If the Challenge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChallengeMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *ChallengeMutation) ResetStartTime() {
	m.start_time = nil
}

// SetEndTime sets the "end_time" field.
func (m *ChallengeMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *ChallengeMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the Challenge entity.
// If the Challenge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChallengeMutation) OldEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *ChallengeMutation) ResetEndTime() {
	m.end_time = nil
}

// SetType sets the "type" field.
func (m *ChallengeMutation) SetType(c challenge.Type) {
	m._type = &c
}

// GetType returns the value of the "type" field in the mutation.
func (m *ChallengeMutation) GetType() (r challenge.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Challenge entity.
// If the Challenge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChallengeMutation) OldType(ctx context.Context) (v challenge.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ChallengeMutation) ResetType() {
	m._type = nil
}

// AddPredictionIDs adds the "predictions" edge to the Prediction entity by ids.
func (m *ChallengeMutation) AddPredictionIDs(ids ...uuid.UUID) {
	if m.predictions == nil {
		m.predictions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.predictions[ids[i]] = struct{}{}
	}
}

// ClearPredictions clears the "predictions" edge to the Prediction entity.
func (m *ChallengeMutation) ClearPredictions() {
	m.clearedpredictions = true
}

// PredictionsCleared reports if the "predictions" edge to the Prediction entity was cleared.
func (m *ChallengeMutation) PredictionsCleared() bool {
	return m.clearedpredictions
}

// RemovePredictionIDs removes the "predictions" edge to the Prediction entity by IDs.
func (m *ChallengeMutation) RemovePredictionIDs(ids ...uuid.UUID) {
	if m.removedpredictions == nil {
		m.removedpredictions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.predictions, ids[i])
		m.removedpredictions[ids[i]] = struct{}{}
	}
}

// RemovedPredictions returns the removed IDs of the "predictions" edge to the Prediction entity.
func (m *ChallengeMutation) RemovedPredictionsIDs() (ids []uuid.UUID) {
	for id := range m.removedpredictions {
		ids = append(ids, id)
	}
	return
}

// PredictionsIDs returns the "predictions" edge IDs in the mutation.
func (m *ChallengeMutation) PredictionsIDs() (ids []uuid.UUID) {
	for id := range m.predictions {
		ids = append(ids, id)
	}
	return
}

// ResetPredictions resets all changes to the "predictions" edge.
func (m *ChallengeMutation) ResetPredictions() {
	m.predictions = nil
	m.clearedpredictions = false
	m.removedpredictions = nil
}

// AddProofIDs adds the "proofs" edge to the Proof entity by ids.
func (m *ChallengeMutation) AddProofIDs(ids ...uuid.UUID) {
	if m.proofs == nil {
		m.proofs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.proofs[ids[i]] = struct{}{}
	}
}

// ClearProofs clears the "proofs" edge to the Proof entity.
func (m *ChallengeMutation) ClearProofs() {
	m.clearedproofs = true
}

// ProofsCleared reports if the "proofs" edge to the Proof entity was cleared.
func (m *ChallengeMutation) ProofsCleared() bool {
	return m.clearedproofs
}

// RemoveProofIDs removes the "proofs" edge to the Proof entity by IDs.
func (m *ChallengeMutation) RemoveProofIDs(ids ...uuid.UUID) {
	if m.removedproofs == nil {
		m.removedproofs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.proofs, ids[i])
		m.removedproofs[ids[i]] = struct{}{}
	}
}

// RemovedProofs returns the removed IDs of the "proofs" edge to the Proof entity.
func (m *ChallengeMutation) RemovedProofsIDs() (ids []uuid.UUID) {
	for id := range m.removedproofs {
		ids = append(ids, id)
	}
	return
}

// ProofsIDs returns the "proofs" edge IDs in the mutation.
func (m *ChallengeMutation) ProofsIDs() (ids []uuid.UUID) {
	for id := range m.proofs {
		ids = append(ids, id)
	}
	return
}

// ResetProofs resets all changes to the "proofs" edge.
func (m *ChallengeMutation) ResetProofs() {
	m.proofs = nil
	m.clearedproofs = false
	m.removedproofs = nil
}

// SetAuthorID sets the "author" edge to the User entity by id.
func (m *ChallengeMutation) SetAuthorID(id uuid.UUID) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *ChallengeMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *ChallengeMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *ChallengeMutation) AuthorID() (id uuid.UUID, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *ChallengeMutation) AuthorIDs() (ids []uuid.UUID) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *ChallengeMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// Where appends a list predicates to the ChallengeMutation builder.
func (m *ChallengeMutation) Where(ps ...predicate.Challenge) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ChallengeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Challenge).
func (m *ChallengeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChallengeMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.create_time != nil {
		fields = append(fields, challenge.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, challenge.FieldUpdateTime)
	}
	if m.content != nil {
		fields = append(fields, challenge.FieldContent)
	}
	if m.description != nil {
		fields = append(fields, challenge.FieldDescription)
	}
	if m.outcome != nil {
		fields = append(fields, challenge.FieldOutcome)
	}
	if m.published != nil {
		fields = append(fields, challenge.FieldPublished)
	}
	if m.start_time != nil {
		fields = append(fields, challenge.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, challenge.FieldEndTime)
	}
	if m._type != nil {
		fields = append(fields, challenge.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChallengeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case challenge.FieldCreateTime:
		return m.CreateTime()
	case challenge.FieldUpdateTime:
		return m.UpdateTime()
	case challenge.FieldContent:
		return m.Content()
	case challenge.FieldDescription:
		return m.Description()
	case challenge.FieldOutcome:
		return m.Outcome()
	case challenge.FieldPublished:
		return m.Published()
	case challenge.FieldStartTime:
		return m.StartTime()
	case challenge.FieldEndTime:
		return m.EndTime()
	case challenge.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChallengeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case challenge.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case challenge.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case challenge.FieldContent:
		return m.OldContent(ctx)
	case challenge.FieldDescription:
		return m.OldDescription(ctx)
	case challenge.FieldOutcome:
		return m.OldOutcome(ctx)
	case challenge.FieldPublished:
		return m.OldPublished(ctx)
	case challenge.FieldStartTime:
		return m.OldStartTime(ctx)
	case challenge.FieldEndTime:
		return m.OldEndTime(ctx)
	case challenge.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Challenge field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChallengeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case challenge.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case challenge.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case challenge.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case challenge.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case challenge.FieldOutcome:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutcome(v)
		return nil
	case challenge.FieldPublished:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublished(v)
		return nil
	case challenge.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case challenge.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case challenge.FieldType:
		v, ok := value.(challenge.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Challenge field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChallengeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChallengeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChallengeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Challenge numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChallengeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(challenge.FieldDescription) {
		fields = append(fields, challenge.FieldDescription)
	}
	if m.FieldCleared(challenge.FieldOutcome) {
		fields = append(fields, challenge.FieldOutcome)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChallengeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChallengeMutation) ClearField(name string) error {
	switch name {
	case challenge.FieldDescription:
		m.ClearDescription()
		return nil
	case challenge.FieldOutcome:
		m.ClearOutcome()
		return nil
	}
	return fmt.Errorf("unknown Challenge nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChallengeMutation) ResetField(name string) error {
	switch name {
	case challenge.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case challenge.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case challenge.FieldContent:
		m.ResetContent()
		return nil
	case challenge.FieldDescription:
		m.ResetDescription()
		return nil
	case challenge.FieldOutcome:
		m.ResetOutcome()
		return nil
	case challenge.FieldPublished:
		m.ResetPublished()
		return nil
	case challenge.FieldStartTime:
		m.ResetStartTime()
		return nil
	case challenge.FieldEndTime:
		m.ResetEndTime()
		return nil
	case challenge.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Challenge field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChallengeMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.predictions != nil {
		edges = append(edges, challenge.EdgePredictions)
	}
	if m.proofs != nil {
		edges = append(edges, challenge.EdgeProofs)
	}
	if m.author != nil {
		edges = append(edges, challenge.EdgeAuthor)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChallengeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case challenge.EdgePredictions:
		ids := make([]ent.Value, 0, len(m.predictions))
		for id := range m.predictions {
			ids = append(ids, id)
		}
		return ids
	case challenge.EdgeProofs:
		ids := make([]ent.Value, 0, len(m.proofs))
		for id := range m.proofs {
			ids = append(ids, id)
		}
		return ids
	case challenge.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChallengeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedpredictions != nil {
		edges = append(edges, challenge.EdgePredictions)
	}
	if m.removedproofs != nil {
		edges = append(edges, challenge.EdgeProofs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChallengeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case challenge.EdgePredictions:
		ids := make([]ent.Value, 0, len(m.removedpredictions))
		for id := range m.removedpredictions {
			ids = append(ids, id)
		}
		return ids
	case challenge.EdgeProofs:
		ids := make([]ent.Value, 0, len(m.removedproofs))
		for id := range m.removedproofs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChallengeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedpredictions {
		edges = append(edges, challenge.EdgePredictions)
	}
	if m.clearedproofs {
		edges = append(edges, challenge.EdgeProofs)
	}
	if m.clearedauthor {
		edges = append(edges, challenge.EdgeAuthor)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChallengeMutation) EdgeCleared(name string) bool {
	switch name {
	case challenge.EdgePredictions:
		return m.clearedpredictions
	case challenge.EdgeProofs:
		return m.clearedproofs
	case challenge.EdgeAuthor:
		return m.clearedauthor
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChallengeMutation) ClearEdge(name string) error {
	switch name {
	case challenge.EdgeAuthor:
		m.ClearAuthor()
		return nil
	}
	return fmt.Errorf("unknown Challenge unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChallengeMutation) ResetEdge(name string) error {
	switch name {
	case challenge.EdgePredictions:
		m.ResetPredictions()
		return nil
	case challenge.EdgeProofs:
		m.ResetProofs()
		return nil
	case challenge.EdgeAuthor:
		m.ResetAuthor()
		return nil
	}
	return fmt.Errorf("unknown Challenge edge %s", name)
}

// PredictionMutation represents an operation that mutates the Prediction nodes in the graph.
type PredictionMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	create_time      *time.Time
	update_time      *time.Time
	prognosis        *bool
	meta             *map[string]interface{}
	clearedFields    map[string]struct{}
	challenge        *uuid.UUID
	clearedchallenge bool
	user             *uuid.UUID
	cleareduser      bool
	done             bool
	oldValue         func(context.Context) (*Prediction, error)
	predicates       []predicate.Prediction
}

var _ ent.Mutation = (*PredictionMutation)(nil)

// predictionOption allows management of the mutation configuration using functional options.
type predictionOption func(*PredictionMutation)

// newPredictionMutation creates new mutation for the Prediction entity.
func newPredictionMutation(c config, op Op, opts ...predictionOption) *PredictionMutation {
	m := &PredictionMutation{
		config:        c,
		op:            op,
		typ:           TypePrediction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPredictionID sets the ID field of the mutation.
func withPredictionID(id uuid.UUID) predictionOption {
	return func(m *PredictionMutation) {
		var (
			err   error
			once  sync.Once
			value *Prediction
		)
		m.oldValue = func(ctx context.Context) (*Prediction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Prediction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPrediction sets the old Prediction of the mutation.
func withPrediction(node *Prediction) predictionOption {
	return func(m *PredictionMutation) {
		m.oldValue = func(context.Context) (*Prediction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PredictionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PredictionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Prediction entities.
func (m *PredictionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PredictionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PredictionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Prediction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *PredictionMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *PredictionMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Prediction entity.
// If the Prediction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PredictionMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *PredictionMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *PredictionMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *PredictionMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Prediction entity.
// If the Prediction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PredictionMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *PredictionMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetPrognosis sets the "prognosis" field.
func (m *PredictionMutation) SetPrognosis(b bool) {
	m.prognosis = &b
}

// Prognosis returns the value of the "prognosis" field in the mutation.
func (m *PredictionMutation) Prognosis() (r bool, exists bool) {
	v := m.prognosis
	if v == nil {
		return
	}
	return *v, true
}

// OldPrognosis returns the old "prognosis" field's value of the Prediction entity.
// If the Prediction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PredictionMutation) OldPrognosis(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrognosis is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrognosis requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrognosis: %w", err)
	}
	return oldValue.Prognosis, nil
}

// ResetPrognosis resets all changes to the "prognosis" field.
func (m *PredictionMutation) ResetPrognosis() {
	m.prognosis = nil
}

// SetMeta sets the "meta" field.
func (m *PredictionMutation) SetMeta(value map[string]interface{}) {
	m.meta = &value
}

// Meta returns the value of the "meta" field in the mutation.
func (m *PredictionMutation) Meta() (r map[string]interface{}, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the Prediction entity.
// If the Prediction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PredictionMutation) OldMeta(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ClearMeta clears the value of the "meta" field.
func (m *PredictionMutation) ClearMeta() {
	m.meta = nil
	m.clearedFields[prediction.FieldMeta] = struct{}{}
}

// MetaCleared returns if the "meta" field was cleared in this mutation.
func (m *PredictionMutation) MetaCleared() bool {
	_, ok := m.clearedFields[prediction.FieldMeta]
	return ok
}

// ResetMeta resets all changes to the "meta" field.
func (m *PredictionMutation) ResetMeta() {
	m.meta = nil
	delete(m.clearedFields, prediction.FieldMeta)
}

// SetChallengeID sets the "challenge" edge to the Challenge entity by id.
func (m *PredictionMutation) SetChallengeID(id uuid.UUID) {
	m.challenge = &id
}

// ClearChallenge clears the "challenge" edge to the Challenge entity.
func (m *PredictionMutation) ClearChallenge() {
	m.clearedchallenge = true
}

// ChallengeCleared reports if the "challenge" edge to the Challenge entity was cleared.
func (m *PredictionMutation) ChallengeCleared() bool {
	return m.clearedchallenge
}

// ChallengeID returns the "challenge" edge ID in the mutation.
func (m *PredictionMutation) ChallengeID() (id uuid.UUID, exists bool) {
	if m.challenge != nil {
		return *m.challenge, true
	}
	return
}

// ChallengeIDs returns the "challenge" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChallengeID instead. It exists only for internal usage by the builders.
func (m *PredictionMutation) ChallengeIDs() (ids []uuid.UUID) {
	if id := m.challenge; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChallenge resets all changes to the "challenge" edge.
func (m *PredictionMutation) ResetChallenge() {
	m.challenge = nil
	m.clearedchallenge = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *PredictionMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *PredictionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PredictionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *PredictionMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PredictionMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PredictionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the PredictionMutation builder.
func (m *PredictionMutation) Where(ps ...predicate.Prediction) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PredictionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Prediction).
func (m *PredictionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PredictionMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, prediction.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, prediction.FieldUpdateTime)
	}
	if m.prognosis != nil {
		fields = append(fields, prediction.FieldPrognosis)
	}
	if m.meta != nil {
		fields = append(fields, prediction.FieldMeta)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PredictionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case prediction.FieldCreateTime:
		return m.CreateTime()
	case prediction.FieldUpdateTime:
		return m.UpdateTime()
	case prediction.FieldPrognosis:
		return m.Prognosis()
	case prediction.FieldMeta:
		return m.Meta()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PredictionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case prediction.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case prediction.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case prediction.FieldPrognosis:
		return m.OldPrognosis(ctx)
	case prediction.FieldMeta:
		return m.OldMeta(ctx)
	}
	return nil, fmt.Errorf("unknown Prediction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PredictionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case prediction.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case prediction.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case prediction.FieldPrognosis:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrognosis(v)
		return nil
	case prediction.FieldMeta:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	}
	return fmt.Errorf("unknown Prediction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PredictionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PredictionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PredictionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Prediction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PredictionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(prediction.FieldMeta) {
		fields = append(fields, prediction.FieldMeta)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PredictionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PredictionMutation) ClearField(name string) error {
	switch name {
	case prediction.FieldMeta:
		m.ClearMeta()
		return nil
	}
	return fmt.Errorf("unknown Prediction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PredictionMutation) ResetField(name string) error {
	switch name {
	case prediction.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case prediction.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case prediction.FieldPrognosis:
		m.ResetPrognosis()
		return nil
	case prediction.FieldMeta:
		m.ResetMeta()
		return nil
	}
	return fmt.Errorf("unknown Prediction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PredictionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.challenge != nil {
		edges = append(edges, prediction.EdgeChallenge)
	}
	if m.user != nil {
		edges = append(edges, prediction.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PredictionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case prediction.EdgeChallenge:
		if id := m.challenge; id != nil {
			return []ent.Value{*id}
		}
	case prediction.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PredictionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PredictionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PredictionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedchallenge {
		edges = append(edges, prediction.EdgeChallenge)
	}
	if m.cleareduser {
		edges = append(edges, prediction.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PredictionMutation) EdgeCleared(name string) bool {
	switch name {
	case prediction.EdgeChallenge:
		return m.clearedchallenge
	case prediction.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PredictionMutation) ClearEdge(name string) error {
	switch name {
	case prediction.EdgeChallenge:
		m.ClearChallenge()
		return nil
	case prediction.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Prediction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PredictionMutation) ResetEdge(name string) error {
	switch name {
	case prediction.EdgeChallenge:
		m.ResetChallenge()
		return nil
	case prediction.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Prediction edge %s", name)
}

// ProofMutation represents an operation that mutates the Proof nodes in the graph.
type ProofMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	create_time      *time.Time
	update_time      *time.Time
	content          *string
	link             *string
	meta             *map[string]interface{}
	clearedFields    map[string]struct{}
	challenge        *uuid.UUID
	clearedchallenge bool
	done             bool
	oldValue         func(context.Context) (*Proof, error)
	predicates       []predicate.Proof
}

var _ ent.Mutation = (*ProofMutation)(nil)

// proofOption allows management of the mutation configuration using functional options.
type proofOption func(*ProofMutation)

// newProofMutation creates new mutation for the Proof entity.
func newProofMutation(c config, op Op, opts ...proofOption) *ProofMutation {
	m := &ProofMutation{
		config:        c,
		op:            op,
		typ:           TypeProof,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProofID sets the ID field of the mutation.
func withProofID(id uuid.UUID) proofOption {
	return func(m *ProofMutation) {
		var (
			err   error
			once  sync.Once
			value *Proof
		)
		m.oldValue = func(ctx context.Context) (*Proof, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Proof.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProof sets the old Proof of the mutation.
func withProof(node *Proof) proofOption {
	return func(m *ProofMutation) {
		m.oldValue = func(context.Context) (*Proof, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProofMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProofMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Proof entities.
func (m *ProofMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProofMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProofMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Proof.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ProofMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ProofMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Proof entity.
// If the Proof object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProofMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ProofMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ProofMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ProofMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Proof entity.
// If the Proof object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProofMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ProofMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetContent sets the "content" field.
func (m *ProofMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *ProofMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Proof entity.
// If the Proof object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProofMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *ProofMutation) ResetContent() {
	m.content = nil
}

// SetLink sets the "link" field.
func (m *ProofMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *ProofMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the Proof entity.
// If the Proof object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProofMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *ProofMutation) ResetLink() {
	m.link = nil
}

// SetMeta sets the "meta" field.
func (m *ProofMutation) SetMeta(value map[string]interface{}) {
	m.meta = &value
}

// Meta returns the value of the "meta" field in the mutation.
func (m *ProofMutation) Meta() (r map[string]interface{}, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the Proof entity.
// If the Proof object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProofMutation) OldMeta(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ClearMeta clears the value of the "meta" field.
func (m *ProofMutation) ClearMeta() {
	m.meta = nil
	m.clearedFields[proof.FieldMeta] = struct{}{}
}

// MetaCleared returns if the "meta" field was cleared in this mutation.
func (m *ProofMutation) MetaCleared() bool {
	_, ok := m.clearedFields[proof.FieldMeta]
	return ok
}

// ResetMeta resets all changes to the "meta" field.
func (m *ProofMutation) ResetMeta() {
	m.meta = nil
	delete(m.clearedFields, proof.FieldMeta)
}

// SetChallengeID sets the "challenge" edge to the Challenge entity by id.
func (m *ProofMutation) SetChallengeID(id uuid.UUID) {
	m.challenge = &id
}

// ClearChallenge clears the "challenge" edge to the Challenge entity.
func (m *ProofMutation) ClearChallenge() {
	m.clearedchallenge = true
}

// ChallengeCleared reports if the "challenge" edge to the Challenge entity was cleared.
func (m *ProofMutation) ChallengeCleared() bool {
	return m.clearedchallenge
}

// ChallengeID returns the "challenge" edge ID in the mutation.
func (m *ProofMutation) ChallengeID() (id uuid.UUID, exists bool) {
	if m.challenge != nil {
		return *m.challenge, true
	}
	return
}

// ChallengeIDs returns the "challenge" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChallengeID instead. It exists only for internal usage by the builders.
func (m *ProofMutation) ChallengeIDs() (ids []uuid.UUID) {
	if id := m.challenge; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChallenge resets all changes to the "challenge" edge.
func (m *ProofMutation) ResetChallenge() {
	m.challenge = nil
	m.clearedchallenge = false
}

// Where appends a list predicates to the ProofMutation builder.
func (m *ProofMutation) Where(ps ...predicate.Proof) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProofMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Proof).
func (m *ProofMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProofMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, proof.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, proof.FieldUpdateTime)
	}
	if m.content != nil {
		fields = append(fields, proof.FieldContent)
	}
	if m.link != nil {
		fields = append(fields, proof.FieldLink)
	}
	if m.meta != nil {
		fields = append(fields, proof.FieldMeta)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProofMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case proof.FieldCreateTime:
		return m.CreateTime()
	case proof.FieldUpdateTime:
		return m.UpdateTime()
	case proof.FieldContent:
		return m.Content()
	case proof.FieldLink:
		return m.Link()
	case proof.FieldMeta:
		return m.Meta()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProofMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case proof.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case proof.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case proof.FieldContent:
		return m.OldContent(ctx)
	case proof.FieldLink:
		return m.OldLink(ctx)
	case proof.FieldMeta:
		return m.OldMeta(ctx)
	}
	return nil, fmt.Errorf("unknown Proof field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProofMutation) SetField(name string, value ent.Value) error {
	switch name {
	case proof.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case proof.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case proof.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case proof.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case proof.FieldMeta:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	}
	return fmt.Errorf("unknown Proof field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProofMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProofMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProofMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Proof numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProofMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(proof.FieldMeta) {
		fields = append(fields, proof.FieldMeta)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProofMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProofMutation) ClearField(name string) error {
	switch name {
	case proof.FieldMeta:
		m.ClearMeta()
		return nil
	}
	return fmt.Errorf("unknown Proof nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProofMutation) ResetField(name string) error {
	switch name {
	case proof.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case proof.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case proof.FieldContent:
		m.ResetContent()
		return nil
	case proof.FieldLink:
		m.ResetLink()
		return nil
	case proof.FieldMeta:
		m.ResetMeta()
		return nil
	}
	return fmt.Errorf("unknown Proof field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProofMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.challenge != nil {
		edges = append(edges, proof.EdgeChallenge)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProofMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case proof.EdgeChallenge:
		if id := m.challenge; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProofMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProofMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProofMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchallenge {
		edges = append(edges, proof.EdgeChallenge)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProofMutation) EdgeCleared(name string) bool {
	switch name {
	case proof.EdgeChallenge:
		return m.clearedchallenge
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProofMutation) ClearEdge(name string) error {
	switch name {
	case proof.EdgeChallenge:
		m.ClearChallenge()
		return nil
	}
	return fmt.Errorf("unknown Proof unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProofMutation) ResetEdge(name string) error {
	switch name {
	case proof.EdgeChallenge:
		m.ResetChallenge()
		return nil
	}
	return fmt.Errorf("unknown Proof edge %s", name)
}

// TestMutation represents an operation that mutates the Test nodes in the graph.
type TestMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	create_time         *time.Time
	update_time         *time.Time
	code                *string
	content             *string
	description         *string
	published           *bool
	clearedFields       map[string]struct{}
	translations        map[uuid.UUID]struct{}
	removedtranslations map[uuid.UUID]struct{}
	clearedtranslations bool
	author              *uuid.UUID
	clearedauthor       bool
	done                bool
	oldValue            func(context.Context) (*Test, error)
	predicates          []predicate.Test
}

var _ ent.Mutation = (*TestMutation)(nil)

// testOption allows management of the mutation configuration using functional options.
type testOption func(*TestMutation)

// newTestMutation creates new mutation for the Test entity.
func newTestMutation(c config, op Op, opts ...testOption) *TestMutation {
	m := &TestMutation{
		config:        c,
		op:            op,
		typ:           TypeTest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTestID sets the ID field of the mutation.
func withTestID(id uuid.UUID) testOption {
	return func(m *TestMutation) {
		var (
			err   error
			once  sync.Once
			value *Test
		)
		m.oldValue = func(ctx context.Context) (*Test, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Test.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTest sets the old Test of the mutation.
func withTest(node *Test) testOption {
	return func(m *TestMutation) {
		m.oldValue = func(context.Context) (*Test, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Test entities.
func (m *TestMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TestMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TestMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Test.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *TestMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TestMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Test entity.
// If the Test object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TestMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *TestMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *TestMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Test entity.
// If the Test object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *TestMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetCode sets the "code" field.
func (m *TestMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *TestMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Test entity.
// If the Test object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *TestMutation) ResetCode() {
	m.code = nil
}

// SetContent sets the "content" field.
func (m *TestMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *TestMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Test entity.
// If the Test object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *TestMutation) ResetContent() {
	m.content = nil
}

// SetDescription sets the "description" field.
func (m *TestMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TestMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Test entity.
// If the Test object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TestMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[test.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TestMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[test.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TestMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, test.FieldDescription)
}

// SetPublished sets the "published" field.
func (m *TestMutation) SetPublished(b bool) {
	m.published = &b
}

// Published returns the value of the "published" field in the mutation.
func (m *TestMutation) Published() (r bool, exists bool) {
	v := m.published
	if v == nil {
		return
	}
	return *v, true
}

// OldPublished returns the old "published" field's value of the Test entity.
// If the Test object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestMutation) OldPublished(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublished is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublished requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublished: %w", err)
	}
	return oldValue.Published, nil
}

// ResetPublished resets all changes to the "published" field.
func (m *TestMutation) ResetPublished() {
	m.published = nil
}

// AddTranslationIDs adds the "translations" edge to the TestTranslation entity by ids.
func (m *TestMutation) AddTranslationIDs(ids ...uuid.UUID) {
	if m.translations == nil {
		m.translations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.translations[ids[i]] = struct{}{}
	}
}

// ClearTranslations clears the "translations" edge to the TestTranslation entity.
func (m *TestMutation) ClearTranslations() {
	m.clearedtranslations = true
}

// TranslationsCleared reports if the "translations" edge to the TestTranslation entity was cleared.
func (m *TestMutation) TranslationsCleared() bool {
	return m.clearedtranslations
}

// RemoveTranslationIDs removes the "translations" edge to the TestTranslation entity by IDs.
func (m *TestMutation) RemoveTranslationIDs(ids ...uuid.UUID) {
	if m.removedtranslations == nil {
		m.removedtranslations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.translations, ids[i])
		m.removedtranslations[ids[i]] = struct{}{}
	}
}

// RemovedTranslations returns the removed IDs of the "translations" edge to the TestTranslation entity.
func (m *TestMutation) RemovedTranslationsIDs() (ids []uuid.UUID) {
	for id := range m.removedtranslations {
		ids = append(ids, id)
	}
	return
}

// TranslationsIDs returns the "translations" edge IDs in the mutation.
func (m *TestMutation) TranslationsIDs() (ids []uuid.UUID) {
	for id := range m.translations {
		ids = append(ids, id)
	}
	return
}

// ResetTranslations resets all changes to the "translations" edge.
func (m *TestMutation) ResetTranslations() {
	m.translations = nil
	m.clearedtranslations = false
	m.removedtranslations = nil
}

// SetAuthorID sets the "author" edge to the User entity by id.
func (m *TestMutation) SetAuthorID(id uuid.UUID) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *TestMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *TestMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *TestMutation) AuthorID() (id uuid.UUID, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *TestMutation) AuthorIDs() (ids []uuid.UUID) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *TestMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// Where appends a list predicates to the TestMutation builder.
func (m *TestMutation) Where(ps ...predicate.Test) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TestMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Test).
func (m *TestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TestMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, test.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, test.FieldUpdateTime)
	}
	if m.code != nil {
		fields = append(fields, test.FieldCode)
	}
	if m.content != nil {
		fields = append(fields, test.FieldContent)
	}
	if m.description != nil {
		fields = append(fields, test.FieldDescription)
	}
	if m.published != nil {
		fields = append(fields, test.FieldPublished)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case test.FieldCreateTime:
		return m.CreateTime()
	case test.FieldUpdateTime:
		return m.UpdateTime()
	case test.FieldCode:
		return m.Code()
	case test.FieldContent:
		return m.Content()
	case test.FieldDescription:
		return m.Description()
	case test.FieldPublished:
		return m.Published()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case test.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case test.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case test.FieldCode:
		return m.OldCode(ctx)
	case test.FieldContent:
		return m.OldContent(ctx)
	case test.FieldDescription:
		return m.OldDescription(ctx)
	case test.FieldPublished:
		return m.OldPublished(ctx)
	}
	return nil, fmt.Errorf("unknown Test field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case test.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case test.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case test.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case test.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case test.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case test.FieldPublished:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublished(v)
		return nil
	}
	return fmt.Errorf("unknown Test field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TestMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TestMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Test numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TestMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(test.FieldDescription) {
		fields = append(fields, test.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TestMutation) ClearField(name string) error {
	switch name {
	case test.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Test nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TestMutation) ResetField(name string) error {
	switch name {
	case test.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case test.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case test.FieldCode:
		m.ResetCode()
		return nil
	case test.FieldContent:
		m.ResetContent()
		return nil
	case test.FieldDescription:
		m.ResetDescription()
		return nil
	case test.FieldPublished:
		m.ResetPublished()
		return nil
	}
	return fmt.Errorf("unknown Test field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TestMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.translations != nil {
		edges = append(edges, test.EdgeTranslations)
	}
	if m.author != nil {
		edges = append(edges, test.EdgeAuthor)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case test.EdgeTranslations:
		ids := make([]ent.Value, 0, len(m.translations))
		for id := range m.translations {
			ids = append(ids, id)
		}
		return ids
	case test.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtranslations != nil {
		edges = append(edges, test.EdgeTranslations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TestMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case test.EdgeTranslations:
		ids := make([]ent.Value, 0, len(m.removedtranslations))
		for id := range m.removedtranslations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtranslations {
		edges = append(edges, test.EdgeTranslations)
	}
	if m.clearedauthor {
		edges = append(edges, test.EdgeAuthor)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TestMutation) EdgeCleared(name string) bool {
	switch name {
	case test.EdgeTranslations:
		return m.clearedtranslations
	case test.EdgeAuthor:
		return m.clearedauthor
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TestMutation) ClearEdge(name string) error {
	switch name {
	case test.EdgeAuthor:
		m.ClearAuthor()
		return nil
	}
	return fmt.Errorf("unknown Test unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TestMutation) ResetEdge(name string) error {
	switch name {
	case test.EdgeTranslations:
		m.ResetTranslations()
		return nil
	case test.EdgeAuthor:
		m.ResetAuthor()
		return nil
	}
	return fmt.Errorf("unknown Test edge %s", name)
}

// TestTranslationMutation represents an operation that mutates the TestTranslation nodes in the graph.
type TestTranslationMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	create_time   *time.Time
	update_time   *time.Time
	title         *string
	description   *string
	instruction   *string
	locale        *testtranslation.Locale
	clearedFields map[string]struct{}
	test          *uuid.UUID
	clearedtest   bool
	done          bool
	oldValue      func(context.Context) (*TestTranslation, error)
	predicates    []predicate.TestTranslation
}

var _ ent.Mutation = (*TestTranslationMutation)(nil)

// testtranslationOption allows management of the mutation configuration using functional options.
type testtranslationOption func(*TestTranslationMutation)

// newTestTranslationMutation creates new mutation for the TestTranslation entity.
func newTestTranslationMutation(c config, op Op, opts ...testtranslationOption) *TestTranslationMutation {
	m := &TestTranslationMutation{
		config:        c,
		op:            op,
		typ:           TypeTestTranslation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTestTranslationID sets the ID field of the mutation.
func withTestTranslationID(id uuid.UUID) testtranslationOption {
	return func(m *TestTranslationMutation) {
		var (
			err   error
			once  sync.Once
			value *TestTranslation
		)
		m.oldValue = func(ctx context.Context) (*TestTranslation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TestTranslation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTestTranslation sets the old TestTranslation of the mutation.
func withTestTranslation(node *TestTranslation) testtranslationOption {
	return func(m *TestTranslationMutation) {
		m.oldValue = func(context.Context) (*TestTranslation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TestTranslationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TestTranslationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TestTranslation entities.
func (m *TestTranslationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TestTranslationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TestTranslationMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TestTranslation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *TestTranslationMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TestTranslationMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the TestTranslation entity.
// If the TestTranslation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestTranslationMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TestTranslationMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *TestTranslationMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *TestTranslationMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the TestTranslation entity.
// If the TestTranslation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestTranslationMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *TestTranslationMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetTitle sets the "title" field.
func (m *TestTranslationMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TestTranslationMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the TestTranslation entity.
// If the TestTranslation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestTranslationMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TestTranslationMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *TestTranslationMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TestTranslationMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the TestTranslation entity.
// If the TestTranslation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestTranslationMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TestTranslationMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[testtranslation.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TestTranslationMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[testtranslation.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TestTranslationMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, testtranslation.FieldDescription)
}

// SetInstruction sets the "instruction" field.
func (m *TestTranslationMutation) SetInstruction(s string) {
	m.instruction = &s
}

// Instruction returns the value of the "instruction" field in the mutation.
func (m *TestTranslationMutation) Instruction() (r string, exists bool) {
	v := m.instruction
	if v == nil {
		return
	}
	return *v, true
}

// OldInstruction returns the old "instruction" field's value of the TestTranslation entity.
// If the TestTranslation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestTranslationMutation) OldInstruction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstruction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstruction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstruction: %w", err)
	}
	return oldValue.Instruction, nil
}

// ClearInstruction clears the value of the "instruction" field.
func (m *TestTranslationMutation) ClearInstruction() {
	m.instruction = nil
	m.clearedFields[testtranslation.FieldInstruction] = struct{}{}
}

// InstructionCleared returns if the "instruction" field was cleared in this mutation.
func (m *TestTranslationMutation) InstructionCleared() bool {
	_, ok := m.clearedFields[testtranslation.FieldInstruction]
	return ok
}

// ResetInstruction resets all changes to the "instruction" field.
func (m *TestTranslationMutation) ResetInstruction() {
	m.instruction = nil
	delete(m.clearedFields, testtranslation.FieldInstruction)
}

// SetLocale sets the "locale" field.
func (m *TestTranslationMutation) SetLocale(t testtranslation.Locale) {
	m.locale = &t
}

// Locale returns the value of the "locale" field in the mutation.
func (m *TestTranslationMutation) Locale() (r testtranslation.Locale, exists bool) {
	v := m.locale
	if v == nil {
		return
	}
	return *v, true
}

// OldLocale returns the old "locale" field's value of the TestTranslation entity.
// If the TestTranslation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestTranslationMutation) OldLocale(ctx context.Context) (v testtranslation.Locale, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocale: %w", err)
	}
	return oldValue.Locale, nil
}

// ResetLocale resets all changes to the "locale" field.
func (m *TestTranslationMutation) ResetLocale() {
	m.locale = nil
}

// SetTestID sets the "test" edge to the Test entity by id.
func (m *TestTranslationMutation) SetTestID(id uuid.UUID) {
	m.test = &id
}

// ClearTest clears the "test" edge to the Test entity.
func (m *TestTranslationMutation) ClearTest() {
	m.clearedtest = true
}

// TestCleared reports if the "test" edge to the Test entity was cleared.
func (m *TestTranslationMutation) TestCleared() bool {
	return m.clearedtest
}

// TestID returns the "test" edge ID in the mutation.
func (m *TestTranslationMutation) TestID() (id uuid.UUID, exists bool) {
	if m.test != nil {
		return *m.test, true
	}
	return
}

// TestIDs returns the "test" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TestID instead. It exists only for internal usage by the builders.
func (m *TestTranslationMutation) TestIDs() (ids []uuid.UUID) {
	if id := m.test; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTest resets all changes to the "test" edge.
func (m *TestTranslationMutation) ResetTest() {
	m.test = nil
	m.clearedtest = false
}

// Where appends a list predicates to the TestTranslationMutation builder.
func (m *TestTranslationMutation) Where(ps ...predicate.TestTranslation) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TestTranslationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TestTranslation).
func (m *TestTranslationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TestTranslationMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, testtranslation.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, testtranslation.FieldUpdateTime)
	}
	if m.title != nil {
		fields = append(fields, testtranslation.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, testtranslation.FieldDescription)
	}
	if m.instruction != nil {
		fields = append(fields, testtranslation.FieldInstruction)
	}
	if m.locale != nil {
		fields = append(fields, testtranslation.FieldLocale)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TestTranslationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case testtranslation.FieldCreateTime:
		return m.CreateTime()
	case testtranslation.FieldUpdateTime:
		return m.UpdateTime()
	case testtranslation.FieldTitle:
		return m.Title()
	case testtranslation.FieldDescription:
		return m.Description()
	case testtranslation.FieldInstruction:
		return m.Instruction()
	case testtranslation.FieldLocale:
		return m.Locale()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TestTranslationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case testtranslation.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case testtranslation.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case testtranslation.FieldTitle:
		return m.OldTitle(ctx)
	case testtranslation.FieldDescription:
		return m.OldDescription(ctx)
	case testtranslation.FieldInstruction:
		return m.OldInstruction(ctx)
	case testtranslation.FieldLocale:
		return m.OldLocale(ctx)
	}
	return nil, fmt.Errorf("unknown TestTranslation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestTranslationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case testtranslation.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case testtranslation.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case testtranslation.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case testtranslation.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case testtranslation.FieldInstruction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstruction(v)
		return nil
	case testtranslation.FieldLocale:
		v, ok := value.(testtranslation.Locale)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocale(v)
		return nil
	}
	return fmt.Errorf("unknown TestTranslation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TestTranslationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TestTranslationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestTranslationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TestTranslation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TestTranslationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(testtranslation.FieldDescription) {
		fields = append(fields, testtranslation.FieldDescription)
	}
	if m.FieldCleared(testtranslation.FieldInstruction) {
		fields = append(fields, testtranslation.FieldInstruction)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TestTranslationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TestTranslationMutation) ClearField(name string) error {
	switch name {
	case testtranslation.FieldDescription:
		m.ClearDescription()
		return nil
	case testtranslation.FieldInstruction:
		m.ClearInstruction()
		return nil
	}
	return fmt.Errorf("unknown TestTranslation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TestTranslationMutation) ResetField(name string) error {
	switch name {
	case testtranslation.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case testtranslation.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case testtranslation.FieldTitle:
		m.ResetTitle()
		return nil
	case testtranslation.FieldDescription:
		m.ResetDescription()
		return nil
	case testtranslation.FieldInstruction:
		m.ResetInstruction()
		return nil
	case testtranslation.FieldLocale:
		m.ResetLocale()
		return nil
	}
	return fmt.Errorf("unknown TestTranslation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TestTranslationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.test != nil {
		edges = append(edges, testtranslation.EdgeTest)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TestTranslationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case testtranslation.EdgeTest:
		if id := m.test; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TestTranslationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TestTranslationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TestTranslationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtest {
		edges = append(edges, testtranslation.EdgeTest)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TestTranslationMutation) EdgeCleared(name string) bool {
	switch name {
	case testtranslation.EdgeTest:
		return m.clearedtest
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TestTranslationMutation) ClearEdge(name string) error {
	switch name {
	case testtranslation.EdgeTest:
		m.ClearTest()
		return nil
	}
	return fmt.Errorf("unknown TestTranslation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TestTranslationMutation) ResetEdge(name string) error {
	switch name {
	case testtranslation.EdgeTest:
		m.ResetTest()
		return nil
	}
	return fmt.Errorf("unknown TestTranslation edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	create_time        *time.Time
	update_time        *time.Time
	name               *string
	email              *string
	picture            *string
	admin              *bool
	password_hash      *string
	locale             *user.Locale
	meta               *map[string]interface{}
	clearedFields      map[string]struct{}
	predictions        map[uuid.UUID]struct{}
	removedpredictions map[uuid.UUID]struct{}
	clearedpredictions bool
	sessions           map[int]struct{}
	removedsessions    map[int]struct{}
	clearedsessions    bool
	badges             map[int]struct{}
	removedbadges      map[int]struct{}
	clearedbadges      bool
	challenges         map[uuid.UUID]struct{}
	removedchallenges  map[uuid.UUID]struct{}
	clearedchallenges  bool
	tests              map[uuid.UUID]struct{}
	removedtests       map[uuid.UUID]struct{}
	clearedtests       bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPicture sets the "picture" field.
func (m *UserMutation) SetPicture(s string) {
	m.picture = &s
}

// Picture returns the value of the "picture" field in the mutation.
func (m *UserMutation) Picture() (r string, exists bool) {
	v := m.picture
	if v == nil {
		return
	}
	return *v, true
}

// OldPicture returns the old "picture" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPicture(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPicture is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPicture requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPicture: %w", err)
	}
	return oldValue.Picture, nil
}

// ClearPicture clears the value of the "picture" field.
func (m *UserMutation) ClearPicture() {
	m.picture = nil
	m.clearedFields[user.FieldPicture] = struct{}{}
}

// PictureCleared returns if the "picture" field was cleared in this mutation.
func (m *UserMutation) PictureCleared() bool {
	_, ok := m.clearedFields[user.FieldPicture]
	return ok
}

// ResetPicture resets all changes to the "picture" field.
func (m *UserMutation) ResetPicture() {
	m.picture = nil
	delete(m.clearedFields, user.FieldPicture)
}

// SetAdmin sets the "admin" field.
func (m *UserMutation) SetAdmin(b bool) {
	m.admin = &b
}

// Admin returns the value of the "admin" field in the mutation.
func (m *UserMutation) Admin() (r bool, exists bool) {
	v := m.admin
	if v == nil {
		return
	}
	return *v, true
}

// OldAdmin returns the old "admin" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAdmin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdmin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdmin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdmin: %w", err)
	}
	return oldValue.Admin, nil
}

// ResetAdmin resets all changes to the "admin" field.
func (m *UserMutation) ResetAdmin() {
	m.admin = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *UserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *UserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// SetLocale sets the "locale" field.
func (m *UserMutation) SetLocale(u user.Locale) {
	m.locale = &u
}

// Locale returns the value of the "locale" field in the mutation.
func (m *UserMutation) Locale() (r user.Locale, exists bool) {
	v := m.locale
	if v == nil {
		return
	}
	return *v, true
}

// OldLocale returns the old "locale" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLocale(ctx context.Context) (v user.Locale, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocale: %w", err)
	}
	return oldValue.Locale, nil
}

// ResetLocale resets all changes to the "locale" field.
func (m *UserMutation) ResetLocale() {
	m.locale = nil
}

// SetMeta sets the "meta" field.
func (m *UserMutation) SetMeta(value map[string]interface{}) {
	m.meta = &value
}

// Meta returns the value of the "meta" field in the mutation.
func (m *UserMutation) Meta() (r map[string]interface{}, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMeta(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ClearMeta clears the value of the "meta" field.
func (m *UserMutation) ClearMeta() {
	m.meta = nil
	m.clearedFields[user.FieldMeta] = struct{}{}
}

// MetaCleared returns if the "meta" field was cleared in this mutation.
func (m *UserMutation) MetaCleared() bool {
	_, ok := m.clearedFields[user.FieldMeta]
	return ok
}

// ResetMeta resets all changes to the "meta" field.
func (m *UserMutation) ResetMeta() {
	m.meta = nil
	delete(m.clearedFields, user.FieldMeta)
}

// AddPredictionIDs adds the "predictions" edge to the Prediction entity by ids.
func (m *UserMutation) AddPredictionIDs(ids ...uuid.UUID) {
	if m.predictions == nil {
		m.predictions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.predictions[ids[i]] = struct{}{}
	}
}

// ClearPredictions clears the "predictions" edge to the Prediction entity.
func (m *UserMutation) ClearPredictions() {
	m.clearedpredictions = true
}

// PredictionsCleared reports if the "predictions" edge to the Prediction entity was cleared.
func (m *UserMutation) PredictionsCleared() bool {
	return m.clearedpredictions
}

// RemovePredictionIDs removes the "predictions" edge to the Prediction entity by IDs.
func (m *UserMutation) RemovePredictionIDs(ids ...uuid.UUID) {
	if m.removedpredictions == nil {
		m.removedpredictions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.predictions, ids[i])
		m.removedpredictions[ids[i]] = struct{}{}
	}
}

// RemovedPredictions returns the removed IDs of the "predictions" edge to the Prediction entity.
func (m *UserMutation) RemovedPredictionsIDs() (ids []uuid.UUID) {
	for id := range m.removedpredictions {
		ids = append(ids, id)
	}
	return
}

// PredictionsIDs returns the "predictions" edge IDs in the mutation.
func (m *UserMutation) PredictionsIDs() (ids []uuid.UUID) {
	for id := range m.predictions {
		ids = append(ids, id)
	}
	return
}

// ResetPredictions resets all changes to the "predictions" edge.
func (m *UserMutation) ResetPredictions() {
	m.predictions = nil
	m.clearedpredictions = false
	m.removedpredictions = nil
}

// AddSessionIDs adds the "sessions" edge to the UserSession entity by ids.
func (m *UserMutation) AddSessionIDs(ids ...int) {
	if m.sessions == nil {
		m.sessions = make(map[int]struct{})
	}
	for i := range ids {
		m.sessions[ids[i]] = struct{}{}
	}
}

// ClearSessions clears the "sessions" edge to the UserSession entity.
func (m *UserMutation) ClearSessions() {
	m.clearedsessions = true
}

// SessionsCleared reports if the "sessions" edge to the UserSession entity was cleared.
func (m *UserMutation) SessionsCleared() bool {
	return m.clearedsessions
}

// RemoveSessionIDs removes the "sessions" edge to the UserSession entity by IDs.
func (m *UserMutation) RemoveSessionIDs(ids ...int) {
	if m.removedsessions == nil {
		m.removedsessions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sessions, ids[i])
		m.removedsessions[ids[i]] = struct{}{}
	}
}

// RemovedSessions returns the removed IDs of the "sessions" edge to the UserSession entity.
func (m *UserMutation) RemovedSessionsIDs() (ids []int) {
	for id := range m.removedsessions {
		ids = append(ids, id)
	}
	return
}

// SessionsIDs returns the "sessions" edge IDs in the mutation.
func (m *UserMutation) SessionsIDs() (ids []int) {
	for id := range m.sessions {
		ids = append(ids, id)
	}
	return
}

// ResetSessions resets all changes to the "sessions" edge.
func (m *UserMutation) ResetSessions() {
	m.sessions = nil
	m.clearedsessions = false
	m.removedsessions = nil
}

// AddBadgeIDs adds the "badges" edge to the Badge entity by ids.
func (m *UserMutation) AddBadgeIDs(ids ...int) {
	if m.badges == nil {
		m.badges = make(map[int]struct{})
	}
	for i := range ids {
		m.badges[ids[i]] = struct{}{}
	}
}

// ClearBadges clears the "badges" edge to the Badge entity.
func (m *UserMutation) ClearBadges() {
	m.clearedbadges = true
}

// BadgesCleared reports if the "badges" edge to the Badge entity was cleared.
func (m *UserMutation) BadgesCleared() bool {
	return m.clearedbadges
}

// RemoveBadgeIDs removes the "badges" edge to the Badge entity by IDs.
func (m *UserMutation) RemoveBadgeIDs(ids ...int) {
	if m.removedbadges == nil {
		m.removedbadges = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.badges, ids[i])
		m.removedbadges[ids[i]] = struct{}{}
	}
}

// RemovedBadges returns the removed IDs of the "badges" edge to the Badge entity.
func (m *UserMutation) RemovedBadgesIDs() (ids []int) {
	for id := range m.removedbadges {
		ids = append(ids, id)
	}
	return
}

// BadgesIDs returns the "badges" edge IDs in the mutation.
func (m *UserMutation) BadgesIDs() (ids []int) {
	for id := range m.badges {
		ids = append(ids, id)
	}
	return
}

// ResetBadges resets all changes to the "badges" edge.
func (m *UserMutation) ResetBadges() {
	m.badges = nil
	m.clearedbadges = false
	m.removedbadges = nil
}

// AddChallengeIDs adds the "challenges" edge to the Challenge entity by ids.
func (m *UserMutation) AddChallengeIDs(ids ...uuid.UUID) {
	if m.challenges == nil {
		m.challenges = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.challenges[ids[i]] = struct{}{}
	}
}

// ClearChallenges clears the "challenges" edge to the Challenge entity.
func (m *UserMutation) ClearChallenges() {
	m.clearedchallenges = true
}

// ChallengesCleared reports if the "challenges" edge to the Challenge entity was cleared.
func (m *UserMutation) ChallengesCleared() bool {
	return m.clearedchallenges
}

// RemoveChallengeIDs removes the "challenges" edge to the Challenge entity by IDs.
func (m *UserMutation) RemoveChallengeIDs(ids ...uuid.UUID) {
	if m.removedchallenges == nil {
		m.removedchallenges = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.challenges, ids[i])
		m.removedchallenges[ids[i]] = struct{}{}
	}
}

// RemovedChallenges returns the removed IDs of the "challenges" edge to the Challenge entity.
func (m *UserMutation) RemovedChallengesIDs() (ids []uuid.UUID) {
	for id := range m.removedchallenges {
		ids = append(ids, id)
	}
	return
}

// ChallengesIDs returns the "challenges" edge IDs in the mutation.
func (m *UserMutation) ChallengesIDs() (ids []uuid.UUID) {
	for id := range m.challenges {
		ids = append(ids, id)
	}
	return
}

// ResetChallenges resets all changes to the "challenges" edge.
func (m *UserMutation) ResetChallenges() {
	m.challenges = nil
	m.clearedchallenges = false
	m.removedchallenges = nil
}

// AddTestIDs adds the "tests" edge to the Test entity by ids.
func (m *UserMutation) AddTestIDs(ids ...uuid.UUID) {
	if m.tests == nil {
		m.tests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.tests[ids[i]] = struct{}{}
	}
}

// ClearTests clears the "tests" edge to the Test entity.
func (m *UserMutation) ClearTests() {
	m.clearedtests = true
}

// TestsCleared reports if the "tests" edge to the Test entity was cleared.
func (m *UserMutation) TestsCleared() bool {
	return m.clearedtests
}

// RemoveTestIDs removes the "tests" edge to the Test entity by IDs.
func (m *UserMutation) RemoveTestIDs(ids ...uuid.UUID) {
	if m.removedtests == nil {
		m.removedtests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.tests, ids[i])
		m.removedtests[ids[i]] = struct{}{}
	}
}

// RemovedTests returns the removed IDs of the "tests" edge to the Test entity.
func (m *UserMutation) RemovedTestsIDs() (ids []uuid.UUID) {
	for id := range m.removedtests {
		ids = append(ids, id)
	}
	return
}

// TestsIDs returns the "tests" edge IDs in the mutation.
func (m *UserMutation) TestsIDs() (ids []uuid.UUID) {
	for id := range m.tests {
		ids = append(ids, id)
	}
	return
}

// ResetTests resets all changes to the "tests" edge.
func (m *UserMutation) ResetTests() {
	m.tests = nil
	m.clearedtests = false
	m.removedtests = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.picture != nil {
		fields = append(fields, user.FieldPicture)
	}
	if m.admin != nil {
		fields = append(fields, user.FieldAdmin)
	}
	if m.password_hash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	if m.locale != nil {
		fields = append(fields, user.FieldLocale)
	}
	if m.meta != nil {
		fields = append(fields, user.FieldMeta)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPicture:
		return m.Picture()
	case user.FieldAdmin:
		return m.Admin()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	case user.FieldLocale:
		return m.Locale()
	case user.FieldMeta:
		return m.Meta()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPicture:
		return m.OldPicture(ctx)
	case user.FieldAdmin:
		return m.OldAdmin(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case user.FieldLocale:
		return m.OldLocale(ctx)
	case user.FieldMeta:
		return m.OldMeta(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPicture:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPicture(v)
		return nil
	case user.FieldAdmin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdmin(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case user.FieldLocale:
		v, ok := value.(user.Locale)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocale(v)
		return nil
	case user.FieldMeta:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldPicture) {
		fields = append(fields, user.FieldPicture)
	}
	if m.FieldCleared(user.FieldMeta) {
		fields = append(fields, user.FieldMeta)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldPicture:
		m.ClearPicture()
		return nil
	case user.FieldMeta:
		m.ClearMeta()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPicture:
		m.ResetPicture()
		return nil
	case user.FieldAdmin:
		m.ResetAdmin()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case user.FieldLocale:
		m.ResetLocale()
		return nil
	case user.FieldMeta:
		m.ResetMeta()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.predictions != nil {
		edges = append(edges, user.EdgePredictions)
	}
	if m.sessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.badges != nil {
		edges = append(edges, user.EdgeBadges)
	}
	if m.challenges != nil {
		edges = append(edges, user.EdgeChallenges)
	}
	if m.tests != nil {
		edges = append(edges, user.EdgeTests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePredictions:
		ids := make([]ent.Value, 0, len(m.predictions))
		for id := range m.predictions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.sessions))
		for id := range m.sessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBadges:
		ids := make([]ent.Value, 0, len(m.badges))
		for id := range m.badges {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeChallenges:
		ids := make([]ent.Value, 0, len(m.challenges))
		for id := range m.challenges {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTests:
		ids := make([]ent.Value, 0, len(m.tests))
		for id := range m.tests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedpredictions != nil {
		edges = append(edges, user.EdgePredictions)
	}
	if m.removedsessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.removedbadges != nil {
		edges = append(edges, user.EdgeBadges)
	}
	if m.removedchallenges != nil {
		edges = append(edges, user.EdgeChallenges)
	}
	if m.removedtests != nil {
		edges = append(edges, user.EdgeTests)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePredictions:
		ids := make([]ent.Value, 0, len(m.removedpredictions))
		for id := range m.removedpredictions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.removedsessions))
		for id := range m.removedsessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBadges:
		ids := make([]ent.Value, 0, len(m.removedbadges))
		for id := range m.removedbadges {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeChallenges:
		ids := make([]ent.Value, 0, len(m.removedchallenges))
		for id := range m.removedchallenges {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTests:
		ids := make([]ent.Value, 0, len(m.removedtests))
		for id := range m.removedtests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedpredictions {
		edges = append(edges, user.EdgePredictions)
	}
	if m.clearedsessions {
		edges = append(edges, user.EdgeSessions)
	}
	if m.clearedbadges {
		edges = append(edges, user.EdgeBadges)
	}
	if m.clearedchallenges {
		edges = append(edges, user.EdgeChallenges)
	}
	if m.clearedtests {
		edges = append(edges, user.EdgeTests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePredictions:
		return m.clearedpredictions
	case user.EdgeSessions:
		return m.clearedsessions
	case user.EdgeBadges:
		return m.clearedbadges
	case user.EdgeChallenges:
		return m.clearedchallenges
	case user.EdgeTests:
		return m.clearedtests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePredictions:
		m.ResetPredictions()
		return nil
	case user.EdgeSessions:
		m.ResetSessions()
		return nil
	case user.EdgeBadges:
		m.ResetBadges()
		return nil
	case user.EdgeChallenges:
		m.ResetChallenges()
		return nil
	case user.EdgeTests:
		m.ResetTests()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserSessionMutation represents an operation that mutates the UserSession nodes in the graph.
type UserSessionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	sid           *string
	ip            *string
	user_agent    *string
	last_activity *time.Time
	active        *bool
	meta          *map[string]interface{}
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*UserSession, error)
	predicates    []predicate.UserSession
}

var _ ent.Mutation = (*UserSessionMutation)(nil)

// usersessionOption allows management of the mutation configuration using functional options.
type usersessionOption func(*UserSessionMutation)

// newUserSessionMutation creates new mutation for the UserSession entity.
func newUserSessionMutation(c config, op Op, opts ...usersessionOption) *UserSessionMutation {
	m := &UserSessionMutation{
		config:        c,
		op:            op,
		typ:           TypeUserSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserSessionID sets the ID field of the mutation.
func withUserSessionID(id int) usersessionOption {
	return func(m *UserSessionMutation) {
		var (
			err   error
			once  sync.Once
			value *UserSession
		)
		m.oldValue = func(ctx context.Context) (*UserSession, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserSession.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserSession sets the old UserSession of the mutation.
func withUserSession(node *UserSession) usersessionOption {
	return func(m *UserSessionMutation) {
		m.oldValue = func(context.Context) (*UserSession, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserSessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserSessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserSessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserSessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserSession.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserSessionMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserSessionMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the UserSession entity.
// If the UserSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSessionMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserSessionMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserSessionMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserSessionMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the UserSession entity.
// If the UserSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSessionMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserSessionMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetSid sets the "sid" field.
func (m *UserSessionMutation) SetSid(s string) {
	m.sid = &s
}

// Sid returns the value of the "sid" field in the mutation.
func (m *UserSessionMutation) Sid() (r string, exists bool) {
	v := m.sid
	if v == nil {
		return
	}
	return *v, true
}

// OldSid returns the old "sid" field's value of the UserSession entity.
// If the UserSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSessionMutation) OldSid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSid: %w", err)
	}
	return oldValue.Sid, nil
}

// ResetSid resets all changes to the "sid" field.
func (m *UserSessionMutation) ResetSid() {
	m.sid = nil
}

// SetIP sets the "ip" field.
func (m *UserSessionMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *UserSessionMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the UserSession entity.
// If the UserSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSessionMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *UserSessionMutation) ResetIP() {
	m.ip = nil
}

// SetUserAgent sets the "user_agent" field.
func (m *UserSessionMutation) SetUserAgent(s string) {
	m.user_agent = &s
}

// UserAgent returns the value of the "user_agent" field in the mutation.
func (m *UserSessionMutation) UserAgent() (r string, exists bool) {
	v := m.user_agent
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAgent returns the old "user_agent" field's value of the UserSession entity.
// If the UserSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSessionMutation) OldUserAgent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserAgent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserAgent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAgent: %w", err)
	}
	return oldValue.UserAgent, nil
}

// ResetUserAgent resets all changes to the "user_agent" field.
func (m *UserSessionMutation) ResetUserAgent() {
	m.user_agent = nil
}

// SetLastActivity sets the "last_activity" field.
func (m *UserSessionMutation) SetLastActivity(t time.Time) {
	m.last_activity = &t
}

// LastActivity returns the value of the "last_activity" field in the mutation.
func (m *UserSessionMutation) LastActivity() (r time.Time, exists bool) {
	v := m.last_activity
	if v == nil {
		return
	}
	return *v, true
}

// OldLastActivity returns the old "last_activity" field's value of the UserSession entity.
// If the UserSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSessionMutation) OldLastActivity(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastActivity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastActivity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastActivity: %w", err)
	}
	return oldValue.LastActivity, nil
}

// ResetLastActivity resets all changes to the "last_activity" field.
func (m *UserSessionMutation) ResetLastActivity() {
	m.last_activity = nil
}

// SetActive sets the "active" field.
func (m *UserSessionMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *UserSessionMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the UserSession entity.
// If the UserSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSessionMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *UserSessionMutation) ResetActive() {
	m.active = nil
}

// SetMeta sets the "meta" field.
func (m *UserSessionMutation) SetMeta(value map[string]interface{}) {
	m.meta = &value
}

// Meta returns the value of the "meta" field in the mutation.
func (m *UserSessionMutation) Meta() (r map[string]interface{}, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the UserSession entity.
// If the UserSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSessionMutation) OldMeta(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ClearMeta clears the value of the "meta" field.
func (m *UserSessionMutation) ClearMeta() {
	m.meta = nil
	m.clearedFields[usersession.FieldMeta] = struct{}{}
}

// MetaCleared returns if the "meta" field was cleared in this mutation.
func (m *UserSessionMutation) MetaCleared() bool {
	_, ok := m.clearedFields[usersession.FieldMeta]
	return ok
}

// ResetMeta resets all changes to the "meta" field.
func (m *UserSessionMutation) ResetMeta() {
	m.meta = nil
	delete(m.clearedFields, usersession.FieldMeta)
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *UserSessionMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserSessionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserSessionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *UserSessionMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserSessionMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserSessionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the UserSessionMutation builder.
func (m *UserSessionMutation) Where(ps ...predicate.UserSession) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserSessionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserSession).
func (m *UserSessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserSessionMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, usersession.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, usersession.FieldUpdateTime)
	}
	if m.sid != nil {
		fields = append(fields, usersession.FieldSid)
	}
	if m.ip != nil {
		fields = append(fields, usersession.FieldIP)
	}
	if m.user_agent != nil {
		fields = append(fields, usersession.FieldUserAgent)
	}
	if m.last_activity != nil {
		fields = append(fields, usersession.FieldLastActivity)
	}
	if m.active != nil {
		fields = append(fields, usersession.FieldActive)
	}
	if m.meta != nil {
		fields = append(fields, usersession.FieldMeta)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserSessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usersession.FieldCreateTime:
		return m.CreateTime()
	case usersession.FieldUpdateTime:
		return m.UpdateTime()
	case usersession.FieldSid:
		return m.Sid()
	case usersession.FieldIP:
		return m.IP()
	case usersession.FieldUserAgent:
		return m.UserAgent()
	case usersession.FieldLastActivity:
		return m.LastActivity()
	case usersession.FieldActive:
		return m.Active()
	case usersession.FieldMeta:
		return m.Meta()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserSessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usersession.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case usersession.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case usersession.FieldSid:
		return m.OldSid(ctx)
	case usersession.FieldIP:
		return m.OldIP(ctx)
	case usersession.FieldUserAgent:
		return m.OldUserAgent(ctx)
	case usersession.FieldLastActivity:
		return m.OldLastActivity(ctx)
	case usersession.FieldActive:
		return m.OldActive(ctx)
	case usersession.FieldMeta:
		return m.OldMeta(ctx)
	}
	return nil, fmt.Errorf("unknown UserSession field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserSessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usersession.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case usersession.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case usersession.FieldSid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSid(v)
		return nil
	case usersession.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case usersession.FieldUserAgent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAgent(v)
		return nil
	case usersession.FieldLastActivity:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastActivity(v)
		return nil
	case usersession.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case usersession.FieldMeta:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	}
	return fmt.Errorf("unknown UserSession field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserSessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserSessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserSessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserSession numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserSessionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(usersession.FieldMeta) {
		fields = append(fields, usersession.FieldMeta)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserSessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserSessionMutation) ClearField(name string) error {
	switch name {
	case usersession.FieldMeta:
		m.ClearMeta()
		return nil
	}
	return fmt.Errorf("unknown UserSession nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserSessionMutation) ResetField(name string) error {
	switch name {
	case usersession.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case usersession.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case usersession.FieldSid:
		m.ResetSid()
		return nil
	case usersession.FieldIP:
		m.ResetIP()
		return nil
	case usersession.FieldUserAgent:
		m.ResetUserAgent()
		return nil
	case usersession.FieldLastActivity:
		m.ResetLastActivity()
		return nil
	case usersession.FieldActive:
		m.ResetActive()
		return nil
	case usersession.FieldMeta:
		m.ResetMeta()
		return nil
	}
	return fmt.Errorf("unknown UserSession field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserSessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, usersession.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserSessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usersession.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserSessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserSessionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserSessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, usersession.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserSessionMutation) EdgeCleared(name string) bool {
	switch name {
	case usersession.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserSessionMutation) ClearEdge(name string) error {
	switch name {
	case usersession.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown UserSession unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserSessionMutation) ResetEdge(name string) error {
	switch name {
	case usersession.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown UserSession edge %s", name)
}
