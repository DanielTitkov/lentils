// Code generated by ent, DO NOT EDIT.

package scale

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the scale type in the database.
	Label = "scale"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldGlobal holds the string denoting the global field in the database.
	FieldGlobal = "global"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// EdgeInterpretations holds the string denoting the interpretations edge name in mutations.
	EdgeInterpretations = "interpretations"
	// EdgeTranslations holds the string denoting the translations edge name in mutations.
	EdgeTranslations = "translations"
	// EdgeNorms holds the string denoting the norms edge name in mutations.
	EdgeNorms = "norms"
	// EdgeTest holds the string denoting the test edge name in mutations.
	EdgeTest = "test"
	// EdgeScaleItem holds the string denoting the scale_item edge name in mutations.
	EdgeScaleItem = "scale_item"
	// Table holds the table name of the scale in the database.
	Table = "scales"
	// ItemsTable is the table that holds the items relation/edge. The primary key declared below.
	ItemsTable = "scale_items"
	// ItemsInverseTable is the table name for the Item entity.
	// It exists in this package in order to avoid circular dependency with the "item" package.
	ItemsInverseTable = "items"
	// InterpretationsTable is the table that holds the interpretations relation/edge.
	InterpretationsTable = "interpretations"
	// InterpretationsInverseTable is the table name for the Interpretation entity.
	// It exists in this package in order to avoid circular dependency with the "interpretation" package.
	InterpretationsInverseTable = "interpretations"
	// InterpretationsColumn is the table column denoting the interpretations relation/edge.
	InterpretationsColumn = "scale_interpretations"
	// TranslationsTable is the table that holds the translations relation/edge.
	TranslationsTable = "scale_translations"
	// TranslationsInverseTable is the table name for the ScaleTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "scaletranslation" package.
	TranslationsInverseTable = "scale_translations"
	// TranslationsColumn is the table column denoting the translations relation/edge.
	TranslationsColumn = "scale_translations"
	// NormsTable is the table that holds the norms relation/edge.
	NormsTable = "norms"
	// NormsInverseTable is the table name for the Norm entity.
	// It exists in this package in order to avoid circular dependency with the "norm" package.
	NormsInverseTable = "norms"
	// NormsColumn is the table column denoting the norms relation/edge.
	NormsColumn = "scale_norms"
	// TestTable is the table that holds the test relation/edge. The primary key declared below.
	TestTable = "test_scales"
	// TestInverseTable is the table name for the Test entity.
	// It exists in this package in order to avoid circular dependency with the "test" package.
	TestInverseTable = "tests"
	// ScaleItemTable is the table that holds the scale_item relation/edge.
	ScaleItemTable = "scale_items"
	// ScaleItemInverseTable is the table name for the ScaleItem entity.
	// It exists in this package in order to avoid circular dependency with the "scaleitem" package.
	ScaleItemInverseTable = "scale_items"
	// ScaleItemColumn is the table column denoting the scale_item relation/edge.
	ScaleItemColumn = "scale_id"
)

// Columns holds all SQL columns for scale fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldCode,
	FieldGlobal,
	FieldType,
}

var (
	// ItemsPrimaryKey and ItemsColumn2 are the table columns denoting the
	// primary key for the items relation (M2M).
	ItemsPrimaryKey = []string{"scale_id", "item_id"}
	// TestPrimaryKey and TestColumn2 are the table columns denoting the
	// primary key for the test relation (M2M).
	TestPrimaryKey = []string{"test_id", "scale_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DefaultGlobal holds the default value on creation for the "global" field.
	DefaultGlobal bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// TypeSten is the default value of the Type enum.
const DefaultType = TypeSten

// Type values.
const (
	TypeSten   Type = "sten"
	TypeMean   Type = "mean"
	TypeSum    Type = "sum"
	TypeZscore Type = "zscore"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeSten, TypeMean, TypeSum, TypeZscore:
		return nil
	default:
		return fmt.Errorf("scale: invalid enum value for type field: %q", _type)
	}
}
