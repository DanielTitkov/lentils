// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/test"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/testdisplay"
	"github.com/google/uuid"
)

// TestDisplay is the model entity for the TestDisplay schema.
type TestDisplay struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// RandomizeOrder holds the value of the "randomize_order" field.
	RandomizeOrder bool `json:"randomize_order,omitempty"`
	// QuestionsPerPage holds the value of the "questions_per_page" field.
	QuestionsPerPage int `json:"questions_per_page,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestDisplayQuery when eager-loading is set.
	Edges        TestDisplayEdges `json:"edges"`
	test_display *uuid.UUID
}

// TestDisplayEdges holds the relations/edges for other nodes in the graph.
type TestDisplayEdges struct {
	// Test holds the value of the test edge.
	Test *Test `json:"test,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TestOrErr returns the Test value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestDisplayEdges) TestOrErr() (*Test, error) {
	if e.loadedTypes[0] {
		if e.Test == nil {
			// The edge test was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: test.Label}
		}
		return e.Test, nil
	}
	return nil, &NotLoadedError{edge: "test"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestDisplay) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case testdisplay.FieldRandomizeOrder:
			values[i] = new(sql.NullBool)
		case testdisplay.FieldQuestionsPerPage:
			values[i] = new(sql.NullInt64)
		case testdisplay.FieldID:
			values[i] = new(uuid.UUID)
		case testdisplay.ForeignKeys[0]: // test_display
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type TestDisplay", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestDisplay fields.
func (td *TestDisplay) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testdisplay.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				td.ID = *value
			}
		case testdisplay.FieldRandomizeOrder:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field randomize_order", values[i])
			} else if value.Valid {
				td.RandomizeOrder = value.Bool
			}
		case testdisplay.FieldQuestionsPerPage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field questions_per_page", values[i])
			} else if value.Valid {
				td.QuestionsPerPage = int(value.Int64)
			}
		case testdisplay.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field test_display", values[i])
			} else if value.Valid {
				td.test_display = new(uuid.UUID)
				*td.test_display = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryTest queries the "test" edge of the TestDisplay entity.
func (td *TestDisplay) QueryTest() *TestQuery {
	return (&TestDisplayClient{config: td.config}).QueryTest(td)
}

// Update returns a builder for updating this TestDisplay.
// Note that you need to call TestDisplay.Unwrap() before calling this method if this TestDisplay
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *TestDisplay) Update() *TestDisplayUpdateOne {
	return (&TestDisplayClient{config: td.config}).UpdateOne(td)
}

// Unwrap unwraps the TestDisplay entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (td *TestDisplay) Unwrap() *TestDisplay {
	_tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestDisplay is not a transactional entity")
	}
	td.config.driver = _tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *TestDisplay) String() string {
	var builder strings.Builder
	builder.WriteString("TestDisplay(")
	builder.WriteString(fmt.Sprintf("id=%v, ", td.ID))
	builder.WriteString("randomize_order=")
	builder.WriteString(fmt.Sprintf("%v", td.RandomizeOrder))
	builder.WriteString(", ")
	builder.WriteString("questions_per_page=")
	builder.WriteString(fmt.Sprintf("%v", td.QuestionsPerPage))
	builder.WriteByte(')')
	return builder.String()
}

// TestDisplays is a parsable slice of TestDisplay.
type TestDisplays []*TestDisplay

func (td TestDisplays) config(cfg config) {
	for _i := range td {
		td[_i].config = cfg
	}
}
