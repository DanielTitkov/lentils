// Code generated by ent, DO NOT EDIT.

package testdisplay

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DanielTitkov/orrery/internal/repository/entgo/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RandomizeOrder applies equality check predicate on the "randomize_order" field. It's identical to RandomizeOrderEQ.
func RandomizeOrder(v bool) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRandomizeOrder), v))
	})
}

// QuestionsPerPage applies equality check predicate on the "questions_per_page" field. It's identical to QuestionsPerPageEQ.
func QuestionsPerPage(v int) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionsPerPage), v))
	})
}

// RandomizeOrderEQ applies the EQ predicate on the "randomize_order" field.
func RandomizeOrderEQ(v bool) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRandomizeOrder), v))
	})
}

// RandomizeOrderNEQ applies the NEQ predicate on the "randomize_order" field.
func RandomizeOrderNEQ(v bool) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRandomizeOrder), v))
	})
}

// QuestionsPerPageEQ applies the EQ predicate on the "questions_per_page" field.
func QuestionsPerPageEQ(v int) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestionsPerPage), v))
	})
}

// QuestionsPerPageNEQ applies the NEQ predicate on the "questions_per_page" field.
func QuestionsPerPageNEQ(v int) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuestionsPerPage), v))
	})
}

// QuestionsPerPageIn applies the In predicate on the "questions_per_page" field.
func QuestionsPerPageIn(vs ...int) predicate.TestDisplay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestDisplay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuestionsPerPage), v...))
	})
}

// QuestionsPerPageNotIn applies the NotIn predicate on the "questions_per_page" field.
func QuestionsPerPageNotIn(vs ...int) predicate.TestDisplay {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestDisplay(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuestionsPerPage), v...))
	})
}

// QuestionsPerPageGT applies the GT predicate on the "questions_per_page" field.
func QuestionsPerPageGT(v int) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuestionsPerPage), v))
	})
}

// QuestionsPerPageGTE applies the GTE predicate on the "questions_per_page" field.
func QuestionsPerPageGTE(v int) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuestionsPerPage), v))
	})
}

// QuestionsPerPageLT applies the LT predicate on the "questions_per_page" field.
func QuestionsPerPageLT(v int) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuestionsPerPage), v))
	})
}

// QuestionsPerPageLTE applies the LTE predicate on the "questions_per_page" field.
func QuestionsPerPageLTE(v int) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuestionsPerPage), v))
	})
}

// HasTest applies the HasEdge predicate on the "test" edge.
func HasTest() predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TestTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TestTable, TestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestWith applies the HasEdge predicate on the "test" edge with a given conditions (other predicates).
func HasTestWith(preds ...predicate.Test) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TestInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TestTable, TestColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TestDisplay) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TestDisplay) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TestDisplay) predicate.TestDisplay {
	return predicate.TestDisplay(func(s *sql.Selector) {
		p(s.Not())
	})
}
