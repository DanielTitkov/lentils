// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/badge"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/challenge"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/prediction"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/proof"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/schema"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/test"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/testtranslation"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/user"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/usersession"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	badgeMixin := schema.Badge{}.Mixin()
	badgeMixinFields0 := badgeMixin[0].Fields()
	_ = badgeMixinFields0
	badgeFields := schema.Badge{}.Fields()
	_ = badgeFields
	// badgeDescCreateTime is the schema descriptor for create_time field.
	badgeDescCreateTime := badgeMixinFields0[0].Descriptor()
	// badge.DefaultCreateTime holds the default value on creation for the create_time field.
	badge.DefaultCreateTime = badgeDescCreateTime.Default.(func() time.Time)
	// badgeDescUpdateTime is the schema descriptor for update_time field.
	badgeDescUpdateTime := badgeMixinFields0[1].Descriptor()
	// badge.DefaultUpdateTime holds the default value on creation for the update_time field.
	badge.DefaultUpdateTime = badgeDescUpdateTime.Default.(func() time.Time)
	// badge.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	badge.UpdateDefaultUpdateTime = badgeDescUpdateTime.UpdateDefault.(func() time.Time)
	// badgeDescType is the schema descriptor for type field.
	badgeDescType := badgeFields[0].Descriptor()
	// badge.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	badge.TypeValidator = badgeDescType.Validators[0].(func(string) error)
	// badgeDescActive is the schema descriptor for active field.
	badgeDescActive := badgeFields[1].Descriptor()
	// badge.DefaultActive holds the default value on creation for the active field.
	badge.DefaultActive = badgeDescActive.Default.(bool)
	challengeMixin := schema.Challenge{}.Mixin()
	challengeMixinFields0 := challengeMixin[0].Fields()
	_ = challengeMixinFields0
	challengeFields := schema.Challenge{}.Fields()
	_ = challengeFields
	// challengeDescCreateTime is the schema descriptor for create_time field.
	challengeDescCreateTime := challengeMixinFields0[0].Descriptor()
	// challenge.DefaultCreateTime holds the default value on creation for the create_time field.
	challenge.DefaultCreateTime = challengeDescCreateTime.Default.(func() time.Time)
	// challengeDescUpdateTime is the schema descriptor for update_time field.
	challengeDescUpdateTime := challengeMixinFields0[1].Descriptor()
	// challenge.DefaultUpdateTime holds the default value on creation for the update_time field.
	challenge.DefaultUpdateTime = challengeDescUpdateTime.Default.(func() time.Time)
	// challenge.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	challenge.UpdateDefaultUpdateTime = challengeDescUpdateTime.UpdateDefault.(func() time.Time)
	// challengeDescContent is the schema descriptor for content field.
	challengeDescContent := challengeFields[1].Descriptor()
	// challenge.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	challenge.ContentValidator = func() func(string) error {
		validators := challengeDescContent.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(content string) error {
			for _, fn := range fns {
				if err := fn(content); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// challengeDescDescription is the schema descriptor for description field.
	challengeDescDescription := challengeFields[2].Descriptor()
	// challenge.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	challenge.DescriptionValidator = challengeDescDescription.Validators[0].(func(string) error)
	// challengeDescPublished is the schema descriptor for published field.
	challengeDescPublished := challengeFields[4].Descriptor()
	// challenge.DefaultPublished holds the default value on creation for the published field.
	challenge.DefaultPublished = challengeDescPublished.Default.(bool)
	// challengeDescID is the schema descriptor for id field.
	challengeDescID := challengeFields[0].Descriptor()
	// challenge.DefaultID holds the default value on creation for the id field.
	challenge.DefaultID = challengeDescID.Default.(func() uuid.UUID)
	predictionMixin := schema.Prediction{}.Mixin()
	predictionMixinFields0 := predictionMixin[0].Fields()
	_ = predictionMixinFields0
	predictionFields := schema.Prediction{}.Fields()
	_ = predictionFields
	// predictionDescCreateTime is the schema descriptor for create_time field.
	predictionDescCreateTime := predictionMixinFields0[0].Descriptor()
	// prediction.DefaultCreateTime holds the default value on creation for the create_time field.
	prediction.DefaultCreateTime = predictionDescCreateTime.Default.(func() time.Time)
	// predictionDescUpdateTime is the schema descriptor for update_time field.
	predictionDescUpdateTime := predictionMixinFields0[1].Descriptor()
	// prediction.DefaultUpdateTime holds the default value on creation for the update_time field.
	prediction.DefaultUpdateTime = predictionDescUpdateTime.Default.(func() time.Time)
	// prediction.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	prediction.UpdateDefaultUpdateTime = predictionDescUpdateTime.UpdateDefault.(func() time.Time)
	// predictionDescID is the schema descriptor for id field.
	predictionDescID := predictionFields[0].Descriptor()
	// prediction.DefaultID holds the default value on creation for the id field.
	prediction.DefaultID = predictionDescID.Default.(func() uuid.UUID)
	proofMixin := schema.Proof{}.Mixin()
	proofMixinFields0 := proofMixin[0].Fields()
	_ = proofMixinFields0
	proofFields := schema.Proof{}.Fields()
	_ = proofFields
	// proofDescCreateTime is the schema descriptor for create_time field.
	proofDescCreateTime := proofMixinFields0[0].Descriptor()
	// proof.DefaultCreateTime holds the default value on creation for the create_time field.
	proof.DefaultCreateTime = proofDescCreateTime.Default.(func() time.Time)
	// proofDescUpdateTime is the schema descriptor for update_time field.
	proofDescUpdateTime := proofMixinFields0[1].Descriptor()
	// proof.DefaultUpdateTime holds the default value on creation for the update_time field.
	proof.DefaultUpdateTime = proofDescUpdateTime.Default.(func() time.Time)
	// proof.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	proof.UpdateDefaultUpdateTime = proofDescUpdateTime.UpdateDefault.(func() time.Time)
	// proofDescContent is the schema descriptor for content field.
	proofDescContent := proofFields[1].Descriptor()
	// proof.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	proof.ContentValidator = proofDescContent.Validators[0].(func(string) error)
	// proofDescID is the schema descriptor for id field.
	proofDescID := proofFields[0].Descriptor()
	// proof.DefaultID holds the default value on creation for the id field.
	proof.DefaultID = proofDescID.Default.(func() uuid.UUID)
	testMixin := schema.Test{}.Mixin()
	testMixinFields0 := testMixin[0].Fields()
	_ = testMixinFields0
	testFields := schema.Test{}.Fields()
	_ = testFields
	// testDescCreateTime is the schema descriptor for create_time field.
	testDescCreateTime := testMixinFields0[0].Descriptor()
	// test.DefaultCreateTime holds the default value on creation for the create_time field.
	test.DefaultCreateTime = testDescCreateTime.Default.(func() time.Time)
	// testDescUpdateTime is the schema descriptor for update_time field.
	testDescUpdateTime := testMixinFields0[1].Descriptor()
	// test.DefaultUpdateTime holds the default value on creation for the update_time field.
	test.DefaultUpdateTime = testDescUpdateTime.Default.(func() time.Time)
	// test.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	test.UpdateDefaultUpdateTime = testDescUpdateTime.UpdateDefault.(func() time.Time)
	// testDescCode is the schema descriptor for code field.
	testDescCode := testFields[1].Descriptor()
	// test.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	test.CodeValidator = func() func(string) error {
		validators := testDescCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(code string) error {
			for _, fn := range fns {
				if err := fn(code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// testDescContent is the schema descriptor for content field.
	testDescContent := testFields[2].Descriptor()
	// test.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	test.ContentValidator = func() func(string) error {
		validators := testDescContent.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(content string) error {
			for _, fn := range fns {
				if err := fn(content); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// testDescDescription is the schema descriptor for description field.
	testDescDescription := testFields[3].Descriptor()
	// test.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	test.DescriptionValidator = testDescDescription.Validators[0].(func(string) error)
	// testDescPublished is the schema descriptor for published field.
	testDescPublished := testFields[4].Descriptor()
	// test.DefaultPublished holds the default value on creation for the published field.
	test.DefaultPublished = testDescPublished.Default.(bool)
	// testDescID is the schema descriptor for id field.
	testDescID := testFields[0].Descriptor()
	// test.DefaultID holds the default value on creation for the id field.
	test.DefaultID = testDescID.Default.(func() uuid.UUID)
	testtranslationMixin := schema.TestTranslation{}.Mixin()
	testtranslationMixinFields0 := testtranslationMixin[0].Fields()
	_ = testtranslationMixinFields0
	testtranslationFields := schema.TestTranslation{}.Fields()
	_ = testtranslationFields
	// testtranslationDescCreateTime is the schema descriptor for create_time field.
	testtranslationDescCreateTime := testtranslationMixinFields0[0].Descriptor()
	// testtranslation.DefaultCreateTime holds the default value on creation for the create_time field.
	testtranslation.DefaultCreateTime = testtranslationDescCreateTime.Default.(func() time.Time)
	// testtranslationDescUpdateTime is the schema descriptor for update_time field.
	testtranslationDescUpdateTime := testtranslationMixinFields0[1].Descriptor()
	// testtranslation.DefaultUpdateTime holds the default value on creation for the update_time field.
	testtranslation.DefaultUpdateTime = testtranslationDescUpdateTime.Default.(func() time.Time)
	// testtranslation.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	testtranslation.UpdateDefaultUpdateTime = testtranslationDescUpdateTime.UpdateDefault.(func() time.Time)
	// testtranslationDescTitle is the schema descriptor for title field.
	testtranslationDescTitle := testtranslationFields[1].Descriptor()
	// testtranslation.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	testtranslation.TitleValidator = func() func(string) error {
		validators := testtranslationDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// testtranslationDescID is the schema descriptor for id field.
	testtranslationDescID := testtranslationFields[0].Descriptor()
	// testtranslation.DefaultID holds the default value on creation for the id field.
	testtranslation.DefaultID = testtranslationDescID.Default.(func() uuid.UUID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPicture is the schema descriptor for picture field.
	userDescPicture := userFields[3].Descriptor()
	// user.DefaultPicture holds the default value on creation for the picture field.
	user.DefaultPicture = userDescPicture.Default.(string)
	// userDescAdmin is the schema descriptor for admin field.
	userDescAdmin := userFields[4].Descriptor()
	// user.DefaultAdmin holds the default value on creation for the admin field.
	user.DefaultAdmin = userDescAdmin.Default.(bool)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
	usersessionMixin := schema.UserSession{}.Mixin()
	usersessionMixinFields0 := usersessionMixin[0].Fields()
	_ = usersessionMixinFields0
	usersessionFields := schema.UserSession{}.Fields()
	_ = usersessionFields
	// usersessionDescCreateTime is the schema descriptor for create_time field.
	usersessionDescCreateTime := usersessionMixinFields0[0].Descriptor()
	// usersession.DefaultCreateTime holds the default value on creation for the create_time field.
	usersession.DefaultCreateTime = usersessionDescCreateTime.Default.(func() time.Time)
	// usersessionDescUpdateTime is the schema descriptor for update_time field.
	usersessionDescUpdateTime := usersessionMixinFields0[1].Descriptor()
	// usersession.DefaultUpdateTime holds the default value on creation for the update_time field.
	usersession.DefaultUpdateTime = usersessionDescUpdateTime.Default.(func() time.Time)
	// usersession.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	usersession.UpdateDefaultUpdateTime = usersessionDescUpdateTime.UpdateDefault.(func() time.Time)
	// usersessionDescSid is the schema descriptor for sid field.
	usersessionDescSid := usersessionFields[0].Descriptor()
	// usersession.SidValidator is a validator for the "sid" field. It is called by the builders before save.
	usersession.SidValidator = usersessionDescSid.Validators[0].(func(string) error)
	// usersessionDescLastActivity is the schema descriptor for last_activity field.
	usersessionDescLastActivity := usersessionFields[3].Descriptor()
	// usersession.DefaultLastActivity holds the default value on creation for the last_activity field.
	usersession.DefaultLastActivity = usersessionDescLastActivity.Default.(func() time.Time)
	// usersessionDescActive is the schema descriptor for active field.
	usersessionDescActive := usersessionFields[4].Descriptor()
	// usersession.DefaultActive holds the default value on creation for the active field.
	usersession.DefaultActive = usersessionDescActive.Default.(bool)
}
