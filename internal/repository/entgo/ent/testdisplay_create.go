// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/test"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/testdisplay"
	"github.com/google/uuid"
)

// TestDisplayCreate is the builder for creating a TestDisplay entity.
type TestDisplayCreate struct {
	config
	mutation *TestDisplayMutation
	hooks    []Hook
}

// SetRandomizeOrder sets the "randomize_order" field.
func (tdc *TestDisplayCreate) SetRandomizeOrder(b bool) *TestDisplayCreate {
	tdc.mutation.SetRandomizeOrder(b)
	return tdc
}

// SetNillableRandomizeOrder sets the "randomize_order" field if the given value is not nil.
func (tdc *TestDisplayCreate) SetNillableRandomizeOrder(b *bool) *TestDisplayCreate {
	if b != nil {
		tdc.SetRandomizeOrder(*b)
	}
	return tdc
}

// SetQuestionsPerPage sets the "questions_per_page" field.
func (tdc *TestDisplayCreate) SetQuestionsPerPage(i int) *TestDisplayCreate {
	tdc.mutation.SetQuestionsPerPage(i)
	return tdc
}

// SetNillableQuestionsPerPage sets the "questions_per_page" field if the given value is not nil.
func (tdc *TestDisplayCreate) SetNillableQuestionsPerPage(i *int) *TestDisplayCreate {
	if i != nil {
		tdc.SetQuestionsPerPage(*i)
	}
	return tdc
}

// SetID sets the "id" field.
func (tdc *TestDisplayCreate) SetID(u uuid.UUID) *TestDisplayCreate {
	tdc.mutation.SetID(u)
	return tdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tdc *TestDisplayCreate) SetNillableID(u *uuid.UUID) *TestDisplayCreate {
	if u != nil {
		tdc.SetID(*u)
	}
	return tdc
}

// SetTestID sets the "test" edge to the Test entity by ID.
func (tdc *TestDisplayCreate) SetTestID(id uuid.UUID) *TestDisplayCreate {
	tdc.mutation.SetTestID(id)
	return tdc
}

// SetTest sets the "test" edge to the Test entity.
func (tdc *TestDisplayCreate) SetTest(t *Test) *TestDisplayCreate {
	return tdc.SetTestID(t.ID)
}

// Mutation returns the TestDisplayMutation object of the builder.
func (tdc *TestDisplayCreate) Mutation() *TestDisplayMutation {
	return tdc.mutation
}

// Save creates the TestDisplay in the database.
func (tdc *TestDisplayCreate) Save(ctx context.Context) (*TestDisplay, error) {
	var (
		err  error
		node *TestDisplay
	)
	tdc.defaults()
	if len(tdc.hooks) == 0 {
		if err = tdc.check(); err != nil {
			return nil, err
		}
		node, err = tdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestDisplayMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tdc.check(); err != nil {
				return nil, err
			}
			tdc.mutation = mutation
			if node, err = tdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tdc.hooks) - 1; i >= 0; i-- {
			if tdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tdc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tdc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TestDisplay)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TestDisplayMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tdc *TestDisplayCreate) SaveX(ctx context.Context) *TestDisplay {
	v, err := tdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdc *TestDisplayCreate) Exec(ctx context.Context) error {
	_, err := tdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdc *TestDisplayCreate) ExecX(ctx context.Context) {
	if err := tdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdc *TestDisplayCreate) defaults() {
	if _, ok := tdc.mutation.RandomizeOrder(); !ok {
		v := testdisplay.DefaultRandomizeOrder
		tdc.mutation.SetRandomizeOrder(v)
	}
	if _, ok := tdc.mutation.QuestionsPerPage(); !ok {
		v := testdisplay.DefaultQuestionsPerPage
		tdc.mutation.SetQuestionsPerPage(v)
	}
	if _, ok := tdc.mutation.ID(); !ok {
		v := testdisplay.DefaultID()
		tdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdc *TestDisplayCreate) check() error {
	if _, ok := tdc.mutation.RandomizeOrder(); !ok {
		return &ValidationError{Name: "randomize_order", err: errors.New(`ent: missing required field "TestDisplay.randomize_order"`)}
	}
	if _, ok := tdc.mutation.QuestionsPerPage(); !ok {
		return &ValidationError{Name: "questions_per_page", err: errors.New(`ent: missing required field "TestDisplay.questions_per_page"`)}
	}
	if v, ok := tdc.mutation.QuestionsPerPage(); ok {
		if err := testdisplay.QuestionsPerPageValidator(v); err != nil {
			return &ValidationError{Name: "questions_per_page", err: fmt.Errorf(`ent: validator failed for field "TestDisplay.questions_per_page": %w`, err)}
		}
	}
	if _, ok := tdc.mutation.TestID(); !ok {
		return &ValidationError{Name: "test", err: errors.New(`ent: missing required edge "TestDisplay.test"`)}
	}
	return nil
}

func (tdc *TestDisplayCreate) sqlSave(ctx context.Context) (*TestDisplay, error) {
	_node, _spec := tdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tdc *TestDisplayCreate) createSpec() (*TestDisplay, *sqlgraph.CreateSpec) {
	var (
		_node = &TestDisplay{config: tdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: testdisplay.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testdisplay.FieldID,
			},
		}
	)
	if id, ok := tdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tdc.mutation.RandomizeOrder(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: testdisplay.FieldRandomizeOrder,
		})
		_node.RandomizeOrder = value
	}
	if value, ok := tdc.mutation.QuestionsPerPage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: testdisplay.FieldQuestionsPerPage,
		})
		_node.QuestionsPerPage = value
	}
	if nodes := tdc.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   testdisplay.TestTable,
			Columns: []string{testdisplay.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.test_display = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TestDisplayCreateBulk is the builder for creating many TestDisplay entities in bulk.
type TestDisplayCreateBulk struct {
	config
	builders []*TestDisplayCreate
}

// Save creates the TestDisplay entities in the database.
func (tdcb *TestDisplayCreateBulk) Save(ctx context.Context) ([]*TestDisplay, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tdcb.builders))
	nodes := make([]*TestDisplay, len(tdcb.builders))
	mutators := make([]Mutator, len(tdcb.builders))
	for i := range tdcb.builders {
		func(i int, root context.Context) {
			builder := tdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestDisplayMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tdcb *TestDisplayCreateBulk) SaveX(ctx context.Context) []*TestDisplay {
	v, err := tdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdcb *TestDisplayCreateBulk) Exec(ctx context.Context) error {
	_, err := tdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdcb *TestDisplayCreateBulk) ExecX(ctx context.Context) {
	if err := tdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
