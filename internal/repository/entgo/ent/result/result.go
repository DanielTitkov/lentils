// Code generated by ent, DO NOT EDIT.

package result

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the result type in the database.
	Label = "result"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldRawScore holds the string denoting the raw_score field in the database.
	FieldRawScore = "raw_score"
	// FieldFinalScore holds the string denoting the final_score field in the database.
	FieldFinalScore = "final_score"
	// FieldMeta holds the string denoting the meta field in the database.
	FieldMeta = "meta"
	// EdgeScale holds the string denoting the scale edge name in mutations.
	EdgeScale = "scale"
	// EdgeTake holds the string denoting the take edge name in mutations.
	EdgeTake = "take"
	// Table holds the table name of the result in the database.
	Table = "results"
	// ScaleTable is the table that holds the scale relation/edge.
	ScaleTable = "results"
	// ScaleInverseTable is the table name for the Scale entity.
	// It exists in this package in order to avoid circular dependency with the "scale" package.
	ScaleInverseTable = "scales"
	// ScaleColumn is the table column denoting the scale relation/edge.
	ScaleColumn = "scale_results"
	// TakeTable is the table that holds the take relation/edge.
	TakeTable = "results"
	// TakeInverseTable is the table name for the Take entity.
	// It exists in this package in order to avoid circular dependency with the "take" package.
	TakeInverseTable = "takes"
	// TakeColumn is the table column denoting the take relation/edge.
	TakeColumn = "take_results"
)

// Columns holds all SQL columns for result fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldRawScore,
	FieldFinalScore,
	FieldMeta,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "results"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"scale_results",
	"take_results",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
