// Code generated by ent, DO NOT EDIT.

package result

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DanielTitkov/orrery/internal/repository/entgo/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// RawScore applies equality check predicate on the "raw_score" field. It's identical to RawScoreEQ.
func RawScore(v float64) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRawScore), v))
	})
}

// FinalScore applies equality check predicate on the "final_score" field. It's identical to FinalScoreEQ.
func FinalScore(v float64) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinalScore), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// RawScoreEQ applies the EQ predicate on the "raw_score" field.
func RawScoreEQ(v float64) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRawScore), v))
	})
}

// RawScoreNEQ applies the NEQ predicate on the "raw_score" field.
func RawScoreNEQ(v float64) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRawScore), v))
	})
}

// RawScoreIn applies the In predicate on the "raw_score" field.
func RawScoreIn(vs ...float64) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRawScore), v...))
	})
}

// RawScoreNotIn applies the NotIn predicate on the "raw_score" field.
func RawScoreNotIn(vs ...float64) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRawScore), v...))
	})
}

// RawScoreGT applies the GT predicate on the "raw_score" field.
func RawScoreGT(v float64) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRawScore), v))
	})
}

// RawScoreGTE applies the GTE predicate on the "raw_score" field.
func RawScoreGTE(v float64) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRawScore), v))
	})
}

// RawScoreLT applies the LT predicate on the "raw_score" field.
func RawScoreLT(v float64) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRawScore), v))
	})
}

// RawScoreLTE applies the LTE predicate on the "raw_score" field.
func RawScoreLTE(v float64) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRawScore), v))
	})
}

// FinalScoreEQ applies the EQ predicate on the "final_score" field.
func FinalScoreEQ(v float64) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinalScore), v))
	})
}

// FinalScoreNEQ applies the NEQ predicate on the "final_score" field.
func FinalScoreNEQ(v float64) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFinalScore), v))
	})
}

// FinalScoreIn applies the In predicate on the "final_score" field.
func FinalScoreIn(vs ...float64) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFinalScore), v...))
	})
}

// FinalScoreNotIn applies the NotIn predicate on the "final_score" field.
func FinalScoreNotIn(vs ...float64) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFinalScore), v...))
	})
}

// FinalScoreGT applies the GT predicate on the "final_score" field.
func FinalScoreGT(v float64) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFinalScore), v))
	})
}

// FinalScoreGTE applies the GTE predicate on the "final_score" field.
func FinalScoreGTE(v float64) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFinalScore), v))
	})
}

// FinalScoreLT applies the LT predicate on the "final_score" field.
func FinalScoreLT(v float64) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFinalScore), v))
	})
}

// FinalScoreLTE applies the LTE predicate on the "final_score" field.
func FinalScoreLTE(v float64) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFinalScore), v))
	})
}

// MetaIsNil applies the IsNil predicate on the "meta" field.
func MetaIsNil() predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMeta)))
	})
}

// MetaNotNil applies the NotNil predicate on the "meta" field.
func MetaNotNil() predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMeta)))
	})
}

// HasScale applies the HasEdge predicate on the "scale" edge.
func HasScale() predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScaleTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScaleTable, ScaleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScaleWith applies the HasEdge predicate on the "scale" edge with a given conditions (other predicates).
func HasScaleWith(preds ...predicate.Scale) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScaleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScaleTable, ScaleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTake applies the HasEdge predicate on the "take" edge.
func HasTake() predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TakeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TakeTable, TakeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTakeWith applies the HasEdge predicate on the "take" edge with a given conditions (other predicates).
func HasTakeWith(preds ...predicate.Take) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TakeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TakeTable, TakeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Result) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Result) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Result) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		p(s.Not())
	})
}
