// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/response"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/take"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/test"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/user"
	"github.com/google/uuid"
)

// TakeUpdate is the builder for updating Take entities.
type TakeUpdate struct {
	config
	hooks    []Hook
	mutation *TakeMutation
}

// Where appends a list predicates to the TakeUpdate builder.
func (tu *TakeUpdate) Where(ps ...predicate.Take) *TakeUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdateTime sets the "update_time" field.
func (tu *TakeUpdate) SetUpdateTime(t time.Time) *TakeUpdate {
	tu.mutation.SetUpdateTime(t)
	return tu
}

// SetProgress sets the "progress" field.
func (tu *TakeUpdate) SetProgress(i int) *TakeUpdate {
	tu.mutation.ResetProgress()
	tu.mutation.SetProgress(i)
	return tu
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (tu *TakeUpdate) SetNillableProgress(i *int) *TakeUpdate {
	if i != nil {
		tu.SetProgress(*i)
	}
	return tu
}

// AddProgress adds i to the "progress" field.
func (tu *TakeUpdate) AddProgress(i int) *TakeUpdate {
	tu.mutation.AddProgress(i)
	return tu
}

// SetPage sets the "page" field.
func (tu *TakeUpdate) SetPage(i int) *TakeUpdate {
	tu.mutation.ResetPage()
	tu.mutation.SetPage(i)
	return tu
}

// SetNillablePage sets the "page" field if the given value is not nil.
func (tu *TakeUpdate) SetNillablePage(i *int) *TakeUpdate {
	if i != nil {
		tu.SetPage(*i)
	}
	return tu
}

// AddPage adds i to the "page" field.
func (tu *TakeUpdate) AddPage(i int) *TakeUpdate {
	tu.mutation.AddPage(i)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TakeUpdate) SetStatus(t take.Status) *TakeUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TakeUpdate) SetNillableStatus(t *take.Status) *TakeUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetMeta sets the "meta" field.
func (tu *TakeUpdate) SetMeta(m map[string]interface{}) *TakeUpdate {
	tu.mutation.SetMeta(m)
	return tu
}

// ClearMeta clears the value of the "meta" field.
func (tu *TakeUpdate) ClearMeta() *TakeUpdate {
	tu.mutation.ClearMeta()
	return tu
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (tu *TakeUpdate) AddResponseIDs(ids ...uuid.UUID) *TakeUpdate {
	tu.mutation.AddResponseIDs(ids...)
	return tu
}

// AddResponses adds the "responses" edges to the Response entity.
func (tu *TakeUpdate) AddResponses(r ...*Response) *TakeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.AddResponseIDs(ids...)
}

// SetTestID sets the "test" edge to the Test entity by ID.
func (tu *TakeUpdate) SetTestID(id uuid.UUID) *TakeUpdate {
	tu.mutation.SetTestID(id)
	return tu
}

// SetTest sets the "test" edge to the Test entity.
func (tu *TakeUpdate) SetTest(t *Test) *TakeUpdate {
	return tu.SetTestID(t.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (tu *TakeUpdate) SetUserID(id uuid.UUID) *TakeUpdate {
	tu.mutation.SetUserID(id)
	return tu
}

// SetUser sets the "user" edge to the User entity.
func (tu *TakeUpdate) SetUser(u *User) *TakeUpdate {
	return tu.SetUserID(u.ID)
}

// Mutation returns the TakeMutation object of the builder.
func (tu *TakeUpdate) Mutation() *TakeMutation {
	return tu.mutation
}

// ClearResponses clears all "responses" edges to the Response entity.
func (tu *TakeUpdate) ClearResponses() *TakeUpdate {
	tu.mutation.ClearResponses()
	return tu
}

// RemoveResponseIDs removes the "responses" edge to Response entities by IDs.
func (tu *TakeUpdate) RemoveResponseIDs(ids ...uuid.UUID) *TakeUpdate {
	tu.mutation.RemoveResponseIDs(ids...)
	return tu
}

// RemoveResponses removes "responses" edges to Response entities.
func (tu *TakeUpdate) RemoveResponses(r ...*Response) *TakeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.RemoveResponseIDs(ids...)
}

// ClearTest clears the "test" edge to the Test entity.
func (tu *TakeUpdate) ClearTest() *TakeUpdate {
	tu.mutation.ClearTest()
	return tu
}

// ClearUser clears the "user" edge to the User entity.
func (tu *TakeUpdate) ClearUser() *TakeUpdate {
	tu.mutation.ClearUser()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TakeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TakeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TakeUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TakeUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TakeUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TakeUpdate) defaults() {
	if _, ok := tu.mutation.UpdateTime(); !ok {
		v := take.UpdateDefaultUpdateTime()
		tu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TakeUpdate) check() error {
	if v, ok := tu.mutation.Status(); ok {
		if err := take.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Take.status": %w`, err)}
		}
	}
	if _, ok := tu.mutation.TestID(); tu.mutation.TestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Take.test"`)
	}
	if _, ok := tu.mutation.UserID(); tu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Take.user"`)
	}
	return nil
}

func (tu *TakeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   take.Table,
			Columns: take.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: take.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: take.FieldUpdateTime,
		})
	}
	if value, ok := tu.mutation.Progress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: take.FieldProgress,
		})
	}
	if value, ok := tu.mutation.AddedProgress(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: take.FieldProgress,
		})
	}
	if value, ok := tu.mutation.Page(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: take.FieldPage,
		})
	}
	if value, ok := tu.mutation.AddedPage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: take.FieldPage,
		})
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: take.FieldStatus,
		})
	}
	if value, ok := tu.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: take.FieldMeta,
		})
	}
	if tu.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: take.FieldMeta,
		})
	}
	if tu.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   take.ResponsesTable,
			Columns: []string{take.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: response.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !tu.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   take.ResponsesTable,
			Columns: []string{take.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: response.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   take.ResponsesTable,
			Columns: []string{take.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: response.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   take.TestTable,
			Columns: []string{take.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   take.TestTable,
			Columns: []string{take.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   take.UserTable,
			Columns: []string{take.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   take.UserTable,
			Columns: []string{take.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{take.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TakeUpdateOne is the builder for updating a single Take entity.
type TakeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TakeMutation
}

// SetUpdateTime sets the "update_time" field.
func (tuo *TakeUpdateOne) SetUpdateTime(t time.Time) *TakeUpdateOne {
	tuo.mutation.SetUpdateTime(t)
	return tuo
}

// SetProgress sets the "progress" field.
func (tuo *TakeUpdateOne) SetProgress(i int) *TakeUpdateOne {
	tuo.mutation.ResetProgress()
	tuo.mutation.SetProgress(i)
	return tuo
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (tuo *TakeUpdateOne) SetNillableProgress(i *int) *TakeUpdateOne {
	if i != nil {
		tuo.SetProgress(*i)
	}
	return tuo
}

// AddProgress adds i to the "progress" field.
func (tuo *TakeUpdateOne) AddProgress(i int) *TakeUpdateOne {
	tuo.mutation.AddProgress(i)
	return tuo
}

// SetPage sets the "page" field.
func (tuo *TakeUpdateOne) SetPage(i int) *TakeUpdateOne {
	tuo.mutation.ResetPage()
	tuo.mutation.SetPage(i)
	return tuo
}

// SetNillablePage sets the "page" field if the given value is not nil.
func (tuo *TakeUpdateOne) SetNillablePage(i *int) *TakeUpdateOne {
	if i != nil {
		tuo.SetPage(*i)
	}
	return tuo
}

// AddPage adds i to the "page" field.
func (tuo *TakeUpdateOne) AddPage(i int) *TakeUpdateOne {
	tuo.mutation.AddPage(i)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TakeUpdateOne) SetStatus(t take.Status) *TakeUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TakeUpdateOne) SetNillableStatus(t *take.Status) *TakeUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetMeta sets the "meta" field.
func (tuo *TakeUpdateOne) SetMeta(m map[string]interface{}) *TakeUpdateOne {
	tuo.mutation.SetMeta(m)
	return tuo
}

// ClearMeta clears the value of the "meta" field.
func (tuo *TakeUpdateOne) ClearMeta() *TakeUpdateOne {
	tuo.mutation.ClearMeta()
	return tuo
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (tuo *TakeUpdateOne) AddResponseIDs(ids ...uuid.UUID) *TakeUpdateOne {
	tuo.mutation.AddResponseIDs(ids...)
	return tuo
}

// AddResponses adds the "responses" edges to the Response entity.
func (tuo *TakeUpdateOne) AddResponses(r ...*Response) *TakeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.AddResponseIDs(ids...)
}

// SetTestID sets the "test" edge to the Test entity by ID.
func (tuo *TakeUpdateOne) SetTestID(id uuid.UUID) *TakeUpdateOne {
	tuo.mutation.SetTestID(id)
	return tuo
}

// SetTest sets the "test" edge to the Test entity.
func (tuo *TakeUpdateOne) SetTest(t *Test) *TakeUpdateOne {
	return tuo.SetTestID(t.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (tuo *TakeUpdateOne) SetUserID(id uuid.UUID) *TakeUpdateOne {
	tuo.mutation.SetUserID(id)
	return tuo
}

// SetUser sets the "user" edge to the User entity.
func (tuo *TakeUpdateOne) SetUser(u *User) *TakeUpdateOne {
	return tuo.SetUserID(u.ID)
}

// Mutation returns the TakeMutation object of the builder.
func (tuo *TakeUpdateOne) Mutation() *TakeMutation {
	return tuo.mutation
}

// ClearResponses clears all "responses" edges to the Response entity.
func (tuo *TakeUpdateOne) ClearResponses() *TakeUpdateOne {
	tuo.mutation.ClearResponses()
	return tuo
}

// RemoveResponseIDs removes the "responses" edge to Response entities by IDs.
func (tuo *TakeUpdateOne) RemoveResponseIDs(ids ...uuid.UUID) *TakeUpdateOne {
	tuo.mutation.RemoveResponseIDs(ids...)
	return tuo
}

// RemoveResponses removes "responses" edges to Response entities.
func (tuo *TakeUpdateOne) RemoveResponses(r ...*Response) *TakeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.RemoveResponseIDs(ids...)
}

// ClearTest clears the "test" edge to the Test entity.
func (tuo *TakeUpdateOne) ClearTest() *TakeUpdateOne {
	tuo.mutation.ClearTest()
	return tuo
}

// ClearUser clears the "user" edge to the User entity.
func (tuo *TakeUpdateOne) ClearUser() *TakeUpdateOne {
	tuo.mutation.ClearUser()
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TakeUpdateOne) Select(field string, fields ...string) *TakeUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Take entity.
func (tuo *TakeUpdateOne) Save(ctx context.Context) (*Take, error) {
	var (
		err  error
		node *Take
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TakeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Take)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TakeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TakeUpdateOne) SaveX(ctx context.Context) *Take {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TakeUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TakeUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TakeUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdateTime(); !ok {
		v := take.UpdateDefaultUpdateTime()
		tuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TakeUpdateOne) check() error {
	if v, ok := tuo.mutation.Status(); ok {
		if err := take.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Take.status": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.TestID(); tuo.mutation.TestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Take.test"`)
	}
	if _, ok := tuo.mutation.UserID(); tuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Take.user"`)
	}
	return nil
}

func (tuo *TakeUpdateOne) sqlSave(ctx context.Context) (_node *Take, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   take.Table,
			Columns: take.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: take.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Take.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, take.FieldID)
		for _, f := range fields {
			if !take.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != take.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: take.FieldUpdateTime,
		})
	}
	if value, ok := tuo.mutation.Progress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: take.FieldProgress,
		})
	}
	if value, ok := tuo.mutation.AddedProgress(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: take.FieldProgress,
		})
	}
	if value, ok := tuo.mutation.Page(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: take.FieldPage,
		})
	}
	if value, ok := tuo.mutation.AddedPage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: take.FieldPage,
		})
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: take.FieldStatus,
		})
	}
	if value, ok := tuo.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: take.FieldMeta,
		})
	}
	if tuo.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: take.FieldMeta,
		})
	}
	if tuo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   take.ResponsesTable,
			Columns: []string{take.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: response.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !tuo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   take.ResponsesTable,
			Columns: []string{take.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: response.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   take.ResponsesTable,
			Columns: []string{take.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: response.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   take.TestTable,
			Columns: []string{take.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   take.TestTable,
			Columns: []string{take.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   take.UserTable,
			Columns: []string{take.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   take.UserTable,
			Columns: []string{take.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Take{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{take.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
