// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinygodsdev/orrery/internal/repository/entgo/ent/predicate"
	"github.com/tinygodsdev/orrery/internal/repository/entgo/ent/test"
	"github.com/tinygodsdev/orrery/internal/repository/entgo/ent/testtranslation"
)

// TestTranslationUpdate is the builder for updating TestTranslation entities.
type TestTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *TestTranslationMutation
}

// Where appends a list predicates to the TestTranslationUpdate builder.
func (ttu *TestTranslationUpdate) Where(ps ...predicate.TestTranslation) *TestTranslationUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetTitle sets the "title" field.
func (ttu *TestTranslationUpdate) SetTitle(s string) *TestTranslationUpdate {
	ttu.mutation.SetTitle(s)
	return ttu
}

// SetDescription sets the "description" field.
func (ttu *TestTranslationUpdate) SetDescription(s string) *TestTranslationUpdate {
	ttu.mutation.SetDescription(s)
	return ttu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ttu *TestTranslationUpdate) SetNillableDescription(s *string) *TestTranslationUpdate {
	if s != nil {
		ttu.SetDescription(*s)
	}
	return ttu
}

// ClearDescription clears the value of the "description" field.
func (ttu *TestTranslationUpdate) ClearDescription() *TestTranslationUpdate {
	ttu.mutation.ClearDescription()
	return ttu
}

// SetDetails sets the "details" field.
func (ttu *TestTranslationUpdate) SetDetails(s string) *TestTranslationUpdate {
	ttu.mutation.SetDetails(s)
	return ttu
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (ttu *TestTranslationUpdate) SetNillableDetails(s *string) *TestTranslationUpdate {
	if s != nil {
		ttu.SetDetails(*s)
	}
	return ttu
}

// ClearDetails clears the value of the "details" field.
func (ttu *TestTranslationUpdate) ClearDetails() *TestTranslationUpdate {
	ttu.mutation.ClearDetails()
	return ttu
}

// SetInstruction sets the "instruction" field.
func (ttu *TestTranslationUpdate) SetInstruction(s string) *TestTranslationUpdate {
	ttu.mutation.SetInstruction(s)
	return ttu
}

// SetNillableInstruction sets the "instruction" field if the given value is not nil.
func (ttu *TestTranslationUpdate) SetNillableInstruction(s *string) *TestTranslationUpdate {
	if s != nil {
		ttu.SetInstruction(*s)
	}
	return ttu
}

// ClearInstruction clears the value of the "instruction" field.
func (ttu *TestTranslationUpdate) ClearInstruction() *TestTranslationUpdate {
	ttu.mutation.ClearInstruction()
	return ttu
}

// SetResultPreambule sets the "result_preambule" field.
func (ttu *TestTranslationUpdate) SetResultPreambule(s string) *TestTranslationUpdate {
	ttu.mutation.SetResultPreambule(s)
	return ttu
}

// SetNillableResultPreambule sets the "result_preambule" field if the given value is not nil.
func (ttu *TestTranslationUpdate) SetNillableResultPreambule(s *string) *TestTranslationUpdate {
	if s != nil {
		ttu.SetResultPreambule(*s)
	}
	return ttu
}

// ClearResultPreambule clears the value of the "result_preambule" field.
func (ttu *TestTranslationUpdate) ClearResultPreambule() *TestTranslationUpdate {
	ttu.mutation.ClearResultPreambule()
	return ttu
}

// SetTestID sets the "test" edge to the Test entity by ID.
func (ttu *TestTranslationUpdate) SetTestID(id uuid.UUID) *TestTranslationUpdate {
	ttu.mutation.SetTestID(id)
	return ttu
}

// SetNillableTestID sets the "test" edge to the Test entity by ID if the given value is not nil.
func (ttu *TestTranslationUpdate) SetNillableTestID(id *uuid.UUID) *TestTranslationUpdate {
	if id != nil {
		ttu = ttu.SetTestID(*id)
	}
	return ttu
}

// SetTest sets the "test" edge to the Test entity.
func (ttu *TestTranslationUpdate) SetTest(t *Test) *TestTranslationUpdate {
	return ttu.SetTestID(t.ID)
}

// Mutation returns the TestTranslationMutation object of the builder.
func (ttu *TestTranslationUpdate) Mutation() *TestTranslationMutation {
	return ttu.mutation
}

// ClearTest clears the "test" edge to the Test entity.
func (ttu *TestTranslationUpdate) ClearTest() *TestTranslationUpdate {
	ttu.mutation.ClearTest()
	return ttu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TestTranslationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ttu.hooks) == 0 {
		if err = ttu.check(); err != nil {
			return 0, err
		}
		affected, err = ttu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestTranslationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttu.check(); err != nil {
				return 0, err
			}
			ttu.mutation = mutation
			affected, err = ttu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ttu.hooks) - 1; i >= 0; i-- {
			if ttu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TestTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TestTranslationUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TestTranslationUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *TestTranslationUpdate) check() error {
	if v, ok := ttu.mutation.Title(); ok {
		if err := testtranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TestTranslation.title": %w`, err)}
		}
	}
	return nil
}

func (ttu *TestTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testtranslation.Table,
			Columns: testtranslation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testtranslation.FieldID,
			},
		},
	}
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtranslation.FieldTitle,
		})
	}
	if value, ok := ttu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtranslation.FieldDescription,
		})
	}
	if ttu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testtranslation.FieldDescription,
		})
	}
	if value, ok := ttu.mutation.Details(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtranslation.FieldDetails,
		})
	}
	if ttu.mutation.DetailsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testtranslation.FieldDetails,
		})
	}
	if value, ok := ttu.mutation.Instruction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtranslation.FieldInstruction,
		})
	}
	if ttu.mutation.InstructionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testtranslation.FieldInstruction,
		})
	}
	if value, ok := ttu.mutation.ResultPreambule(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtranslation.FieldResultPreambule,
		})
	}
	if ttu.mutation.ResultPreambuleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testtranslation.FieldResultPreambule,
		})
	}
	if ttu.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testtranslation.TestTable,
			Columns: []string{testtranslation.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testtranslation.TestTable,
			Columns: []string{testtranslation.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TestTranslationUpdateOne is the builder for updating a single TestTranslation entity.
type TestTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestTranslationMutation
}

// SetTitle sets the "title" field.
func (ttuo *TestTranslationUpdateOne) SetTitle(s string) *TestTranslationUpdateOne {
	ttuo.mutation.SetTitle(s)
	return ttuo
}

// SetDescription sets the "description" field.
func (ttuo *TestTranslationUpdateOne) SetDescription(s string) *TestTranslationUpdateOne {
	ttuo.mutation.SetDescription(s)
	return ttuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ttuo *TestTranslationUpdateOne) SetNillableDescription(s *string) *TestTranslationUpdateOne {
	if s != nil {
		ttuo.SetDescription(*s)
	}
	return ttuo
}

// ClearDescription clears the value of the "description" field.
func (ttuo *TestTranslationUpdateOne) ClearDescription() *TestTranslationUpdateOne {
	ttuo.mutation.ClearDescription()
	return ttuo
}

// SetDetails sets the "details" field.
func (ttuo *TestTranslationUpdateOne) SetDetails(s string) *TestTranslationUpdateOne {
	ttuo.mutation.SetDetails(s)
	return ttuo
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (ttuo *TestTranslationUpdateOne) SetNillableDetails(s *string) *TestTranslationUpdateOne {
	if s != nil {
		ttuo.SetDetails(*s)
	}
	return ttuo
}

// ClearDetails clears the value of the "details" field.
func (ttuo *TestTranslationUpdateOne) ClearDetails() *TestTranslationUpdateOne {
	ttuo.mutation.ClearDetails()
	return ttuo
}

// SetInstruction sets the "instruction" field.
func (ttuo *TestTranslationUpdateOne) SetInstruction(s string) *TestTranslationUpdateOne {
	ttuo.mutation.SetInstruction(s)
	return ttuo
}

// SetNillableInstruction sets the "instruction" field if the given value is not nil.
func (ttuo *TestTranslationUpdateOne) SetNillableInstruction(s *string) *TestTranslationUpdateOne {
	if s != nil {
		ttuo.SetInstruction(*s)
	}
	return ttuo
}

// ClearInstruction clears the value of the "instruction" field.
func (ttuo *TestTranslationUpdateOne) ClearInstruction() *TestTranslationUpdateOne {
	ttuo.mutation.ClearInstruction()
	return ttuo
}

// SetResultPreambule sets the "result_preambule" field.
func (ttuo *TestTranslationUpdateOne) SetResultPreambule(s string) *TestTranslationUpdateOne {
	ttuo.mutation.SetResultPreambule(s)
	return ttuo
}

// SetNillableResultPreambule sets the "result_preambule" field if the given value is not nil.
func (ttuo *TestTranslationUpdateOne) SetNillableResultPreambule(s *string) *TestTranslationUpdateOne {
	if s != nil {
		ttuo.SetResultPreambule(*s)
	}
	return ttuo
}

// ClearResultPreambule clears the value of the "result_preambule" field.
func (ttuo *TestTranslationUpdateOne) ClearResultPreambule() *TestTranslationUpdateOne {
	ttuo.mutation.ClearResultPreambule()
	return ttuo
}

// SetTestID sets the "test" edge to the Test entity by ID.
func (ttuo *TestTranslationUpdateOne) SetTestID(id uuid.UUID) *TestTranslationUpdateOne {
	ttuo.mutation.SetTestID(id)
	return ttuo
}

// SetNillableTestID sets the "test" edge to the Test entity by ID if the given value is not nil.
func (ttuo *TestTranslationUpdateOne) SetNillableTestID(id *uuid.UUID) *TestTranslationUpdateOne {
	if id != nil {
		ttuo = ttuo.SetTestID(*id)
	}
	return ttuo
}

// SetTest sets the "test" edge to the Test entity.
func (ttuo *TestTranslationUpdateOne) SetTest(t *Test) *TestTranslationUpdateOne {
	return ttuo.SetTestID(t.ID)
}

// Mutation returns the TestTranslationMutation object of the builder.
func (ttuo *TestTranslationUpdateOne) Mutation() *TestTranslationMutation {
	return ttuo.mutation
}

// ClearTest clears the "test" edge to the Test entity.
func (ttuo *TestTranslationUpdateOne) ClearTest() *TestTranslationUpdateOne {
	ttuo.mutation.ClearTest()
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TestTranslationUpdateOne) Select(field string, fields ...string) *TestTranslationUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TestTranslation entity.
func (ttuo *TestTranslationUpdateOne) Save(ctx context.Context) (*TestTranslation, error) {
	var (
		err  error
		node *TestTranslation
	)
	if len(ttuo.hooks) == 0 {
		if err = ttuo.check(); err != nil {
			return nil, err
		}
		node, err = ttuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestTranslationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttuo.check(); err != nil {
				return nil, err
			}
			ttuo.mutation = mutation
			node, err = ttuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ttuo.hooks) - 1; i >= 0; i-- {
			if ttuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ttuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TestTranslation)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TestTranslationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TestTranslationUpdateOne) SaveX(ctx context.Context) *TestTranslation {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TestTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TestTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *TestTranslationUpdateOne) check() error {
	if v, ok := ttuo.mutation.Title(); ok {
		if err := testtranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TestTranslation.title": %w`, err)}
		}
	}
	return nil
}

func (ttuo *TestTranslationUpdateOne) sqlSave(ctx context.Context) (_node *TestTranslation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testtranslation.Table,
			Columns: testtranslation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testtranslation.FieldID,
			},
		},
	}
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testtranslation.FieldID)
		for _, f := range fields {
			if !testtranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testtranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtranslation.FieldTitle,
		})
	}
	if value, ok := ttuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtranslation.FieldDescription,
		})
	}
	if ttuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testtranslation.FieldDescription,
		})
	}
	if value, ok := ttuo.mutation.Details(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtranslation.FieldDetails,
		})
	}
	if ttuo.mutation.DetailsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testtranslation.FieldDetails,
		})
	}
	if value, ok := ttuo.mutation.Instruction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtranslation.FieldInstruction,
		})
	}
	if ttuo.mutation.InstructionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testtranslation.FieldInstruction,
		})
	}
	if value, ok := ttuo.mutation.ResultPreambule(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtranslation.FieldResultPreambule,
		})
	}
	if ttuo.mutation.ResultPreambuleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testtranslation.FieldResultPreambule,
		})
	}
	if ttuo.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testtranslation.TestTable,
			Columns: []string{testtranslation.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testtranslation.TestTable,
			Columns: []string{testtranslation.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestTranslation{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
