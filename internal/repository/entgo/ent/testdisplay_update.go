// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinygodsdev/orrery/internal/repository/entgo/ent/predicate"
	"github.com/tinygodsdev/orrery/internal/repository/entgo/ent/test"
	"github.com/tinygodsdev/orrery/internal/repository/entgo/ent/testdisplay"
)

// TestDisplayUpdate is the builder for updating TestDisplay entities.
type TestDisplayUpdate struct {
	config
	hooks    []Hook
	mutation *TestDisplayMutation
}

// Where appends a list predicates to the TestDisplayUpdate builder.
func (tdu *TestDisplayUpdate) Where(ps ...predicate.TestDisplay) *TestDisplayUpdate {
	tdu.mutation.Where(ps...)
	return tdu
}

// SetRandomizeOrder sets the "randomize_order" field.
func (tdu *TestDisplayUpdate) SetRandomizeOrder(b bool) *TestDisplayUpdate {
	tdu.mutation.SetRandomizeOrder(b)
	return tdu
}

// SetNillableRandomizeOrder sets the "randomize_order" field if the given value is not nil.
func (tdu *TestDisplayUpdate) SetNillableRandomizeOrder(b *bool) *TestDisplayUpdate {
	if b != nil {
		tdu.SetRandomizeOrder(*b)
	}
	return tdu
}

// SetQuestionsPerPage sets the "questions_per_page" field.
func (tdu *TestDisplayUpdate) SetQuestionsPerPage(i int) *TestDisplayUpdate {
	tdu.mutation.ResetQuestionsPerPage()
	tdu.mutation.SetQuestionsPerPage(i)
	return tdu
}

// SetNillableQuestionsPerPage sets the "questions_per_page" field if the given value is not nil.
func (tdu *TestDisplayUpdate) SetNillableQuestionsPerPage(i *int) *TestDisplayUpdate {
	if i != nil {
		tdu.SetQuestionsPerPage(*i)
	}
	return tdu
}

// AddQuestionsPerPage adds i to the "questions_per_page" field.
func (tdu *TestDisplayUpdate) AddQuestionsPerPage(i int) *TestDisplayUpdate {
	tdu.mutation.AddQuestionsPerPage(i)
	return tdu
}

// SetTestID sets the "test" edge to the Test entity by ID.
func (tdu *TestDisplayUpdate) SetTestID(id uuid.UUID) *TestDisplayUpdate {
	tdu.mutation.SetTestID(id)
	return tdu
}

// SetTest sets the "test" edge to the Test entity.
func (tdu *TestDisplayUpdate) SetTest(t *Test) *TestDisplayUpdate {
	return tdu.SetTestID(t.ID)
}

// Mutation returns the TestDisplayMutation object of the builder.
func (tdu *TestDisplayUpdate) Mutation() *TestDisplayMutation {
	return tdu.mutation
}

// ClearTest clears the "test" edge to the Test entity.
func (tdu *TestDisplayUpdate) ClearTest() *TestDisplayUpdate {
	tdu.mutation.ClearTest()
	return tdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tdu *TestDisplayUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tdu.hooks) == 0 {
		if err = tdu.check(); err != nil {
			return 0, err
		}
		affected, err = tdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestDisplayMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tdu.check(); err != nil {
				return 0, err
			}
			tdu.mutation = mutation
			affected, err = tdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tdu.hooks) - 1; i >= 0; i-- {
			if tdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tdu *TestDisplayUpdate) SaveX(ctx context.Context) int {
	affected, err := tdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tdu *TestDisplayUpdate) Exec(ctx context.Context) error {
	_, err := tdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdu *TestDisplayUpdate) ExecX(ctx context.Context) {
	if err := tdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdu *TestDisplayUpdate) check() error {
	if v, ok := tdu.mutation.QuestionsPerPage(); ok {
		if err := testdisplay.QuestionsPerPageValidator(v); err != nil {
			return &ValidationError{Name: "questions_per_page", err: fmt.Errorf(`ent: validator failed for field "TestDisplay.questions_per_page": %w`, err)}
		}
	}
	if _, ok := tdu.mutation.TestID(); tdu.mutation.TestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TestDisplay.test"`)
	}
	return nil
}

func (tdu *TestDisplayUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testdisplay.Table,
			Columns: testdisplay.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testdisplay.FieldID,
			},
		},
	}
	if ps := tdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdu.mutation.RandomizeOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: testdisplay.FieldRandomizeOrder,
		})
	}
	if value, ok := tdu.mutation.QuestionsPerPage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: testdisplay.FieldQuestionsPerPage,
		})
	}
	if value, ok := tdu.mutation.AddedQuestionsPerPage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: testdisplay.FieldQuestionsPerPage,
		})
	}
	if tdu.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   testdisplay.TestTable,
			Columns: []string{testdisplay.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tdu.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   testdisplay.TestTable,
			Columns: []string{testdisplay.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testdisplay.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TestDisplayUpdateOne is the builder for updating a single TestDisplay entity.
type TestDisplayUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestDisplayMutation
}

// SetRandomizeOrder sets the "randomize_order" field.
func (tduo *TestDisplayUpdateOne) SetRandomizeOrder(b bool) *TestDisplayUpdateOne {
	tduo.mutation.SetRandomizeOrder(b)
	return tduo
}

// SetNillableRandomizeOrder sets the "randomize_order" field if the given value is not nil.
func (tduo *TestDisplayUpdateOne) SetNillableRandomizeOrder(b *bool) *TestDisplayUpdateOne {
	if b != nil {
		tduo.SetRandomizeOrder(*b)
	}
	return tduo
}

// SetQuestionsPerPage sets the "questions_per_page" field.
func (tduo *TestDisplayUpdateOne) SetQuestionsPerPage(i int) *TestDisplayUpdateOne {
	tduo.mutation.ResetQuestionsPerPage()
	tduo.mutation.SetQuestionsPerPage(i)
	return tduo
}

// SetNillableQuestionsPerPage sets the "questions_per_page" field if the given value is not nil.
func (tduo *TestDisplayUpdateOne) SetNillableQuestionsPerPage(i *int) *TestDisplayUpdateOne {
	if i != nil {
		tduo.SetQuestionsPerPage(*i)
	}
	return tduo
}

// AddQuestionsPerPage adds i to the "questions_per_page" field.
func (tduo *TestDisplayUpdateOne) AddQuestionsPerPage(i int) *TestDisplayUpdateOne {
	tduo.mutation.AddQuestionsPerPage(i)
	return tduo
}

// SetTestID sets the "test" edge to the Test entity by ID.
func (tduo *TestDisplayUpdateOne) SetTestID(id uuid.UUID) *TestDisplayUpdateOne {
	tduo.mutation.SetTestID(id)
	return tduo
}

// SetTest sets the "test" edge to the Test entity.
func (tduo *TestDisplayUpdateOne) SetTest(t *Test) *TestDisplayUpdateOne {
	return tduo.SetTestID(t.ID)
}

// Mutation returns the TestDisplayMutation object of the builder.
func (tduo *TestDisplayUpdateOne) Mutation() *TestDisplayMutation {
	return tduo.mutation
}

// ClearTest clears the "test" edge to the Test entity.
func (tduo *TestDisplayUpdateOne) ClearTest() *TestDisplayUpdateOne {
	tduo.mutation.ClearTest()
	return tduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tduo *TestDisplayUpdateOne) Select(field string, fields ...string) *TestDisplayUpdateOne {
	tduo.fields = append([]string{field}, fields...)
	return tduo
}

// Save executes the query and returns the updated TestDisplay entity.
func (tduo *TestDisplayUpdateOne) Save(ctx context.Context) (*TestDisplay, error) {
	var (
		err  error
		node *TestDisplay
	)
	if len(tduo.hooks) == 0 {
		if err = tduo.check(); err != nil {
			return nil, err
		}
		node, err = tduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestDisplayMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tduo.check(); err != nil {
				return nil, err
			}
			tduo.mutation = mutation
			node, err = tduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tduo.hooks) - 1; i >= 0; i-- {
			if tduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TestDisplay)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TestDisplayMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tduo *TestDisplayUpdateOne) SaveX(ctx context.Context) *TestDisplay {
	node, err := tduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tduo *TestDisplayUpdateOne) Exec(ctx context.Context) error {
	_, err := tduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tduo *TestDisplayUpdateOne) ExecX(ctx context.Context) {
	if err := tduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tduo *TestDisplayUpdateOne) check() error {
	if v, ok := tduo.mutation.QuestionsPerPage(); ok {
		if err := testdisplay.QuestionsPerPageValidator(v); err != nil {
			return &ValidationError{Name: "questions_per_page", err: fmt.Errorf(`ent: validator failed for field "TestDisplay.questions_per_page": %w`, err)}
		}
	}
	if _, ok := tduo.mutation.TestID(); tduo.mutation.TestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TestDisplay.test"`)
	}
	return nil
}

func (tduo *TestDisplayUpdateOne) sqlSave(ctx context.Context) (_node *TestDisplay, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testdisplay.Table,
			Columns: testdisplay.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testdisplay.FieldID,
			},
		},
	}
	id, ok := tduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestDisplay.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testdisplay.FieldID)
		for _, f := range fields {
			if !testdisplay.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testdisplay.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tduo.mutation.RandomizeOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: testdisplay.FieldRandomizeOrder,
		})
	}
	if value, ok := tduo.mutation.QuestionsPerPage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: testdisplay.FieldQuestionsPerPage,
		})
	}
	if value, ok := tduo.mutation.AddedQuestionsPerPage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: testdisplay.FieldQuestionsPerPage,
		})
	}
	if tduo.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   testdisplay.TestTable,
			Columns: []string{testdisplay.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tduo.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   testdisplay.TestTable,
			Columns: []string{testdisplay.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestDisplay{config: tduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testdisplay.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
