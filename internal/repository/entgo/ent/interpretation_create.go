// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/interpretation"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/interpretationtranslation"
	"github.com/DanielTitkov/lentils/internal/repository/entgo/ent/scale"
	"github.com/google/uuid"
)

// InterpretationCreate is the builder for creating a Interpretation entity.
type InterpretationCreate struct {
	config
	mutation *InterpretationMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ic *InterpretationCreate) SetCreateTime(t time.Time) *InterpretationCreate {
	ic.mutation.SetCreateTime(t)
	return ic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ic *InterpretationCreate) SetNillableCreateTime(t *time.Time) *InterpretationCreate {
	if t != nil {
		ic.SetCreateTime(*t)
	}
	return ic
}

// SetUpdateTime sets the "update_time" field.
func (ic *InterpretationCreate) SetUpdateTime(t time.Time) *InterpretationCreate {
	ic.mutation.SetUpdateTime(t)
	return ic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ic *InterpretationCreate) SetNillableUpdateTime(t *time.Time) *InterpretationCreate {
	if t != nil {
		ic.SetUpdateTime(*t)
	}
	return ic
}

// SetRange sets the "range" field.
func (ic *InterpretationCreate) SetRange(f [2]float64) *InterpretationCreate {
	ic.mutation.SetRange(f)
	return ic
}

// SetID sets the "id" field.
func (ic *InterpretationCreate) SetID(u uuid.UUID) *InterpretationCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *InterpretationCreate) SetNillableID(u *uuid.UUID) *InterpretationCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// AddTranslationIDs adds the "translations" edge to the InterpretationTranslation entity by IDs.
func (ic *InterpretationCreate) AddTranslationIDs(ids ...uuid.UUID) *InterpretationCreate {
	ic.mutation.AddTranslationIDs(ids...)
	return ic
}

// AddTranslations adds the "translations" edges to the InterpretationTranslation entity.
func (ic *InterpretationCreate) AddTranslations(i ...*InterpretationTranslation) *InterpretationCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddTranslationIDs(ids...)
}

// SetScaleID sets the "scale" edge to the Scale entity by ID.
func (ic *InterpretationCreate) SetScaleID(id uuid.UUID) *InterpretationCreate {
	ic.mutation.SetScaleID(id)
	return ic
}

// SetNillableScaleID sets the "scale" edge to the Scale entity by ID if the given value is not nil.
func (ic *InterpretationCreate) SetNillableScaleID(id *uuid.UUID) *InterpretationCreate {
	if id != nil {
		ic = ic.SetScaleID(*id)
	}
	return ic
}

// SetScale sets the "scale" edge to the Scale entity.
func (ic *InterpretationCreate) SetScale(s *Scale) *InterpretationCreate {
	return ic.SetScaleID(s.ID)
}

// Mutation returns the InterpretationMutation object of the builder.
func (ic *InterpretationCreate) Mutation() *InterpretationMutation {
	return ic.mutation
}

// Save creates the Interpretation in the database.
func (ic *InterpretationCreate) Save(ctx context.Context) (*Interpretation, error) {
	var (
		err  error
		node *Interpretation
	)
	ic.defaults()
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InterpretationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InterpretationCreate) SaveX(ctx context.Context) *Interpretation {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InterpretationCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InterpretationCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InterpretationCreate) defaults() {
	if _, ok := ic.mutation.CreateTime(); !ok {
		v := interpretation.DefaultCreateTime()
		ic.mutation.SetCreateTime(v)
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		v := interpretation.DefaultUpdateTime()
		ic.mutation.SetUpdateTime(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := interpretation.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InterpretationCreate) check() error {
	if _, ok := ic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Interpretation.create_time"`)}
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Interpretation.update_time"`)}
	}
	if _, ok := ic.mutation.Range(); !ok {
		return &ValidationError{Name: "range", err: errors.New(`ent: missing required field "Interpretation.range"`)}
	}
	return nil
}

func (ic *InterpretationCreate) sqlSave(ctx context.Context) (*Interpretation, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ic *InterpretationCreate) createSpec() (*Interpretation, *sqlgraph.CreateSpec) {
	var (
		_node = &Interpretation{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: interpretation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: interpretation.FieldID,
			},
		}
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: interpretation.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ic.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: interpretation.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ic.mutation.Range(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: interpretation.FieldRange,
		})
		_node.Range = value
	}
	if nodes := ic.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interpretation.TranslationsTable,
			Columns: []string{interpretation.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: interpretationtranslation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ScaleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interpretation.ScaleTable,
			Columns: []string{interpretation.ScaleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scale.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.scale_interpretations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InterpretationCreateBulk is the builder for creating many Interpretation entities in bulk.
type InterpretationCreateBulk struct {
	config
	builders []*InterpretationCreate
}

// Save creates the Interpretation entities in the database.
func (icb *InterpretationCreateBulk) Save(ctx context.Context) ([]*Interpretation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Interpretation, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InterpretationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InterpretationCreateBulk) SaveX(ctx context.Context) []*Interpretation {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InterpretationCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InterpretationCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
